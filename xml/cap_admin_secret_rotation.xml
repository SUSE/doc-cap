<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha-cap-secrets-rotation"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>Rotating Automatically Generated Secrets</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
  <para>
   &cap; uses a number of automatically generated secrets (passwords and
   certificates) for use internally provided by &operator;. This removes
   the burden from human operators while allowing for secure communication.

   From time to time, operators may wish to change such secrets, either manually
   or on a schedule. This is called rotating a secret.
  </para>
  <sect1 xml:id="sec-cap-secrets-rotation-finding">
    <title>Finding Secrets</title>
    <para>
     Retrieve the list of all secrets maintained by &kubecf;:
    </para>
<screen>
&prompt.user;kubectl get quarkssecret --namespace <replaceable>kubecf</replaceable>
    </screen>
    <para>
      To see information about a specific secret, for example the NATS
      password:
    </para>
<screen>
&prompt.user;kubectl get quarkssecret --namespace <replaceable>kubecf</replaceable> <replaceable>kubecf.var-nats-password</replaceable> --output yaml
   </screen>
   <para>
     Note that each quarkssecret has a corresponding regular &kube; secret
     that it controls:
   </para>
<screen>
&prompt.user;kubectl get secret --namespace <replaceable>kubecf</replaceable>
&prompt.user;kubectl get secret --namespace <replaceable>kubecf</replaceable> <replaceable>kubecf.var-nats-password</replaceable> --output yaml
   </screen>
  </sect1>
  <sect1 xml:id="sec-cap-secrets-rotation-specific">
    <title>Rotating Specific Secrets</title>
    <para>
      To rotate a secret, for example <replaceable>kubecf.var-nats-password</replaceable>:
    </para>
    <procedure>
      <step>
        <para>Create a YAML file for a ConfigMap of the form:</para>
<screen>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: <replaceable>rotate-kubecf.var-nats-password</replaceable>
  labels:
    quarks.cloudfoundry.org/secret-rotation: "true"
data:
  secrets: '["<replaceable>kubecf.var-nats-password</replaceable>"]'
       </screen>
       <para>
         The name of the ConfigMap can be anything allowed by &kube; syntax but
         we recommend using a name derived from the name of the secret itself.
       </para>
       <para>
         Also, the example above rotates only a single secret but 
         the <literal>data.secrets</literal> key accepts an array of secret
         names, allowing simultaneous rotation of many secrets. 
       </para>
      </step>
      <step>
        <para>Apply the ConfigMap:</para>
<screen>
&prompt.user;kubectl apply --namespace <replaceable>kubecf</replaceable> -f <replaceable>/path/to/your/yaml/file</replaceable>
       </screen>
       <para>
         The result can be seen in the &operator;'s log.</para>
     </step>
      <step>
        <para>
          After the rotation is complete, that is after secrets have been
          changed and all affected pods have been restarted, delete the config
          map again:
        </para>
<screen>
&prompt.user;kubectl delete <replaceable>--namespace</replaceable> kubecf -f <replaceable>/path/to/your/yaml/file</replaceable>
       </screen>
      </step>
    </procedure>
  </sect1>
</chapter>
