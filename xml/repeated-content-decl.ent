<!--...........................................................................
This file contains entities for repeated content entities, for re-printing
content in multiple locations rather than using xrefs, so that users do not have
to skip around so much. This works just like copy-paste, so be mindful of
sections, titles, and paragraphs

Use xmlns="http://docbook.org/ns/docbook" on the first occurrence of every
parent formatting tag in each entity, to avoid "Namespace default prefix was not
found" errors
............................................................................-->


<!--ENTITY deployment-pod-status............................................-->

<!ENTITY deployment-pod-status
'<!-- TODO-CAP2 update description -->
<variablelist xmlns="http://docbook.org/ns/docbook">
<varlistentry>
     <term>Some Pods Show as Not Running</term>
     <listitem>
      <para>
       During deployment, pods are spawned over time, starting with a single
       pod whose name stars with <literal>ig-</literal>. This pod will eventually
       disappear and will be replaced by other pods whose progress
       then can be followed as usual.

       The whole process can take around 20â€”30 minutes to finish.

       The initial stage may look like this:
      </para>
<screen>
&prompt.user;kubectl get pods --namespace kubecf
ig-kubecf-f9085246244fbe70-jvg4z   1/21    Running             0          8m28s
</screen>
      <para>
       Later the progress may look like this:
      </para>
<screen>
NAME                        READY   STATUS       RESTARTS   AGE
adapter-0                   4/4     Running      0          6m45s
api-0                       0/15    Init:30/63   0          6m38s
bits-0                      0/6     Init:8/15    0          6m34s
bosh-dns-7787b4bb88-2wg9s   1/1     Running      0          7m7s
bosh-dns-7787b4bb88-t42mh   1/1     Running      0          7m7s
cc-worker-0                 0/4     Init:5/9     0          6m36s
credhub-0                   0/5     Init:6/11    0          6m33s
database-0                  2/2     Running      0          6m36s
diego-api-0                 6/6     Running      2          6m38s
doppler-0                   0/9     Init:7/16    0          6m40s
eirini-0                    9/9     Running      0          6m37s
log-api-0                   0/7     Init:6/13    0          6m35s
nats-0                      4/4     Running      0          6m39s
router-0                    0/5     Init:5/11    0          6m33s
routing-api-0               0/4     Init:5/10    0          6m42s
scheduler-0                 0/8     Init:8/17    0          6m35s
singleton-blobstore-0       0/6     Init:6/11    0          6m46s
tcp-router-0                0/5     Init:5/11    0          6m37s
uaa-0                       0/6     Init:8/13    0          6m36s
</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Some Pods Terminate and Restart during Deployment</term>
     <listitem>
      <para>
       When monitoring the status of a deployment, pods can be observed
       transitioning from a <literal>Running</literal> state to a
       <literal>Terminating</literal> state, then returning to a
       <literal>Running</literal> again.
      </para>
      <para>
       If a <literal>RESTARTS</literal> count of 0 is maintained during this
       process, this is normal behavior and not due to failing pods. It is not
       necessary to stop the deployment. During deployment, pods will modify
       annotations on itself via the StatefulSet pod spec. In order to get the
       correct annotations on the running pod, it is stopped and restarted.
       Under normal circumstances, this behavior should only result in a pod
       restarting once.
      </para>
     </listitem>
    </varlistentry>
</variablelist>'>

<!--ENTITY release-name-length ................................................-->

<!ENTITY release-name-length
'<variablelist xmlns="http://docbook.org/ns/docbook">
<varlistentry>
     <term>Length of release names</term>
     <listitem>
      <para>
       Release names (for example, when you run <command>helm install --name</command>)
have a maximum length of 36 characters.
      </para>
     </listitem>
    </varlistentry>
</variablelist>'>

<!--ENTITY readmefirst......................................................-->

<!ENTITY readmefirst
'<variablelist xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
<varlistentry>
     <term>README first!</term>
     <listitem>
      <para>
Before you start deploying &productname;, review the following documents:
      </para>
              <para>
         Read the Release Notes:
         <link xlink:href="https://www.suse.com/releasenotes/x86_64/SUSE-CAP/1/">
           Release Notes &productname;</link>
        </para>
                <para>
            Read
         <xref linkend="cha-cap-depl-notes"/>
        </para>
     </listitem>
     </varlistentry>
     </variablelist>'>

<!--ENTITY supported-domains................................................-->
<!ENTITY supported-domains
'<warning xmlns="http://docbook.org/ns/docbook">
  <title>Supported Domains</title>
  <para>
   When selecting a domain, &productname; expects <literal>DOMAIN</literal> to
   be either a subdomain or a root domain. Setting <literal>DOMAIN</literal> to
   a top-level domain, such <literal>suse</literal>, is not supported.
  </para>
 </warning>'>

<!--ENTITY releases-table...................................................-->

<!ENTITY releases-table
'<!-- TODO remember to keep this table updated -->
  <informaltable xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
   <tgroup cols="9">
    <thead>
     <row>
<!-- TODO-CAP2 update columns -->
      <entry>CAP Release</entry>
      <entry>&operator; &helm; Chart Version</entry>
      <entry>&kubecf; &helm; Chart Version</entry>
      <entry>Stratos &helm; Chart Version</entry>
      <entry>Stratos Metrics &helm; Chart Version</entry>
      <entry>Minimum &kube; Version Required</entry>
      <entry>CF API Implemented</entry>
      <entry>Known Compatible CF CLI Version</entry>
      <entry>CF CLI URL</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>&productnumber; (current release)</entry>
      <entry>&operator_chart;</entry>
      <entry>&kubecf_chart;</entry>
      <entry>&stratos_chart;</entry>
      <entry>&metrics_chart;</entry>
      <entry>&min_kube;</entry>
      <!-- cf-deployment 12.17: 2.144.0, cf api result: -->
      <entry>2.144.0</entry>
      <entry>6.49.0</entry>
      <entry><link xlink:href="https://github.com/cloudfoundry/cli/releases/tag/v6.49.0"/></entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>'>

<!--ENTITY cfcli-prereq.....................................................-->

<!ENTITY cfcli-prereq
'<listitem xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
<para>
 <command>cf</command>, the &cf; command line interface. For more information,
 see <link xlink:href="https://docs.cloudfoundry.org/cf-cli/"/>.
</para>
<para>
 For &sle; and &opensuse; systems, install using <command>zypper</command>.
</para>
<screen>&prompt.user;sudo zypper install cf-cli</screen>
<para>
 For &slea;, ensure the &productname; Tools Module has been added. Add the
 module using &yast; or &suseconnect;.
</para>
<screen>&prompt.user;&suseconnect; --product sle-module-cap-tools/15.1/x86_64</screen>
<para>
 For other systems, follow the instructions at
 <link xlink:href="https://docs.cloudfoundry.org/cf-cli/install-go-cli.html"/>.
</para>
</listitem>'>

<!--ENTITY kubectl-prereq...................................................-->

<!ENTITY kubectl-prereq
'<listitem xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
<para>
 <command>kubectl</command>, the &kube; command line tool. For more
 information, refer to
 <link xlink:href="https://kubernetes.io/docs/reference/kubectl/overview/"/>.
</para>
<para>
 For &slea; 12 SP3 or 15 SP1 systems, install the package
 <package>kubernetes-client</package> from the <emphasis>Public Cloud</emphasis>
 module.
</para>
<para>
 For other systems, follow the instructions at
 <link xlink:href="https://kubernetes.io/docs/tasks/tools/install-kubectl/"/>.
</para>
</listitem>'>

<!--ENTITY jq-prereq........................................................-->

<!ENTITY jq-prereq
'<listitem xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
<para>
 <command>jq</command>, a command line JSON processor. See
 <link xlink:href="https://stedolan.github.io/jq/"/> for more information and
 installation instructions.
</para>
</listitem>'>

<!--ENTITY curl-prereq......................................................-->

<!ENTITY curl-prereq
'<listitem xmlns="http://docbook.org/ns/docbook">
<para>
 <command>curl</command>, the Client URL (cURL) command line tool.
</para>
</listitem>'>

<!--ENTITY sed-prereq.......................................................-->

<!ENTITY sed-prereq
'<listitem xmlns="http://docbook.org/ns/docbook">
<para>
 <command>sed</command>, the stream editor.
</para>
</listitem>'>

<!--ENTITY kernel-prereq....................................................-->

<!ENTITY kernel-prereq
'<para xmlns="http://docbook.org/ns/docbook">
 Ensure nodes use a mininum kernel version of &kernel_version; and the kernel
 parameter <literal>max_user_namespaces</literal> should be set to at least
 10000. 
</para>'>

<!--ENTITY uaac-prereq......................................................-->

<!ENTITY uaac-prereq
'<listitem xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
<para>
 <command>uaac</command>, the &cf; <literal>uaa</literal> command line client
 (UAAC). See
 <link xlink:href="https://docs.cloudfoundry.org/uaa/uaa-user-management.html"/>
 for more information and installation instructions.
</para>
<para>
 On &sle; systems, ensure the <literal>ruby-devel</literal> and <literal>gcc-c++</literal>
 packages have been installed before installing the <literal>cf-uaac</literal> gem.
</para>
<screen>&prompt.user;sudo zypper install ruby-devel gcc-c++</screen>
</listitem>'>

<!--ENTITY uaac-target......................................................-->

<!ENTITY uaac-target
'<step xmlns="http://docbook.org/ns/docbook">
<para>
 Use UAAC to target your <literal>uaa</literal> server.
</para>
<screen>&prompt.user;uaac target --skip-ssl-validation <replaceable>https://uaa.example.com:2793</replaceable></screen>
</step>'>

<!--ENTITY uaac-authenticate................................................-->

<!ENTITY uaac-authenticate
'<step xmlns="http://docbook.org/ns/docbook">
<para>
 Authenticate to the <literal>uaa</literal> server as
 <literal>admin</literal> using the
 <literal>UAA_ADMIN_CLIENT_SECRET</literal> set in your
 &values-filename; file.
</para>
<screen>&prompt.user;uaac token client get admin --secret <replaceable>password</replaceable></screen>
</step>'>

<!--ENTITY helm-search-suse.................................................-->

<!ENTITY helm-search-suse
'<screen xmlns="http://docbook.org/ns/docbook">&prompt.user;helm search suse
NAME                            CHART VERSION   APP VERSION     DESCRIPTION
suse/cf-operator                &operator_chart;          &chart_appversion;         A Helm chart for cf-operator, the k8s operator ....
suse/console                    &stratos_chart;           &chart_appversion;         A Helm chart for deploying SUSE Stratos Console
suse/kubecf                     &kubecf_chart;            &chart_appversion;         A Helm chart for KubeCF
suse/metrics                    &metrics_chart;           &chart_appversion;         A Helm chart for Stratos Metrics
suse/minibroker                 &minibroker_chart;                           A minibroker for your minikube
suse/nginx-ingress              0.28.4          0.15.0          An nginx Ingress controller that uses ConfigMap to store ...
...
</screen>'>

<!--ENTITY chart-version-fields.............................................-->

<!ENTITY chart-version-fields
'<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  There are slight differences in the way &cap; uses some &helm; chart fields
  than what is defined in <link xlink:href="https://helm.sh/docs/topics/charts/"/>.
  Take note of the following fields:
 </para>
 <variablelist xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <varlistentry>
   <term><literal>APP VERSION</literal> (<literal>appVersion</literal> in <filename>Chart.yaml</filename>)</term>
   <listitem>
    <para>
     In &cap;, the <literal>APP VERSION</literal> field indicates the &cap;
     release that a &helm; chart belongs to. This is in contrast to indicating
the version of the application as defined in "The <literal>appVersion</literal>
     Field" section of
     <link xlink:href="https://helm.sh/docs/topics/charts/"/>.
     For example, in the <literal>suse/kubecf</literal> &helm; chart, an
     <literal>APP VERSION</literal> of 2.0.0 is in reference to &cap; release 2.0.0
     and does not indicate <literal>kubecf</literal> is version 2.0.0.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><literal>CHART VERSION</literal> (<literal>version</literal> in <filename>Chart.yaml</filename>)</term>
   <listitem>
    <para>
     In &cap;, the <literal>CHART VERSION</literal> field indicates the &helm;
     chart version, the same as defined in the "Charts and Versioning" section of
     <link xlink:href="https://helm.sh/docs/topics/charts/"/>.
     For &cap; &helm; charts, the chart version is also the release number of the
     coresponding component. For example, in the <literal>suse/kubecf</literal>
     &helm; chart, a <literal>CHART VERSION</literal> of 2.2.2 also indicates
     <literal>kubecf</literal> is release 2.2.2.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>'>

<!--ENTITY chart-version-fields-note........................................-->

<!ENTITY chart-version-fields-note
'<note xmlns="http://docbook.org/ns/docbook">
 <title>Usage of &helm; Chart Fields in &cap;</title>
 &chart-version-fields;
</note>'>

<!--ENTITY stratos-figure...................................................-->

<!ENTITY stratos-figure
'<figure xmlns="http://docbook.org/ns/docbook">
 <title>Stratos UI Cloud Foundry Console</title>
 <mediaobject>
  <imageobject>
   <imagedata fileref="stratos.png" format="PNG" width="75&percnt;"/>
  </imageobject>
 </mediaobject>
</figure>'>

<!--ENTITY stratos-kubernetes-figure........................................-->

<!ENTITY stratos-kubernetes-figure
'<figure xmlns="http://docbook.org/ns/docbook">
 <title>&kube; Environment Information on Stratos</title>
 <mediaobject>
  <imageobject>
   <imagedata fileref="stratos-kubernetes-view.png" format="PNG" width="75&percnt;"/>
  </imageobject>
 </mediaobject>
</figure>'>

<!--ENTITY config-value-usage...............................................-->

<!ENTITY config-value-usage
'<para xmlns="http://docbook.org/ns/docbook">
  Take note of the following &helm; values when defining your
  &values-filename; file.
 </para>
 <variablelist xmlns="http://docbook.org/ns/docbook">
  <varlistentry>
   <term>GARDEN_ROOTFS_DRIVER</term>
   <listitem>
    <para>
     For &susecaaspreg; and other &kube; deployments where the nodes are based
     on &sle;, the <literal>btrfs</literal> file system driver must be used. By
     default, <literal>btrfs</literal> is selected as the default.
    </para>
    <para>
     For &aks;, &eks;, &gke;, and other &kube; deployments where the nodes are
     based on other operating systems, the <literal>overlay-xfs</literal>
     file system driver must be used.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>'>

<!--ENTITY protect-uaa-admin-secret.........................................-->

<!ENTITY protect-uaa-admin-secret
'<important xmlns="http://docbook.org/ns/docbook">
  <title>Protect UAA_ADMIN_CLIENT_SECRET</title>
  <para>
   The UAA_ADMIN_CLIENT_SECRET is the master password for access to your &cap;
   cluster. Make this a very strong password, and protect it just as carefully
   as you would protect any root password.
  </para>
 </important>'>

<!--ENTITY install-helm..............................................-->

<!ENTITY install-helm
'<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Install the &helm; Client</title>
  <para>
   &helm; is a &kube; package manager used to install and manage &productname;.
   This requires installing the &helm; client, <command>helm</command>, on your
   remote management workstation. Examples in this guide are based on &helm; 3.
   For more information regarding &helm;, refer to the documentation at
   <link xlink:href="https://helm.sh/docs/"/>.
  </para>
  <para>
   If your remote management workstation has the &caasp; package repository,
   install <command>helm</command> by running
  </para>
<screen>&prompt.user;sudo zypper install helm</screen>
  <para>
   Otherwise, <command>helm</command> can be installed  by referring to the
   documentation at <link xlink:href="https://helm.sh/docs/intro/install/"/>.
  </para>
</sect1>'>

<!--ENTITY scf-deploy-complete..............................................-->

<!ENTITY scf-deploy-complete
'<para xmlns="http://docbook.org/ns/docbook">
  Wait until you have a successful <literal>scf</literal> deployment before
  going to the next steps, which you can monitor with the
  <command>watch</command> command:
 </para>
<screen xmlns="http://docbook.org/ns/docbook">&prompt.user;watch --color &apos;kubectl get pods --namespace kubecf&apos;</screen>
 <para xmlns="http://docbook.org/ns/docbook">
  When <literal>scf</literal> is successfully deployed, the following is
  observed:
 </para>
 <itemizedlist xmlns="http://docbook.org/ns/docbook">
  <listitem>
   <para>
    <literal>dm-kubecf</literal> and <literal>ig-kubecf</literal> pods
    spawned the final set of pods and disappeared.
   </para>
  </listitem>
  <listitem>
   <para>
    All other pods have a <literal>Running</literal> <literal>STATUS</literal>
    and a <literal>READY</literal> value of <literal>n/n</literal>.
   </para>
  </listitem>
 </itemizedlist>
 <para xmlns="http://docbook.org/ns/docbook">
  Press <keycombo><keycap function="control"/><keycap>C</keycap></keycombo> to
  exit the <command>watch</command> command.
 </para>
'>

<!--ENTITY stratos-deploy-complete..........................................-->

<!ENTITY stratos-deploy-complete
'<para xmlns="http://docbook.org/ns/docbook">
  You can monitor the status of your <literal>stratos</literal> deployment with
  the <command>watch</command> command:
 </para>
<screen xmlns="http://docbook.org/ns/docbook">&prompt.user;watch --color &apos;kubectl get pods --namespace stratos&apos;</screen>
 <para xmlns="http://docbook.org/ns/docbook">
  When <literal>stratos</literal> is successfully deployed, the following is
  observed:
 </para>
 <itemizedlist xmlns="http://docbook.org/ns/docbook">
  <listitem>
   <para>
    For the <literal>volume-migration</literal> pod, the
    <literal>STATUS</literal> is <literal>Completed</literal> and the
    <literal>READY</literal> column is at <literal>0/1</literal>.
   </para>
  </listitem>
  <listitem>
   <para>
    All other pods have a <literal>Running</literal> <literal>STATUS</literal>
    and a <literal>READY</literal> value of <literal>n/n</literal>.
   </para>
  </listitem>
 </itemizedlist>
 <para xmlns="http://docbook.org/ns/docbook">
  Press <keycombo><keycap function="control"/><keycap>C</keycap></keycombo> to
  exit the <command>watch</command> command.
 </para>
'>

<!--ENTITY stack-deprecation-note...........................................-->

<!ENTITY stack-deprecation-note
'<warning xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Deprecation of <literal>cflinuxfs2</literal> and <literal>sle12</literal> Stacks</title>
  <para>
   As of &scf; 2.18.0, since our <literal>cf-deployment</literal> version is 9.5
   , the <literal>cflinuxfs2</literal> stack is no longer supported, as was
   advised in &scf; 2.17.1 or &cap; 1.4.1. The <literal>cflinuxfs2</literal>
   buildpack is no longer shipped, but if you are upgrading from an earlier
   version, <literal>cflinuxfs2</literal> will not be removed. However, for
   migration purposes, we encourage all admins to move to
   <literal>cflinuxfs3</literal> or <literal>sle15</literal> as newer buildpacks
   will not work with the deprecated <literal>cflinuxfs2</literal>. If you still
   want to use the older stack, you will need to build an older version of a
   buildpack to continue for the application to work, but you will be
   unsupported. (If you are running on <literal>sle12</literal>, we will be
   retiring that stack in a future version so start planning your migration to
   <literal>sle15</literal>. The procedure is described below.)
  </para>
  <procedure>
   <step>
    <para>
     Migrate applications to the new stack using one of the methods listed. Note
     that both methods will cause application downtime. Downtime can be avoided
     by following a Blue-Green Deployment strategy. See
     <link xlink:href="https://docs.cloudfoundry.org/devguide/deploy-apps/blue-green.html"/>
     for details.
    </para>
    <para>
     Note that stack association support is available as of &cfcli; v6.39.0.
    </para>
    <itemizedlist>
     <listitem>
      <para>
       Option 1 - Migrating applications using the Stack Auditor plugin.
      </para>
      <para>
       Stack Auditor rebuilds the application onto the new stack without a
       change in the application source code. If you want to move to a new stack
       with updated code, please follow Option 2 below. For additional
       information about the Stack Auditor plugin, see
       <link xlink:href="https://docs.cloudfoundry.org/adminguide/stack-auditor.html"/>.
      </para>
      <procedure>
       <step>
        <para>
         Install the Stack Auditor plugin for the &cfcli;. For instructions, see
         <link xlink:href="https://docs.cloudfoundry.org/adminguide/stack-auditor.html#install"/>.
        </para>
       </step>
       <step>
        <para>
         Identify the stack applications are using. The audit lists all
         applications in orgs you have access to. To list all applications in
         your &cap; deployment, ensure you are logged in as a user with access
         to all orgs.
        </para>
<screen>&prompt.user;cf audit-stack</screen>
        <para>
         For each application requiring migration, perform the steps below.
        </para>
       </step>
       <step>
        <para>
         If necessary, switch to the org and space the application is deployed
         to.
        </para>
<screen>&prompt.user;cf target ORG SPACE</screen>
       </step>
       <step>
        <para>
         Change the stack to <literal>sle15</literal>.
        </para>
<screen>&prompt.user;cf change-stack APP_NAME sle15</screen>
       </step>
       <step>
        <para>
         Identify all buildpacks associated with the <literal>sle12</literal>
         and <literal>cflinuxfs2</literal> stacks.
        </para>
<screen>&prompt.user;cf buildpacks</screen>
       </step>
       <step>
        <para>
         Remove all buildpacks associated with the <literal>sle12</literal>
         and <literal>cflinuxfs2</literal> stacks.
        </para>
<screen>&prompt.user;cf delete-buildpack BUILDPACK -s sle12

&prompt.user;cf delete-buildpack BUILDPACK -s cflinuxfs2</screen>
       </step>
       <step>
        <para>
         Remove the <literal>sle12</literal> and <literal>cflinuxfs2</literal>
         stacks.
        </para>
<screen>&prompt.user;cf delete-stack sle12

&prompt.user;cf delete-stack cflinuxfs2</screen>
       </step>
      </procedure>
     </listitem>
     <listitem>
      <para>
       Option 2 - Migrating applications using the &cfcli;.
      </para>
      <para>
       Perform the following for all orgs and spaces in your &cap; deployment.
       Ensure you are logged in as a user with access to all orgs.
      </para>
      <procedure>
       <step>
        <para>
         Target an org and space.
        </para>
<screen>&prompt.user;cf target ORG SPACE</screen>
       </step>
       <step>
        <para>
         Identify the stack an applications in the org and space is using.
        </para>
<screen>&prompt.user;cf app APP_NAME</screen>
       </step>
       <step>
        <para>
         Re-push the app with the <literal>sle15</literal> stack using one of
         the following methods.
        </para>
        <itemizedlist>
         <listitem>
          <para>
           Push the application with the stack option, <command>-s</command>
           passed.
          </para>
<screen>&prompt.user;cf push APP_NAME -s sle15</screen>
         </listitem>
         <listitem>
          <procedure>
           <step>
            <para>
             Update the application manifest file to include
             <literal>stack: sle15</literal>. See
             <link xlink:href="https://docs.cloudfoundry.org/devguide/deploy-apps/manifest-attributes.html#stack"/>
             for details.
            </para>
<screen>---
  ...
  stack: sle15
</screen>
           </step>
           <step>
            <para>
              Push the application.
            </para>
<screen>&prompt.user;cf push APP_NAME</screen>
           </step>
          </procedure>
         </listitem>
        </itemizedlist>
       </step>
       <step>
        <para>
         Identify all buildpacks associated with the <literal>sle12</literal>
         and <literal>cflinuxfs2</literal> stacks.
        </para>
<screen>&prompt.user;cf buildpacks</screen>
       </step>
       <step>
        <para>
         Remove all buildpacks associated with the <literal>sle12</literal>
         and <literal>cflinuxfs2</literal> stacks.
        </para>
<screen>&prompt.user;cf delete-buildpack BUILDPACK -s sle12

&prompt.user;cf delete-buildpack BUILDPACK -s cflinuxfs2</screen>
       </step>
       <step>
        <para>
         Remove the <literal>sle12</literal> and <literal>cflinuxfs2</literal>
         stacks using the CF API. See
         <link xlink:href="https://apidocs.cloudfoundry.org/7.11.0/#stacks"/>
         for details.
        </para>
        <para>
         List all stacks then find the GUID of the <literal>sle12</literal>
         <literal>cflinuxfs2</literal> stacks.
        </para>
<screen>&prompt.user;cf curl /v2/stacks</screen>
        <para>
         Delete the <literal>sle12</literal> and <literal>cflinuxfs2</literal>
         stacks.
        </para>
<screen>&prompt.user;cf curl -X DELETE /v2/stacks/SLE12_STACK_GUID

&prompt.user;cf curl -X DELETE /v2/stacks/CFLINUXFS2_STACK_GUID
</screen>
       </step>
      </procedure>
     </listitem>
    </itemizedlist>
   </step>
  </procedure>
 </warning>
'>

<!--ENTITY deployment-platforms.............................................-->

<!ENTITY deployment-platforms
'<itemizedlist xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <listitem>
   <para>
    For &susecaaspreg;, see <xref linkend="cha-cap-depl-caasp"/>.
   </para>
  </listitem>
  <listitem>
   <para>
    For &aks-full;, see <xref linkend="cha-cap-depl-aks"/>.
   </para>
  </listitem>
  <listitem>
   <para>
    For &eks-full;, see <xref linkend="cha-cap-depl-eks"/>.
   </para>
  </listitem>
  <listitem>
   <para>
    For &gke-full;, see <xref linkend="cha-cap-depl-gke"/>.
   </para>
  </listitem>
 </itemizedlist>'>

<!--ENTITY resize-persistent-volume.........................................-->

<!ENTITY resize-persistent-volume
'<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Resizing Persistent Volumes</title>
  <para>
   Depending on your workloads, the default persistent volume (PV) sizes of your
   &cap; deployment may be insufficient. This section describes the process to
   resize a persistent volume in your &cap; deployment, by modifying the
   persistent volumes claim (PVC) object.
  </para>
  <para>
   Note that PVs can only be expanded, but cannot be shrunk.
   shrunk.
  </para>
  <sect2>
   <title>Prerequisites</title>
   <para>
    The following are required in order to use the process below to resize a PV.
   </para>
   <itemizedlist>
    <listitem>
     <para>
      &kube; 1.11 or newer.
     </para>
    </listitem>
    <listitem>
     <para>
      The volume being expanded is among the list of supported volume types.
      Refer to the list at
      <link xlink:href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#expanding-persistent-volumes-claims"/>
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
  <sect2>
   <title>Example Procedure</title>
   <para>
    The following describes the process required to resize a PV, using the PV and PVC associated with <literal>uaa</literal>&apos;s
    <literal>mysql</literal> as an example.
   </para>
   <procedure>
    <step>
     <para>
      Find the storage class and PVC associated with the PV being expanded. In This example, the storage class is called <literal>persistent</literal> and the PVC is called <literal>mysql-data-mysql-0</literal>.
     </para>
<screen>&prompt.user;kubectl get persistentvolume</screen>
    </step>
    <step>
     <para>
      Verify whether the storage class has
      <literal>allowVolumeExpansion</literal> set to <literal>true</literal>.
      If it does not, run the following command to update the storage class.
     </para>
<screen>&prompt.user;kubectl get storageclass <replaceable>persistent</replaceable> --output json</screen>
     <para>
      If it does not, run the below command to update the storage class.
     </para>
<screen>&prompt.user;kubectl patch storageclass <replaceable>persistent</replaceable> \
--patch &apos;{"allowVolumeExpansion": true}&apos;
</screen>
    </step>
    <step>
     <para>
      Cordon all nodes in your cluster.
     </para>
     <substeps>
      <step>
<screen>&prompt.user;export VM_NODES=$(kubectl get nodes -o name)</screen>
      </step>
      <step>
<screen>&prompt.user;for i in $VM_NODES
 do
  kubectl cordon `echo "${i//node\/}"`
done
</screen>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      Increase the storage size of the PVC object associated with the PV being
      expanded.
     </para>
<screen>&prompt.user;kubectl patch persistentvolumeclaim --namespace <replaceable>uaa</replaceable> <replaceable>mysql-data-mysql-0</replaceable> \
--patch &apos;{"spec": {"resources": {"requests": {"storage": "25Gi"}}}}&apos;
</screen>
    </step>
    <step>
     <para>
      List all pods that use the PVC, in any namespace.
     </para>
<screen>&prompt.user;kubectl get pods --all-namespaces --output=json | jq -c &apos;.items[] | {name: .metadata.name, namespace: .metadata.namespace, claimName: .spec |  select( has ("volumes") ).volumes[] | select( has ("persistentVolumeClaim") ).persistentVolumeClaim.claimName }&apos;
</screen>
    </step>
    <step>
     <para>
      Restart all pods that use the PVC.
     </para>
<screen>&prompt.user;kubectl delete pod <replaceable>mysql-0</replaceable> --namespace <replaceable>uaa</replaceable>
</screen>
    </step>
    <step>
     <para>
      Run <command>kubectl describe persistentvolumeclaim</command> and monitor the <literal>status.conditions</literal> field.
     </para>
<screen>&prompt.user;watch &apos;kubectl get persistentvolumeclaim --namespace <replaceable>uaa</replaceable> <replaceable>mysql-data-mysql-0</replaceable> --output json&apos;
</screen>
     <para>
      When the following is observed, press
      <keycombo><keycap function="control"/><keycap>C</keycap></keycombo> to
      exit the <command>watch</command> command and proceed to the next step.
     </para>
     <itemizedlist>
      <listitem>
       <para>
        <literal>status.conditions.message</literal> is
       </para>
<screen>message: Waiting for user to (re-)start a pod to finish file system resize of volume on node.</screen>
      </listitem>
      <listitem>
       <para>
         <literal>status.conditions.type</literal> is
       </para>
<screen>type: FileSystemResizePending</screen>
      </listitem>
     </itemizedlist>
    </step>
    <step>
     <para>
      Uncordon all nodes in your cluster.
     </para>
<screen>&prompt.user;for i in $VM_NODES
 do
  kubectl uncordon `echo "${i//node\/}"`
done
</screen>
    </step>
    <step>
     <para>
      Wait for the resize to finish. Verify the storage size values match for
      <literal>status.capacity.storage</literal> and
      <literal>spec.resources.requests.storage</literal>.
     </para>
<screen>&prompt.user;watch &apos;kubectl get persistentvolumeclaim --namespace <replaceable>uaa</replaceable> <replaceable>mysql-data-mysql-0</replaceable> --output json&apos;
</screen>
    </step>
    <step>
     <para>
      Also verify the storage size in the pod itself is updated.
     </para>
<screen>&prompt.user;kubectl --namespace <replaceable>uaa</replaceable> exec <replaceable>mysql-0</replaceable> -- df --human-readable</screen>
    </step>
   </procedure>
  </sect2>
 </sect1>'>

<!--ENTITY watch-scf............................................-->

<!ENTITY watch-scf
'<screen xmlns="http://docbook.org/ns/docbook">&prompt.user;watch --color &apos;kubectl get pods --namespace kubecf&apos;
</screen>'>

<!--ENTITY min-deploy-note..................................................-->

<!ENTITY min-deploy-note
'<important xmlns="http://docbook.org/ns/docbook">
  <para>
   The prerequisites and configurations described is this chapter only reflect
   the requirements for a minimal &productname; deployment. For a more
   production-ready environment, consider incoporating some of following optional
   features in this chapter and the &admin; at <xref linkend="part-cap-administration"/>
  </para>
 </important>'>

<!--ENTITY log-types-and-fetch..............................................-->

<!ENTITY log-types-and-fetch
'<itemizedlist xmlns="http://docbook.org/ns/docbook">
  <listitem>
   <para>
    Application logs provide information specific to a given application that
    has been deployed to your &cap; cluster and can be accessed through:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      The &cfcli; using the <command>cf logs</command> command
     </para>
    </listitem>
    <listitem>
     <para>
      The application&apos;s log stream within the Stratos console
     </para>
    </listitem>
   </itemizedlist>
  </listitem>
  <listitem>
   <para>
    Access to logs for a given component of your &cap; deployment can be
    obtained by:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      The <command>kubectl logs</command> command
     </para>
     <para>
      The following example retrieves the logs of the <literal>router</literal>
      container of <literal>router-0</literal> pod in the <literal>scf</literal>
      namespace
     </para>
<screen>&prompt.user;kubectl logs --namespace kubecf <replaceable>router-0</replaceable> <replaceable>router</replaceable></screen>
    </listitem>
    <listitem>
     <para>
      Direct access to the log files using the following:
     </para>
     <orderedlist>
      <listitem>
       <para>
        Open a shell to the container of the component using the
        <command>kubectl exec</command> command
       </para>
      </listitem>
      <listitem>
       <para>
        Navigate to the logs directory at
        <filename>/var/vcap/sys/logs</filename>, at which point there will be
        subdirectories containing the log files for access.
       </para>
<screen>&prompt.user;kubectl exec --stdin --tty --namespace kubecf router-0 /bin/bash

router/0:/# cd /var/vcap/sys/log

router/0:/var/vcap/sys/log# ls -R
.:
gorouter  loggregator_agent

./gorouter:
access.log  gorouter.err.log  gorouter.log  post-start.err.log  post-start.log

./loggregator_agent:
agent.log</screen>
      </listitem>
     </orderedlist>
    </listitem>
   </itemizedlist>
  </listitem>
 </itemizedlist>'>

<!--ENTITY stratos-tech-preview-note........................................-->

<!ENTITY stratos-tech-preview-note
'<note xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Technology Preview Features</title>
 <para>
  Some Stratos releases may include features as part of a technology preview.
  Technology preview features are for evaluation purposes only and
  <emphasis role="bold">not</emphasis> supported for production use. To see the
  technology preview features available for a given release, refer to
  <link xlink:href="https://github.com/SUSE/stratos/blob/master/CHANGELOG.md"/>.
 </para>
 <para>
  To enable technology preview features, set the
  <literal>console.techPreview</literal> &helm; value to <literal>true</literal>
  . For example, when running <command>helm install</command> add
  <command>--set console.techPreview=true</command>.
 </para>
</note>'>

<!--ENTITY storage-class.....................................................-->

<!ENTITY storage-class
'<title xmlns="http://docbook.org/ns/docbook">
  Storage Class
 </title>
 <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  In &productname; some instance groups, such as <literal>bits</literal>,
  <literal>database</literal> and <literal>singleton-blobstore</literal>
  require a storage class. To learn more about storage classes, see
  <link xlink:href="https://kubernetes.io/docs/concepts/storage/storage-classes/"/>. 
 </para>
 <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  By default, &productname; will use the cluster&apos;s default storage class. 
  To designate or change the default storage class, refer to
  <link xlink:href="https://kubernetes.io/docs/tasks/administer-cluster/change-default-storage-class/"/>
 </para>
 <para xmlns="http://docbook.org/ns/docbook">
  A storage class can be chosen by setting the
  <literal>kube.storage_class</literal> value in your &values-filename;
  configuration file as seen in this example. Note that if there is no storage
  class designated as the default this value
  <emphasis role="bold">must</emphasis> be set.
 </para>
<screen xmlns="http://docbook.org/ns/docbook">kube:
  storage_class: <replaceable>my-storage-class</replaceable>
</screen>'>

<!--ENTITY certificates......................................................-->

<!ENTITY certificates
'<title xmlns="http://docbook.org/ns/docbook">
  Certificates
 </title>
 <para xmlns="http://docbook.org/ns/docbook">
  This section describes the process to secure traffic passing through your
  &productname; deployment. This is achieved by using certificates to set up
  Transport Layer Security (TLS) for the router component.
 </para>
 <sect2 xmlns="http://docbook.org/ns/docbook">
  <title>Certificate Characteristics</title>
  <para>
   Ensure the certificates you use have the following characteristics:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     The certificate is encoded in the PEM format.
    </para>
   </listitem>
   <listitem>
    <para>
     The certificate is signed by an external Certificate Authority (CA).
    </para>
   </listitem>
   <listitem>
    <para>
     The certificate&apos;s Subject Alternative Name (SAN) include the domain
     <replaceable>*.example.com</replaceable>, where <replaceable>example.com</replaceable>
     is replaced with the <literal>system_domain</literal> in your
     <filename>&values-file;</filename>.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>
 <sect2 xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Deployment Configuration</title>
  <para>
   The certificate used to secure your deployment is passed through the
   <filename>&values-file;</filename> configuration file. To specify
   a certificate, set the value of the certificate and its corresponding private
   key using the <literal>router.tls.crt</literal> and
   <literal>router.tls.key</literal> &helm; values in the
   <literal>settings:</literal> section.
  </para>
  <note>
   <para>
    Note the use of the "|" character which indicates the use of a literal
    scalar. See the
    <link xlink:href="http://yaml.org/spec/1.2/spec.html#id2795688"/> for more information.
   </para>
  </note>
<screen>settings:
  router:
    tls:
      crt: |
        -----BEGIN CERTIFICATE-----
        MIIEEjCCAfoCCQCWC4NErLzy3jANBgkqhkiG9w0BAQsFADBGMQswCQYDVQQGEwJD
        QTETMBEGA1UECAwKU29tZS1TdGF0ZTEOMAwGA1UECgwFTXlPcmcxEjAQBgNVBAMM
        CU15Q0Euc2l0ZTAeFw0xODA5MDYxNzA1MTRaFw0yMDAxMTkxNzA1MTRaMFAxCzAJ
        ...
        xtNNDwl2rnA+U0Q48uZIPSy6UzSmiNaP3PDR+cOak/mV8s1/7oUXM5ivqkz8pEJo
        M3KrIxZ7+MbdTvDOh8lQplvFTeGgjmUDd587Gs4JsormqOsGwKd1BLzQbGELryV9
        1usMOVbUuL8mSKVvgqhbz7vJlW1+zwmrpMV3qgTMoHoJWGx2n5g=
        -----END CERTIFICATE-----
      key: |
        -----BEGIN RSA PRIVATE KEY-----
        MIIEpAIBAAKCAQEAm4JMchGSqbZuqc4LdryJpX2HnarWPOW0hUkm60DL53f6ehPK
        T5Dtb2s+CoDX9A0iTjGZWRD7WwjpiiuXUcyszm8y9bJjP3sIcTnHWSgL/6Bb3KN5
        G5D8GHz7eMYkZBviFvygCqEs1hmfGCVNtgiTbAwgBTNsrmyx2NygnF5uy4KlkgwI
        ...
        GORpbQKBgQDB1/nLPjKxBqJmZ/JymBl6iBnhIgVkuUMuvmqES2nqqMI+r60EAKpX
        M5CD+pq71TuBtbo9hbjy5Buh0+QSIbJaNIOdJxU7idEf200+4anzdaipyCWXdZU+
        MPdJf40awgSWpGdiSv6hoj0AOm+lf4AsH6yAqw/eIHXNzhWLRvnqgA==
        -----END RSA PRIVATE KEY----
</screen>
 </sect2>'>

<!--ENTITY ingress-controller................................................-->

<!ENTITY ingress-controller
'<title xmlns="http://docbook.org/ns/docbook">
  Using an Ingress Controller
 </title>
 <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  By default, a &productname; cluster is exposed through its &kube; services.
  This section describes how to use an ingress (see <link xlink:href="https://kubernetes.io/docs/concepts/services-networking/ingress/"/>)
  to expose your cluster instead.
 </para>
 <para xmlns="http://docbook.org/ns/docbook">
  Note that only the NGINX Ingress Controller has been verified to be
  compatible with &cap;. Other Ingress controller alternatives may work, but
  compatibility with &cap; is not supported.
 </para>
 <sect2 xmlns="http://docbook.org/ns/docbook">
  <title>Install and Configure the NGINX Ingress Controller</title>
  <procedure>
   <step>
    <para>
     Create a configuration file with the below. The file is called
     <filename>nginx-ingress.yaml</filename> in this example.
    </para>
<screen>tcp:
  2222: "kubecf/scheduler:2222"
  20000: "kubecf/tcp-router:20000"
  20001: "kubecf/tcp-router:20001"
  20002: "kubecf/tcp-router:20002"
  20003: "kubecf/tcp-router:20003"
  20004: "kubecf/tcp-router:20004"
  20005: "kubecf/tcp-router:20005"
  20006: "kubecf/tcp-router:20006"
  20007: "kubecf/tcp-router:20007"
  20008: "kubecf/tcp-router:20008"
</screen>
   </step>
   <step>
    <para>
     Create the namespace.
    </para>
<screen>&prompt.user;kubectl create namespace <replaceable>nginx-ingress</replaceable></screen>
   </step>
   <step>
    <para>
     Install the NGINX Ingress Controller.
    </para>
<screen>&prompt.user;helm install <replaceable>nginx-ingress</replaceable> suse/nginx-ingress \
--namespace <replaceable>nginx-ingress</replaceable> \
--values <replaceable>nginx-ingress.yaml</replaceable>
</screen>
   </step>
   <step>
    <para>
     Monitor the progess of the deployment:
    </para>
<screen>&prompt.user;watch --color &apos;kubectl get pods --namespace <replaceable>nginx-ingress</replaceable>&apos;</screen>
   </step>
   <step>
    <para>
     After the deployment completes, the Ingress controller service will be deployed
     with either an external IP or a hostname. 
    </para>
    <para>
     Find the external IP or hostname.
    </para>
<screen>&prompt.user;kubectl get services nginx-ingress-controller --namespace ingress</screen>
    <para>
     You will get output similar to the following.
    </para>
<screen>NAME                       TYPE           CLUSTER-IP     EXTERNAL-IP      PORT(S)
nginx-ingress-controller   LoadBalancer   <replaceable>10.63.248.70</replaceable>   <replaceable>35.233.191.177</replaceable>   80:30344/TCP,443:31386/TCP
</screen>
   </step>
   <step>
    <para>
     Set up DNS records corresponding to the controller service IP or hostname
     and map it to the <literal>system_domain</literal> defined in your
     &values-filename;.
    </para>
  </step>
   <step>
    <para>
     Obtain a PEM formatted certificate that is associated with the
     <literal>system_domain</literal> defined in your &values-filename;
    </para>
   </step>
   <step>
    <para>
     In your &values-filename; configuration file, enable the ingress feature and
     set the <literal>tls.crt</literal> and <literal>tls.key</literal> for the
     certificate from the previous step.
    </para>
<screen>features:
  ingress:
    enabled: true
    tls:
      crt: |
        -----BEGIN CERTIFICATE-----
        MIIE8jCCAtqgAwIBAgIUT/Yu/Sv8AUl5zHXXEKCy5RKJqmYwDQYJKoZIhvcMOQMM
        [...]
        xC8x/+zB7XlvcRJRio6kk670+25ABP==
        -----END CERTIFICATE-----
      key: |
        -----BEGIN RSA PRIVATE KEY-----
        MIIE8jCCAtqgAwIBAgIUSI02lj2b2ImLy/zMrjNgW5d8EygwQSVJKoZIhvcYEGAW
        [...]
        to2WV7rPMb9W9fd2vVUXKKHTc+PiNg==
        -----END RSA PRIVATE KEY-----
</screen>
   </step>
  </procedure>
 </sect2>'>

<!--ENTITY high-availability.................................................-->

<!ENTITY high-availability
'<title xmlns="http://docbook.org/ns/docbook">
  &ha;
 </title>
 <sect2 xmlns="http://docbook.org/ns/docbook">
  <title>Configuring &cap; for &ha;</title>
  <para>
   There are two ways to make your &productname; deployment highly available.
   The first method is to set the <literal>high_availability</literal> parameter
   in your deployment configuration file to <literal>true</literal>. The second
   method is to create custom configuration files with your own sizing values.
  </para>
  <sect3>
   <title>Finding Default and Allowable Sizing Values</title>
   <para>
    The <literal>sizing:</literal> section in the &helm;
    <filename>values.yaml</filename> files for the <literal>scf</literal> chart
    describes which roles can be scaled, and the scaling options for each role.
    You may use <command>helm inspect</command> to read the
    <literal>sizing:</literal> section in the &helm; chart:
   </para>
<screen>&prompt.user;helm inspect suse/kubecf | less +/sizing:</screen>
   <para>
    Another way is to use Perl to extract the information for each role from
    the <literal>sizing:</literal> section.
   </para>
<screen>
&prompt.user;helm inspect values suse/kubecf | \
perl -ne &apos;/^sizing/..0 and do { print $.,":",$_ if /^ [a-z]/ || /high avail|scale|count/ }&apos;

<!-- TODO-CAP2 replace example -->
</screen>
   <para>
    The default <filename>values.yaml</filename> files are also included in
    this guide at <xref linkend="app-kubecf-values-yaml"/>.
   </para>
  </sect3>
  <sect3>
   <title>Using the <literal>high_availability</literal> &helm; Property</title>
   <para>
    One way to make your &productname; deployment highly available is
    to use the <literal>high_availability</literal> &helm; property. In your
    <filename>&values-file;</filename>, set this property to
    <literal>true</literal>. This changes the size of all roles to the minimum
    required for a highly available deployment. Your configuration file,
    <filename>&values-file;</filename>, should include the following.
   </para>
<screen>high_availability: true</screen>
   &sizing-priority;
  </sect3>
  <sect3>
   <title>Using Custom Sizing Configurations</title>
   <para>
    Another method to make your &productname; deployment highly available is           
    to explicitly configure the instance count of an instance group.
   </para>

   &sizing-priority;

   <para>
    To see the full list of configurable instance groups, refer to default
    &kubecf; <filename>values.yaml</filename> file in the appendix at
    <xref linkend="app-kubecf-values-yaml"/>.
   </para>

   <para>
    The following is an of a example &ha; configuration. The example values are not meant to be
    copied, as these depend on your particular deployment and requirements.
   </para>
<screen>sizing:
  adapter:
    instances: 2
  api:
    instances: 2
  asactors:
    instances: 2
  asapi:
    instances: 2
  asmetrics:
    instances: 2
  asnozzle:
    instances: 2
  auctioneer:
    instances: 2
  bits:
    instances: 2
  cc_worker:
    instances: 2
  credhub:
    instances: 2
  database:
    instances: 2
  diego_api:
    instances: 2
  diego_cell:
    instances: 2
  doppler:
    instances: 2
  eirini:
    instances: 3
  log_api:
    instances: 2
  nats:
    instances: 2
  router:
    instances: 2
  routing_api:
    instances: 2
  scheduler:
    instances: 2
  uaa:
    instances: 2
  tcp_router:
    instances: 2
</screen>
  </sect3>
 </sect2>'>

<!--ENTITY external-blobstore...............................................-->

<!ENTITY external-blobstore
'<title xmlns="http://docbook.org/ns/docbook">
  External Blobstore
 </title>
 <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  &cf; Application Runtime (CFAR) uses a blobstore (see
  <link xlink:href="https://docs.cloudfoundry.org/concepts/cc-blobstore.html"/>)
  to store the source code that developers push, stage, and run. This  section
  explains how to configure an external blobstore for the Cloud Controller
  component of your &productname; deployment.
 </para>
 <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  &productname; relies on <filename>ops files</filename> (see
  <link xlink:href="https://github.com/cloudfoundry/cf-deployment/blob/master/operations/README.md"/>)
  provided by cf-deployment (see <link xlink:href="https://github.com/cloudfoundry/cf-deployment"/>)
  releases for external blobstore configurations. The default configuration for
  the blobstore is <literal>singleton</literal>.
 </para>
 <sect2 xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Configuration</title>
  <para>
   Currently &productname; supports Amazon Simple Storage Service (Amazon S3,
   see <link xlink:href="https://aws.amazon.com/s3/"/>) as an external blobstore
   . In order to configure Amazon S3 as an external blobstore, set the following
   in your <filename>&values-file;</filename> file and replace the
   example values.
  </para>
<screen>features:
  blobstore:
    provider: s3
    s3:
      aws_region: <replaceable>"us-east-1"</replaceable>
      blobstore_access_key_id:  <replaceable>AWS-ACCESS-KEY-ID</replaceable>
      blobstore_secret_access_key: <replaceable>AWS-SECRET-ACCESS-KEY></replaceable>
      # User provided value for the blobstore admin password.
      blobstore_admin_users_password: <replaceable>PASSWORD</replaceable>
      # The following values are used as S3 bucket names. The buckets are automatically created if not present.
      app_package_directory_key: <replaceable>APP-BUCKET-NAME</replaceable>
      buildpack_directory_key: <replaceable>BUILDPACK-BUCKET-NAME</replaceable>
      droplet_directory_key: <replaceable>DROPLET-BUCKET-NAME</replaceable>
      resource_directory_key: <replaceable>RESOURCE-BUCKET-NAME</replaceable>
</screen>
  <warning>
   <title><literal>us-east-1</literal> as Only Valid Region</title>
   <para>
    Currently, there is a limitation where only <literal>us-east-1</literal> can
    be chosen as the <literal>aws_region</literal>. For more information about
    this issue, see
    <link xlink:href="https://github.com/cloudfoundry-incubator/kubecf/issues/656"/>.
   </para>
  </warning>
  <para>
   Ensure the supplied AWS credentials have appropriate permissions as described
   at <link xlink:href="https://docs.cloudfoundry.org/deploying/common/cc-blobstore-config.html#fog-aws-iam"/>.
  </para>
 </sect2>'>

<!--ENTITY external-database................................................-->

<!ENTITY external-database
'<title xmlns="http://docbook.org/ns/docbook">
  External Database
 </title>
 <para xmlns="http://docbook.org/ns/docbook">
  By default, &productname; includes a single-availability database provided by
  the <literal>cf-mysql-release</literal>. &productname; can be configured to
  use an external database system, such as a data service offered by a cloud
  service provider or an existing high availability database server.
 </para>
 <para xmlns="http://docbook.org/ns/docbook">
  To configure your deployment to use an external database, please contact
  &suse; support or services for guidance.
 </para>
<!--
 <para xmlns="http://docbook.org/ns/docbook">
  The current &productname; release is compatible with the following types of
  external databases:
 </para>
 <itemizedlist xmlns="http://docbook.org/ns/docbook">
  <listitem>
   <para>
    &mysql;
   </para>
  </listitem>
  <listitem>
   <para>
    &postgresql;
   </para>
  </listitem>
 </itemizedlist>
 <sect2 xmlns="http://docbook.org/ns/docbook">
  <title>Configuration</title>
  <para>
   This section describes how to enable and configure your deployment to connect
   to an external database. The configuration options are specified through
   &helm; values inside the <filename>&values-file;</filename>. The
   deployment and configuration of the external database itself is the
   responsibility of the operator and beyond the scope of this documentation. It
   is assumed the external database has been deployed and accessible.
  </para>
  <important>
   <title>Configuration during Initial Install Only</title>
   <para>
    Configuration of &productname; to use an external database
    <emphasis role="bold">must</emphasis> be done during the initial
    installation and cannot be changed afterwards.
   </para>
  </important>
  <para>
   The following snippet of the <filename>&values-file;</filename>
   contains an example of an external database configuration.
  </para>
<screen>features:
  embedded_database:
    enabled: false
  external_database:
    enabled: true
    require_ssl: false
    ca_cert: ~
    type: ~
    host: ~
    port: ~
    databases:
      uaa:
        name: uaa
        password: <replaceable>root</replaceable>
        username: <replaceable>root</replaceable>
      cc:
        name: cloud_controller
        password: <replaceable>root</replaceable>
        username: <replaceable>root</replaceable>
      bbs:
        name: diego
        password: <replaceable>root</replaceable>
        username: <replaceable>root</replaceable>
      routing_api:
        name: routing-api
        password: <replaceable>root</replaceable>
        username: <replaceable>root</replaceable>
      policy_server:
        name: network_policy
        password: <replaceable>root</replaceable>
        username: <replaceable>root</replaceable>
      silk_controller:
        name: network_connectivity
        password: <replaceable>root</replaceable>
        username: <replaceable>root</replaceable>
      locket: 
        name: locket
        password: <replaceable>root</replaceable>
        username: <replaceable>root</replaceable>
      credhub:        
        name: credhub
        password: <replaceable>root</replaceable>
        username: <replaceable>root</replaceable>
</screen>
 </sect2>-->'>

<!--ENTITY ldap..............................................................-->

<!ENTITY ldap
'<title xmlns="http://docbook.org/ns/docbook">
  LDAP Integration
 </title>
 <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  &productname; can be integrated with
  <link xlink:href="https://docs.cloudfoundry.org/uaa/identity-providers.html">identity
  providers</link> to help manage authentication of users. The Lightweight
  Directory Access Protocol (LDAP) is an example of an identity provider that
  &cap; integrates with. This section describes the necessary components and
  steps in order to configure the integration. See
  <link xlink:href="https://docs.cloudfoundry.org/uaa/uaa-user-management.html">User
  Account and Authentication LDAP Integration</link> for more information.
 </para>
 <sect2 xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Prerequisites</title>
  <para>
   The following prerequisites are required in order to complete an LDAP
   integration with &productname;.
  </para>
  <itemizedlist>
   <!-- listitem Links to CF CLI -->
   &cfcli-prereq;
   <!-- listitem Links to UAAC and describes install -->
   &uaac-prereq;
   <listitem>
    <para>
     An LDAP server and the credentials for a user/service account with
     permissions to search the directory.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>
 <sect2 xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Example LDAP Integration</title>
  <para>
   Run the following commands to complete the integration of your &cap;
   deployment and LDAP server.
  </para>
  <procedure>
   &uaac-target;
   &uaac-authenticate;
   <step>
    <para>
     Create the LDAP identity provider. A 201 response will be returned when
     the identity provider is successfully created. See the
     <link xlink:href="http://docs.cloudfoundry.org/api/uaa/version/4.21.0/index.html#ldap">UAA
     API Reference</link> and
     <link xlink:href="https://github.com/cloudfoundry/uaa/blob/4.21.0/docs/UAA-LDAP.md">&cf;
     UAA-LDAP Documentation</link>for information regarding the request
     parameters and additional options available to configure your identity
     provider.
    </para>
    <para>
     The following is an example of a <literal>uaac curl</literal> command and
     its request parameters used to create an identity provider. Specify the
     parameters according to your LDAP server&apos;s credentials and directory
     structure. Ensure the user specifed in the <literal>bindUserDn</literal>
     has permissions to search the directory.
    </para>
<screen>&prompt.user;uaac curl /identity-providers?rawConfig=true \
    --request POST \
    --insecure \
    --header &apos;Content-Type: application/json&apos; \
    --header &apos;X-Identity-Zone-Subdomain: <replaceable>uaa</replaceable>&apos; \
    --data &apos;{
  "type" : "ldap",
  "config" : {
    "ldapProfileFile" : "ldap/ldap-search-and-bind.xml",
    "baseUrl" : "<replaceable>ldap://ldap.example.com:389</replaceable>",
    "bindUserDn" : "<replaceable>cn=admin,dc=example,dc=com</replaceable>",
    "bindPassword" : "<replaceable>password</replaceable>",
    "userSearchBase" : "<replaceable>dc=example,dc=com</replaceable>",
    "userSearchFilter" : "<replaceable>uid</replaceable>={0}",
    "ldapGroupFile" : "ldap/ldap-groups-map-to-scopes.xml",
    "groupSearchBase" : "<replaceable>dc=example,dc=com</replaceable>",
    "groupSearchFilter" : "<replaceable>member</replaceable>={0}"
  },
  "originKey" : "ldap",
  "name" : "<replaceable>My LDAP Server</replaceable>",
  "active" : true
  }&apos;
</screen>
   </step>
   <step>
    <para>
     Verify the LDAP identify provider has been created in the
     <replaceable>scf</replaceable> zone. The output should now contain an entry for
     the <literal>ldap</literal> type.
    </para>
<screen>&prompt.user;uaac curl /identity-providers --insecure --header "X-Identity-Zone-Id: <replaceable>uaa</replaceable>"</screen>
   </step>
   <step>
    <para>
     Use the &cfcli; to target your &productname; deployment.
    </para>
<screen>&prompt.user;cf api --skip-ssl-validation https://api.example.com</screen>
   </step>
   <step>
    <para>
     Log in as an administrator.
    </para>
<screen>&prompt.user;cf login
API endpoint: https://api.example.com

Email> admin

Password>
Authenticating...
OK
</screen>
   </step>
   <step>
    <para>
     Create users associated with your LDAP identity provider.
    </para>
<screen>&prompt.user;cf create-user <replaceable>username</replaceable> --origin ldap
Creating user username...
OK

TIP: Assign roles with &apos;cf set-org-role&apos; and &apos;cf set-space-role&apos;.
</screen>
   </step>
   <step>
    <para>
     Assign the user a role. Roles define the permissions a user has for a
     given org or space and a user can be assigned multiple roles. See
     <link xlink:href="https://docs.cloudfoundry.org/concepts/roles.html">Orgs,
     Spaces, Roles, and Permissions</link> for available roles and their
     corresponding permissions. The following example assumes that an org named
     <replaceable>Org</replaceable> and a space named
     <replaceable>Space</replaceable> have already been created.
    </para>
<screen>&prompt.user;cf set-space-role <replaceable>username</replaceable> <replaceable>Org</replaceable> <replaceable>Space</replaceable> <replaceable>SpaceDeveloper</replaceable>
Assigning role RoleSpaceDeveloper to user username in org Org / space Space as admin...
OK
&prompt.user;cf set-org-role <replaceable>username</replaceable> Org OrgManager
Assigning role OrgManager to user username in org Org as admin...
OK
</screen>
   </step>
   <step>
    <para>
     Verify the user can log into your &productname; deployment using their
     associated LDAP server credentials.
    </para>
<screen>&prompt.user;cf login
API endpoint: https://api.example.com

Email> username

Password>
Authenticating...
OK



API endpoint:   https://api.example.com (API version: 2.115.0)
User:           username@ldap.example.com
</screen>
   </step>
  </procedure>
  <para>
   If the LDAP identity provider is no longer needed, it can be removed with the following
   steps.
  </para>
  <procedure>
   <step>
    <para>
     Obtain the ID of your identity provider.
    </para>
<screen>&prompt.user;uaac curl /identity-providers \
    --insecure \
    --header "Content-Type:application/json" \
    --header "Accept:application/json" \
    --header"X-Identity-Zone-Id:<replaceable>uaa</replaceable>"</screen>
   </step>
   <step>
    <para>
     Delete the identity provider.
    </para>
<screen>&prompt.user;uaac curl /identity-providers/<replaceable>IDENTITY_PROVIDER_ID</replaceable> \
    --request DELETE \
    --insecure \
    --header "X-Identity-Zone-Id:<replaceable>uaa</replaceable>"</screen>
   </step>
  </procedure>
 </sect2>'>

<!--ENTITY deploy-operator...................................................-->

<!ENTITY deploy-operator
'<title xmlns="http://docbook.org/ns/docbook">
  Deploy the Operator
 </title>
 <procedure xmlns="http://docbook.org/ns/docbook">
  <step>
   <para>
    First, create the namespace for the operator.
   </para>
<screen>&prompt.user;kubectl create namespace <replaceable>cf-operator</replaceable></screen>
  </step>
  <step>
   <para>
    Install the operator.
   </para>
   <para>
    The value of <literal>global.operator.watchNamespace</literal> indicates the
    namespace the operator will monitor for a &kubecf; deployment. This
    namespace should be separate from the namespace used by the operator. In
    this example, this means &kubecf; will be deployed into a namespace called
    <literal>kubecf</literal>.
   </para>
<screen>&prompt.user;helm install <replaceable>cf-operator</replaceable> suse/cf-operator \
--namespace <replaceable>cf-operator</replaceable> \
--set "global.operator.watchNamespace=<replaceable>kubecf</replaceable>" \
--version &operator_chart;
</screen>
  </step>
  <step>
   <para>
    Wait until &operator; is successfully deployed before proceeding. Monitor
    the status of your &operator; deployment using the
    <command>watch</command> command.
   </para>
<screen>&prompt.user;watch --color &apos;kubectl get pods --namespace <replaceable>cf-operator</replaceable>&apos;</screen>
   <para>
    <!-- TODO-CAP2 DESCRIPTION OF COMPLETE DEPLOYMENT OF OPERATOR -->
   </para>
  </step>
 </procedure>'>

<!--ENTITY deploy-kubecf.....................................................-->

<!ENTITY deploy-kubecf
'<title xmlns="http://docbook.org/ns/docbook">
  Deploy &kubecf;
 </title>
 <procedure xmlns="http://docbook.org/ns/docbook">
  <step>
   <para>
    Use &helm; to deploy &kubecf;. Note that you
    <emphasis role="bold">do not</emphasis> need to manually create the
    namespace for &kubecf;.
   </para>
<screen>&prompt.user;helm install <replaceable>kubecf</replaceable> suse/kubecf \
--namespace <replaceable>kubecf</replaceable> \
--values <replaceable>kubecf-values.yaml</replaceable> \
--version &kubecf_chart;
</screen>
  </step>
  <step>
   <para>
    Wait until &kubecf;; is successfully deployed before proceeding. Monitor
    the status of your &kubecf; deployment using the
    <command>watch</command> command.
   </para>
<screen>&prompt.user;watch --color &apos;kubectl get pods --namespace <replaceable>kubecf</replaceable>&apos;</screen>
  </step>
 </procedure>'>

<!--ENTITY config-new-vs-existing............................................-->

<!ENTITY config-new-vs-existing
'<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  After making the change above, and any other configuration changes, apply the
   update by doing the following:
  </para>
  <itemizedlist xmlns="http://docbook.org/ns/docbook">
   <listitem>
    <para>
     For an initial deployment, continue to the deployment steps for your platform:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       For &caasp;, see <xref linkend="sec-cap-cap-on-caasp"/>.
      </para>
     </listitem>
     <listitem>
      <para>
       For &aks;, see <xref linkend="sec-cap-cap-on-aks"/>.
      </para>
     </listitem>
     <listitem>
      <para>
       For &eks;, see <xref linkend="sec-cap-cap-on-eks"/>.
      </para>
     </listitem>
     <listitem>
      <para>
       For &gke;, see <xref linkend="sec-cap-cap-on-gke"/>.
      </para>
     </listitem>
    </itemizedlist>
   </listitem> 
   <listitem>
    <para>
     For an existing deployment, use <command>helm upgrade</command> to apply
     the change.
    </para>
<screen>&prompt.user;helm upgrade <replaceable>kubecf</replaceable> suse/kubecf \
--values <replaceable>&values-file;</replaceable> \
--version &kubecf_chart;
</screen>
   </listitem>
  </itemizedlist>'>

<!--ENTITY kubecf-operator-versions..........................................-->

<!ENTITY kubecf-operator-versions
'<warning xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>&kubecf; and &operator; versions</title>
  <para xmlns="http://docbook.org/ns/docbook">
   &kubecf; and &operator; interoperate closely. Before you deploy a
   specific version combination, make sure they were confirmed to work. For more
   information see <xref linkend="cha-cap-depl-notes-releases"/>.
  </para>
 </warning>'>

<!--ENTITY values-file-changes...............................................-->

<!ENTITY values-file-changes
'<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  The format of the &values-filename; file has been restructured completely.
  Do not re-use the previous version of the file. Instead, source the default file from the appendix in
  <xref linkend="app-kubecf-values-yaml"/>.
 </para>'>

<!--ENTITY cf-auth...........................................................-->

<!ENTITY cf-auth
'<para xmlns="http://docbook.org/ns/docbook">
  Verify you can connect and authenticate to the cluster.
 </para>
<screen xmlns="http://docbook.org/ns/docbook">&prompt.user;cf api --skip-ssl-validation "https://api.&lt;system_domain>"

# Copy the admin cluster password.
&prompt.user;admin_pass=$(kubectl get secret \
  --namespace <replaceable>kubecf</replaceable> kubecf.var-cf-admin-password \
  --output jsonpath=&apos;{.data.password}&apos; \
  | base64 --decode)

# Use the password from the previous step when requested.
&prompt.user;cf auth admin "${admin_pass}"
</screen>'>

<!--ENTITY sizing-priority...................................................-->

<!ENTITY sizing-priority
'<important xmlns="http://docbook.org/ns/docbook">
  <title>Sizing Priority</title>
  <para>
   When sizing values are specified, it takes precedence over the <literal>high_availability</literal> property.
  </para>
 </important>'>
