<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha-cap-upgrade"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>Upgrading &productname;</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  &productname; upgrades are delivered as container images from the &suse;
  registry and applied with &helm;.
 </para>
 <para>
   For additional upgrade information, always review the release notes
   published at
   <link xlink:href="https://www.suse.com/releasenotes/x86_64/SUSE-CAP/2/"/>.
 </para>
 <sect1 xml:id="sec-cap-upgrade-considerations">
  <title>Important Considerations</title>

  <para>
   Before performing an upgrade, be sure to take note of the following:
  </para>


  <variablelist>
   <varlistentry>
    <term>Perform Upgrades in Sequence</term>
    <listitem>
     <para>
      &cap; only supports upgrading releases in sequential order. If there are
      any intermediate releases between your current release and your target
      release, they must be installed. Skipping
      releases is not supported.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Preserve &helm; Value Changes during Upgrades</term>
    <listitem>
     <para>
      During a <command>helm upgrade</command>, always ensure your
      &values-filename; file is passed. This will
      preserve any previously set &helm; values while allowing additional
      &helm; value changes to be made.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>helm rollback</command> Is Not Supported</term>
    <listitem>
     <para>
      <command>helm rollback</command> is not supported in &productname; or in
      upstream &cf;, and may break your cluster completely, because database
      migrations only run forward and cannot be reversed. Database schema can
      change over time. During upgrades both pods of the current and the next
      release may run concurrently, so the schema must stay compatible with the
      immediately previous release. But there is no way to guarantee such
      compatibility for future upgrades. One way to address this is to perform a
      full raw data backup and restore. (See
      <xref linkend="sec-cap-backup-restore-of-raw-data"/>)
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>

 <sect1 xml:id="sec-cap-update">
  <title>Upgrading &productname;</title>

  <para>
   The transition from &productname; 1.5.2 to &productname; 2.0 involves a
   migration of data rather than a direct upgrade. This process is outlined in
   the subsections below.
  </para>

  <important>
   <title>Scope of Migration</title>
   <para>
    This procedure only imports the UAA and CC databases. It does not import the
    Credhub and Diego BBS databases. Service credentials from Credhub are
    missing, and Diego does not know anything about the desired app states
    All running apps need to be restarted so that Diego knows about them.
   </para>
   <para>
    This whole procedure also does not deal with exporting and recreating
    services.
   </para>
  </important>

  <sect2 xml:id="sec-cap-upgrade-export-scf">
   <title>Export Data from Existing SCF Deployment</title>

   <procedure>
    <step>
     <para>
      Export the blobstore.
     </para>
<screen>&prompt.user;kubectl exec --namespace scf blobstore-0 -- tar cfz - --exclude=/var/vcap/store/shared/tmp /var/vcap/store/shared > blob.tgz</screen>
    </step>
    <step>
     <para>
      Export the User Account and Authentication database (UAADB).
     </para>
<screen>&prompt.user;kubectl exec mysql-0 --namespace uaa -- bash -c '/var/vcap/packages/mariadb/bin/mysqldump \
   --defaults-file=/var/vcap/jobs/mysql/config/mylogin.cnf \
   --socket /var/vcap/sys/run/pxc-mysql/mysqld.sock \
   uaadb' > uaadb-src.sql
</screen>
    </step>
    <step>
     <para>
      Export the Cloud Controller database (CCDB).
     </para>
<screen>&prompt.user;kubectl exec mysql-0 --namespace scf -- bash -c '/var/vcap/packages/mariadb/bin/mysqldump \
   --defaults-file=/var/vcap/jobs/mysql/config/mylogin.cnf \
   --socket /var/vcap/sys/run/pxc-mysql/mysqld.sock \
   ccdb' > ccdb-src.sql
</screen>
    </step>
    <step>
     <para>
      Save database encryption key.
     </para>
<screen>&prompt.user;kubectl exec --stdin --tty --namespace scf api-group-0 -- bash -c "cat /var/vcap/jobs/cloud_controller_ng/config/cloud_controller_ng.yml | grep -A 10 db_encryption" > enc_key</screen>
    </step>
    <step>
     <para>
      Lock all buildpacks.
     </para>
     <para>
      When the Cloud Controller (CC) starts, it will replace all unlocked admin
      buildpacks with the versions bundled with the release. So if the
      buildpacks from the 1.5.2 export are required to restage applications,
      then they need to be locked before the CCDB is exported.
     </para>
<screen>&prompt.user;for BP in $(cf buildpacks | perl -ne 'print if s/(_buildpack).*/\1/' | uniq); do cf update-buildpack $BP -s sle15 --lock; done

&prompt.user;for BP in $(cf buildpacks | perl -ne 'print if s/(_buildpack).*/\1/' | uniq); do cf update-buildpack $BP -s cflinuxfs3 --lock; done
</screen>
    </step>
    <step>
     <para>
      Rotate secrets and database encryption key. Do not copy the example as is, ensure a secure key is used in place of the example value of <replaceable>abcdef</replaceable>.
     </para>
     <substeps>
      <step>
       <para>
        Use <command>helm upgrade</command> to apply the configuration update
        and rotate all generated secrets. If secrets have been rotated
        previously (<literal>kube.secrets_generation_counter</literal> has
        already been set), be sure the new value provided is an increment of the
        existing one.
       </para>
<screen>&prompt.user;helm upgrade susecf-scf suse/cf \
--namespace <replaceable>kubecf</replaceable> \
--set env.CC_DB_CURRENT_KEY_LABEL=<replaceable>NEW_KEY</replaceable> \
--set secrets.CC_DB_ENCRYPTION_KEYS.<replaceable>NEW_KEY</replaceable>=<replaceable>abcdef</replaceable> \
--set kube.secrets_generation_counter=<replaceable>2</replaceable>
--values scf-config-values.yaml \
--version 2.20.3
</screen>
      </step>
      <step>
       <para>
        With the new encryption key in place, perform the rotation.
       </para>
<screen>&prompt.user;kubectl exec --namespace scf api-group-0 -- bash -c 'source /var/vcap/jobs/cloud_controller_ng/bin/ruby_version.sh; \
    export CLOUD_CONTROLLER_NG_CONFIG=/var/vcap/jobs/cloud_controller_ng/config/cloud_controller_ng.yml; \
    cd /var/vcap/packages/cloud_controller_ng/cloud_controller_ng; \
    bundle exec rake rotate_cc_database_key:perform'
</screen>
      </step>
      <step>
       <para>
        Restart the pods for the changes to take effect.
       </para>
<screen>&prompt.user;kubectl delete pod api-group-0 --namespace scf
&prompt.user;kubectl delete pod cc-worker-0 --namespace scf
&prompt.user;kubectl delete pod cc-clock-0 --namespace scf
</screen>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      Save the CCDB with locked buildpacks and rotated secrets/encryption keys.
     </para>
<screen>&prompt.user;kubectl exec mysql-0 --namespace scf -- bash -c '/var/vcap/packages/mariadb/bin/mysqldump \
  --defaults-file=/var/vcap/jobs/mysql/config/mylogin.cnf \
  --socket /var/vcap/sys/run/pxc-mysql/mysqld.sock \
  ccdb' > ccdb-rotated-src.sql

&prompt.user;kubectl exec --stdin --tty --namespace scf api-group-0 -- bash -c "cat /var/vcap/jobs/cloud_controller_ng/config/cloud_controller_ng.yml | grep -A 10 db_encryption" > enc_key_rotated
</screen>
    </step>
    <step>
     <para>
      Verify you have collected all required files.
     </para>
<screen>&prompt.user;ls -l
-rw-r--r-- 1 501 20 217539560 May 27 18:23 blob.tgz
-rw-r--r-- 1 501 20    231904 May 27 19:53 ccdb-rotated-src.sql
-rw-r--r-- 1 501 20    225726 May 27 18:24 ccdb-src.sql
-rw-r--r-- 1 501 20       220 May 27 18:29 enc_key
-rw-r--r-- 1 501 20       245 May 27 19:51 enc_key_rotated
-rw-r--r-- 1 501 20     66281 May 27 18:24 uaadb-src.sql
</screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec-cap-upgrade-import-kube">
   <title>Import Data into New &kubecf; Deployment</title>

   <procedure>
    <step>
     <para>
      Deploy a &productname; 2.0 cluster. Refer to the instructions for your
      target platform.
     </para>
     &deployment-platforms;
    </step>
    <step>
     <para>
      Import the UAA database.
     </para>
     <para>
      The current database configuration does not allow importing of a mysqldump
      , so needs to be made more permissive
     </para>
<screen>&prompt.user;cat &lt;&lt;EOF | kubectl exec -i database-0 --namespace kubecf -- mysql
SET GLOBAL pxc_strict_mode=PERMISSIVE;
SET GLOBAL sql_mode='STRICT_ALL_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
set GLOBAL innodb_strict_mode='OFF';
EOF
</screen>
     <para>
      It is not possible to drop the &kubecf; database for UAA and import the
      version from SCF. &kubecf; has additional clients and scopes that would
      get lost. So the migration strategy is to only extract users and
      passwords from the export, and add them to &kubecf;. Since this is a new
      setup, none of the users should exist. Except for <literal>admin</literal>
      , so we are only updating the password for that user.
    </para>
     <para>
      The <filename>adduser.pl</filename> script will also update all identity
      zone ids to <literal>uaa</literal>, in case the export comes from an
      external and not an embedded UAA.
     </para>
<screen># adduser.pl
use strict;
use warnings;

my %table;
while (&lt;>) {
    my($insert,$table,$values) = /^(INSERT INTO `(.*?)` VALUES) (.*);$/ or next;

    my $literal_value = qr/ ' (?: [^'\\] | '' | \\. )* ' | -?\w+ /x;
    # Each row contains the comma-separated list of values including the surrounding parens.
    my @rows = $values =~ / \( (?: (?: $literal_value ) ,? )+ \) /gx;

    my @records;
    # Each record is a reference to a list of all fields of a row.
    foreach my $record (map [/$literal_value/g], @rows) {
        # Replace old identity_zone_id with 'uaa'.
        my %zone_id_column = (group_membership => 7, groups => 5, oauth_client_details => 11,
                              user_google_mfa_credentials => 5, users => 15);
        $record->[$zone_id_column{$table}] = "'uaa'" if defined $zone_id_column{$table};

        # Admin user name has changed from uaaadmin to uaa.
        $record->[6] = 'uaa' if $table eq "schema_version";

        push @records, $record;
    }
    $table{$table} = \@records;
}

my $users = $table{users};
my $admin = (grep $_->[4] eq "'admin'", @$users)[0];
die unless $admin;
my $admin_id = $admin->[0];

# Set admin password to exported value.
printf "UPDATE `users` SET password = %s WHERE username = 'admin';\n", $admin->[5];

# Export all tables that have a user_id column.
my %id_column = (user_google_mfa_credentials => 0, user_info => 0, users => 0);
for my $table (keys %id_column) {
    # Add records for all users, except 'admin'.
    for my $record (grep $_->[$id_column{$table}] ne $admin_id, @{$table{$table}}) {
        printf "INSERT INTO `$table` VALUES(%s);\n", join(",", @$record);
    }
}
</screen>
<screen>&prompt.user;perl adduser.pl uaadb-src.sql > adduser.sql
cat adduser.sql

kubectl exec -i database-0 --namespace kubecf -- mysql uaa &lt; adduser.sql

echo "select username from uaa.users;" | kubectl exec -i database-0 --namespace kubecf -- mysql
cf login --skip-ssl-validation -a https://api. -u admin -p changeme
</screen>
    </step>
    <step>
     <para>
      Import the blobstore.
     </para>
     <para>
      The blobstore is still empty, except for the admin buildpacks. The
      buildpacks will be reinstalled anyways, unless the CCDB in the export has
      them locked, so deleting them here is kind of optional.
     </para>
<screen>&prompt.user;kubectl exec --namespace kubecf singleton-blobstore-0 -- rm -rf /var/vcap/store/shared/cc-buildpacks
&prompt.user;kubectl exec -i --namespace kubecf singleton-blobstore-0 -- tar xfz - -C / &lt; blob.tgz
&prompt.user;kubectl delete pod --namespace kubecf singleton-blobstore-0
</screen>
    </step>
    <step>
     <para>
      Import the Cloud Controller database (CCDB).
     </para>
     <para>
      The CC database includes routes, that <emphasis>may</emphasis> need to be updated for the new
      cluster. The list of migrations also includes artificial
      "squashed migrations" that are generated by SCF to combine all previous
      migrations into a single transaction. These squashed migrations don't
      exist in &kubecf; and must be filtered out. The original migrations still
      exist in the table, so no other actions are required.
     </para>
<screen># normalize.pl
use strict;
use warnings;

while (&lt;>) {
    if (my($insert,$table,$values) = /^(INSERT INTO `(.*?)` VALUES) (.*);$/) {
        my $literal_value = qr/ ' (?: [^'\\] | '' | \\. )* ' | -?\w+ /x;
        # Each row contains the comma-separated list of values including the surrounding parens.
        my @rows = $values =~ / \( (?: (?: $literal_value ) ,? )+ \) /gx;

        my @records;
        # Each record is a reference to a list of all fields of a row.
        foreach my $record (map [/$literal_value/g], @rows) {
            # Squashed migration are an SCF optimization that doesn't exist in kubecf.
            next if $table eq "schema_migrations" &amp;&amp; $record->[0] =~ /^'\d+_squashed_migrations.rb'$/;
            push @records, $record;
        }

        # Print each row on a separate line for easier reading/comparison.
        printf "$insert\n%s;\n", join(",\n", map(sprintf("  (%s)", join(",", @$_)), @records));
        next;
    }

    print;
}

</screen>
     <para>
      For a CCDB that has not been rotated:
     </para>
     <orderedlist>
      <listitem>
       <para>
        Update the routes for the new cluster in the
        <filename>ccdb-src.sql</filename> file. Replace the placeholders values
        with the value of <literal>DOMAIN</literal> from the SCF cluster and the
        value of <literal>system_domain</literal> from the &kubecf; cluster.
       </para>
<screen>&prompt.user;sed "s/<replaceable>SCF_DOMAIN</replaceable>/<replaceable>KubeCF_system_domain</replaceable>/g" ccdb-src.sql > ccdb-src-kubecf.sql</screen>
      </listitem>
      <listitem>
       <para>
        Filter out the squashed migrations.
       </para>
<screen>&prompt.user;perl normalize.pl ccdb-src-kubecf.sql > normal.sql</screen>
      </listitem>
      <listitem>
       <para>
        Drop the current CCDB and import the dump from SCF.
       </para> 
<screen>&prompt.user;echo "drop database cloud_controller; create database cloud_controller;" | \
     kubectl exec -i database-0 --namespace kubecf -- mysql
&prompt.user;kubectl exec -i database-0 --namespace kubecf -- mysql cloud_controller &lt; normal.sql
</screen>
      </listitem>
     </orderedlist>
     <para>
      For a CCDB that has already been rotated before:
     </para>
     <orderedlist>
      <listitem>
       <para>
        Update the routes for the new cluster in the
        <filename>ccdb-rotated-src.sql</filename> file. Replace the placeholders values
        with the value of <literal>DOMAIN</literal> from the SCF cluster and the
        value of <literal>system_domain</literal> from the &kubecf; cluster.
       </para>
<screen>&prompt.user;sed "s/<replaceable>SCF_DOMAIN</replaceable>/<replaceable>KubeCF_system_domain</replaceable>/g" ccdb-rotated-src.sql > ccdb-src-kubecf.sql</screen>
      </listitem>
      <listitem>
       <para>
        Filter out the squashed migrations.
       </para>
<screen>&prompt.user;perl normalize.pl ccdb-src-kubecf.sql > normal.sql</screen>
      </listitem>
      <listitem>
       <para>
        Drop the current CCDB and import the dump from SCF.
       </para>
<screen>&prompt.user;echo "drop database cloud_controller; create database cloud_controller;" | \
     kubectl exec -i database-0 --namespace kubecf -- mysql
&prompt.user;kubectl exec -i database-0 --namespace kubecf -- mysql cloud_controller &lt; normal.sql
</screen>
      </listitem>
     </orderedlist>
    </step>
    <step>
     <para>
      Update the encryption key.
     </para>
     <para>
      For a CCDB that has not been rotated:
     </para>
     <orderedlist>
      <listitem>
<screen>&prompt.user;cat enc_key
db_encryption_key: qmF4BZxVUZoVkvDdYi2crkezdNWww6mLRh32W77VsLY5xhinpunVNp1d2mzc3O7F

database_encryption:
  keys: {}
  current_key_label: ""
  pbkdf2_hmac_iterations: 2048
</screen>     
      </listitem>
      <listitem>
       <para>
        When only <literal>db_encryption_key</literal> is set, we must use the
        same legacy mechanism in &kubecf; as well.
       </para>
       <para>
        Create a YAML configuration file with the structure below. Replace the
        example values with the values found in the
        <filename>enc_key</filename> file.
       </para>
<screen>&prompt.user;cat enc_key_values.yaml
credentials:
  cc_db_encryption_key: <replaceable>qmF4BZxVUZoVkvDdYi2crkezdNWww6mLRh32W77VsLY5xhinpunVNp1d2mzc3O7F</replaceable>
</screen>
       <para>
         Use <command>helm upgrade</command> to apply the configuration update.
       </para>
<screen>&prompt.user;helm upgrade kubecf suse/kubecf \
--namespace <replaceable>kubecf</replaceable> \
--values &values-file; \
--values enc_key_values.yaml \
--version &kubecf_chart;
</screen>
      </listitem>
     </orderedlist>
     <para>
      For a CCDB that has already been rotated before:
     </para>
     <orderedlist>
      <listitem>
<screen>&prompt.user;cat enc_key_rotated
db_encryption_key: qmF4BZxVUZoVkvDdYi2crkezdNWww6mLRh32W77VsLY5xhinpunVNp1d2mzc3O7F

database_encryption:
  keys: {"NEW_KEY":"abcdef"}
  current_key_label: "NEW_KEY"
  pbkdf2_hmac_iterations: 2048
</screen>
      </listitem>
      <listitem>
       <para>
        Since a rotated key exists, <literal>db_encryption_key</literal> can be
        ignored. The <literal>current_key_label</literal> setting must be copied
        over, with the exact same name and value. Any other (older) keys in that
        set can be ignored, as long as encryption key rotation has been
        performed in SCF since the last update to that list.
       </para>
       <para>
        Create a YAML configuration file with the structure below. Replace the
        example values with the values found in the
       <filename>enc_key_rotated</filename> file.
       </para>
<screen>&prompt.user;cat enc_key_values.yaml
ccdb:
  encryption:
    rotation:
      key_labels:
      - NEW_KEY
      current_key_label: NEW_KEY

credentials:
  cc_db_encryption_key: qmF4BZxVUZoVkvDdYi2crkezdNWww6mLRh32W77VsLY5xhinpunVNp1d2mzc3O7F
  ccdb_key_label_new_key: abcdef
</screen>
       <para>
         Use <command>helm upgrade</command> to apply the configuration update.
       </para>
<screen>&prompt.user;helm upgrade kubecf suse/kubecf \
--namespace <replaceable>kubecf</replaceable> \
--values &values-file; \
--values enc_key_values.yaml \
--version &kubecf_chart;
</screen>
      </listitem>
     </orderedlist>
     <para>
      Wait until <literal>api</literal>, <literal>cc-worker</literal>, and
      <literal>scheduler</literal> have restarted. To monitor the progress run
      the following command.
     </para>
<screen>&prompt.user;watch --color &apos;kubectl get pods --namespace kubecf&apos;</screen>
    </step>
    <step>
     <para>
      Rotate the encryption key.
     </para>
     <para>
      The imported data can now be decrypted with the legacy
      <literal>db_encryption_key</literal>. For consistency we want to run a
      rotation, so all the imported data will be re-encrypted with the current
      &kubecf; encryption key.
     </para>
<screen>&prompt.user;kubectl patch qjob rotate-cc-database-key --namespace kubecf --type merge \
      --patch '{"spec":{"trigger":{"strategy":"now"}}}'

&prompt.user;kubectl logs -l quarks.cloudfoundry.org/qjob-name=rotate-cc-database-key --namespace kubecf -c logs -f
</screen>
    </step>
    <step>
     <para>
      Verify everything works.
     </para>
     <substeps>     
      <step>
       <para>
        Target an existing <literal>org</literal> and <literal>space</literal>
        from your previous &productname; 1.5.2 deployment.
       </para>
<screen>&prompt.user;cf target -o EXISTING_ORG -s EXISTING_SPACE</screen>
      </step>
      <step>
       <para>
        Verify the apps that were previously deployed to the
        <literal>org</literal> and <literal>space</literal> are listed.
       </para>
<screen>&prompt.user;cf apps
name        requested state   instances   memory   disk   urls
12factor    started           0/1         64M      256M   12factor.example.com 
</screen>
      </step>
      <step>
       <para>
        The <literal>started</literal> value for
        <literal>requested state</literal> is misleading. Since we did not
        import the BBS database, Diego does not know anything about these apps.
        No app instances will be started until the <command>cf restart</command>
        command is manually issued (it does not require restaging).
       </para>
<screen>&prompt.user;cf restart 12factor</screen>
       <para>
        Repeat for all apps.
       </para>
      </step>
      <step>
       <para>
        Check the encryption key.
       </para>
<screen>&prompt.user;kubectl exec --stdin --tty --namespace kubecf api-0 -- bash -c "cat /var/vcap/jobs/cloud_controller_ng/config/cloud_controller_ng.yml | grep -A 10 db_encryption"
Defaulting container name to cloud-controller-ng-cloud-controller-ng.
Use 'kubectl describe pod/api-0 -n kubecf' to see all of the containers in this pod.
db_encryption_key: qmF4BZxVUZoVkvDdYi2crkezdNWww6mLRh32W77VsLY5xhinpunVNp1d2mzc3O7F

database_encryption:
  keys: {"ccdb_key_label_encryption_key_0":"jHlbjl11nZ2wqdh9bCA9ZIOCMxgseIf7OyVP2aSrESmZEuovqLXSWPTKTEcU0CCo"}
  current_key_label: "ccdb_key_label_encryption_key_0"
  pbkdf2_hmac_iterations: 2048
</screen>
      </step>
      <step>
       <para>
        List the buildpacks.
       </para>
<screen>&prompt.user;cf buildpacks
Getting buildpacks...

buildpack               position   enabled   locked   filename                                                stack
staticfile_buildpack    1          true      false    staticfile-buildpack-sle15-v1.5.5.1-5.1-eaf36a02.zip    sle15
staticfile_buildpack    2          true      false    staticfile_buildpack-cflinuxfs3-v1.5.4.zip              cflinuxfs3
...
</screen>
       <para>
        These are the buildpacks bundled with &kubecf;. Since buildpacks in the
        CCDB were not locked, they were upgraded when the <literal>api</literal>
        (or <literal>cc-worker</literal>) pods were restarted.
       </para>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      To update previously locked buildpacks to the &kubecf; version, unlock the
      buildpack and restart the Cloud Controller.
     </para>
     <substeps>
      <step>
       <para>
        This example unlocks all buildpacks associated with the
        <literal>cflinuxfs3</literal> stack.
       </para>
<screen>&prompt.user;for BP in $(cf buildpacks | perl -ne 'print if s/(_buildpack).*/\1/' | uniq); do cf update-buildpack $BP -s cflinuxfs3 --unlock; done
Updating buildpack staticfile_buildpack with stack cflinuxfs3 as admin...
OK
</screen>
      </step>
      <step>
       <para>
        Restart the <literal>api</literal> pod. Restarting the
        <literal>api</literal> pod will cause a restart of the CC. As the CC
        starts, all <emphasis>unlocked</emphasis> admin buildpacks will be
        replaced with versions bundled in the release.
       </para>
<screen>&prompt.user;kubectl delete pod api-0 --namespace kubecf
pod "api-0" deleted
</screen>
       <para>
        After restarting the <literal>api-0i</literal> pod, wait for it to be
        ready again. To monitor the progress run the following command.
       </para>
<screen>&prompt.user;watch --color &apos;kubectl get pods --namespace kubecf&apos;</screen>
      </step>
      <step>
       <para>
        Verify the buildpacks have been updated to the &kubecf; version.  
       </para>
<screen>&prompt.user;cf buildpacks</screen>
      </step>
     </substeps>
    </step>
   </procedure>
  </sect2>
 </sect1>
</chapter>
