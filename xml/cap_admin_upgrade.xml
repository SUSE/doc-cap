<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha-cap-upgrade"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>Upgrading &productname;</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  <literal>uaa</literal>, <literal>scf</literal>, and Stratos together make up
  a &productname; release. Maintenance updates are delivered as container
  images from the &suse; registry and applied with &helm;.
 </para>
 <para>
   For additional upgrade information, always review the release notes
   published at
   <link xlink:href="https://www.suse.com/releasenotes/x86_64/SUSE-CAP/1/"/>.
 </para>
 <sect1 xml:id="sec-cap-upgrade-considerations">
  <title>Important Considerations</title>

  <para>
   Before performing an upgrade, be sure to take note of the following:
  </para>


  <variablelist>
   <varlistentry>
    <term>Perform Upgrades in Sequence</term>
    <listitem>
     <para>
      &cap; only supports upgrading releases in sequential order. If there are
      any intermediate releases between your current release and your target
      release, they must be installed. Skipping
      releases is not supported. See <xref linkend="sec-cap-skipped-release"/>
      for more information.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Preserve &helm; Value Changes during Upgrades</term>
    <listitem>
     <para>
      During a <command>helm upgrade</command>, always ensure your
      <filename>scf-config-values-yaml</filename> file is passed. This will
      preserve any previously set &helm; values while allowing additional
      &helm; value changes to be made.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Use <command>--recreate-pods</command> during a <command>helm upgrade</command></term>
    <listitem>
     <para>
      Note that using <command>--recreate-pods</command> will cause downtime for
      applications, but is required as multiple versions of statefulsets may
      co-exist which can cause incompatibilities between dependent statefulsets,
      and result in a broken upgrade.
     </para>
     <para>
      When upgrading from &productname; 1.3.0 to 1.3.1, running
      <command>helm upgrade</command> does not require the
      <command>--recreate-pods</command> option to be used. A change to the
      active/passive model has allowed for previously unready pods to be
      upgraded, which allows for zero app downtime during the upgrade process.
     </para>
     <para>
      Upgrades between other versions will require the
      <command>--recreate-pods</command> option when using the
      <command>helm upgrade</command> command.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>helm rollback</command> Is Not Supported</term>
    <listitem>
     <para>
      <command>helm rollback</command> is not supported in &productname; or in
      upstream &cf;, and may break your cluster completely, because database
      migrations only run forward and cannot be reversed. Database schema can
      change over time. During upgrades both pods of the current and the next
      release may run concurrently, so the schema must stay compatible with the
      immediately previous release. But there is no way to guarantee such
      compatibility for future upgrades. One way to address this is to perform a
      full raw data backup and restore. (See
      <xref linkend="sec-cap-backup-restore-of-raw-data"/>)
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Do Not Make Changes to Pod Counts During a Upgrade</term>
    <listitem>
     <para>
      If sizing changes need to be mader, make the change either before or after
      an upgrade. See <xref linkend="sec-cap-ha-prod"/>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>

 <sect1 xml:id="sec-cap-update">
  <title>Upgrading &productname;</title>

  <para>
   The supported upgrade method is to install all upgrades, in order. Skipping
   releases is not supported. This table matches the Helm chart versions to
   each release:
  </para>

  &releases-table;

  <para>
   Use &helm; to check for updates:
  </para>

<screen>&prompt.user;helm repo update
Hang tight while we grab the latest from your chart repositories...
...Skip local chart repository
...Successfully got an update from the "stable" chart repository
...Successfully got an update from the "suse" chart repository
Update Complete. ⎈ Happy Helming!⎈
</screen>

  <para>
   Get your currently-installed release versions and chart names (your releases
   may have different names than the examples), and then view the upgrade
   versions:
  </para>
  <!-- Newest available version-1 should be listed as deployed (pre-upgrade) -->
<screen>&prompt.user;helm list
NAME            REVISION  UPDATED                  STATUS    CHART           NAMESPACE
<replaceable>susecf-console</replaceable>  1         Tue Aug 14 11:53:28 2018 DEPLOYED  console-2.4.0   stratos
<replaceable>susecf-scf</replaceable>      1         Tue Aug 14 10:58:16 2018 DEPLOYED  cf-2.16.4       scf
<replaceable>susecf-uaa</replaceable>      1         Tue Aug 14 10:49:30 2018 DEPLOYED  uaa-2.16.4      uaa
</screen>
&helm-search-suse;

  <para>
   View all charts in a release, and their versions:
  </para>

<screen>&prompt.user;helm search suse/uaa --versions
NAME            CHART VERSION   APP VERSION     DESCRIPTION
suse/uaa        &latestuaachart;          1.4.1           A Helm chart for SUSE UAA
suse/uaa        2.16.4          1.4             A Helm chart for SUSE UAA
suse/uaa        2.15.2          1.3.1           A Helm chart for SUSE UAA
suse/uaa        2.14.5                          A Helm chart for SUSE UAA
suse/uaa        2.13.3                          A Helm chart for SUSE UAA
suse/uaa        2.11.0                          A Helm chart for SUSE UAA
suse/uaa        2.10.1                          A Helm chart for SUSE UAA
suse/uaa        2.8.0                           A Helm chart for SUSE UAA
suse/uaa        2.7.0                           A Helm chart for SUSE UAA
suse/uaa        2.6.11                          A Helm chart for SUSE UAA
...
</screen>

  <para>
   Verify the latest release is the next sequential release from your
   currently-installed release. If it is, proceed with the commands below to
   perform the upgrade. If any releases have been missed, see
   <xref linkend="sec-cap-skipped-release"/>.
  </para>

  <para>
   Just like your initial installation, wait for each command to complete
   before running the next command. Monitor progress with the
   <command>watch</command> command for each namespace, for example
   <command>watch --color 'kubectl get pods --namespace uaa'</command>. First
   upgrade <literal>uaa</literal>:
  </para>

<screen>&prompt.user;helm upgrade --force --recreate-pods <replaceable>susecf-uaa</replaceable> suse/uaa \
--values scf-config-values.yaml
</screen>


  <para>
   Then extract the <literal>uaa</literal> secret for <literal>scf</literal> to
   use:
  </para>

<screen>&prompt.user;SECRET=$(kubectl get pods --namespace uaa \
--output jsonpath='{.items[?(.metadata.name=="uaa-0")].spec.containers[?(.name=="uaa")].env[?(.name=="INTERNAL_CA_CERT")].valueFrom.secretKeyRef.name}')

&prompt.user;CA_CERT="$(kubectl get secret $SECRET --namespace uaa \
--output jsonpath="{.data['internal-ca-cert']}" | base64 --decode -)"</screen>

  <para>
   Upgrade <literal>scf</literal>, and note that if you see an error message
   like <literal>lost connection to pod Error: UPGRADE FAILED: transport is
   closing</literal>, this is normal. If you can run <command>watch --color 'kubectl
   get pods --namespace scf'</command> then everything is all right.
  </para>

<screen>&prompt.user;helm upgrade --force --recreate-pods <replaceable>susecf-scf</replaceable> suse/cf \
--values scf-config-values.yaml \
--set "secrets.UAA_CA_CERT=${CA_CERT}"
</screen>

  <para>
   Then upgrade Stratos:
  </para>

<screen>&prompt.user;helm upgrade --force --recreate-pods <replaceable>susecf-console</replaceable> suse/console \
--values scf-config-values.yaml
</screen>
<!-- Internal cf-usb broker broker endpoint URL change involving 1.3 -->

  <xi:include href="sec_cf_usb_url.xml"/>
 </sect1>
 <sect1 xml:id="sec-cap-skipped-release">
  <title>Installing Skipped Releases</title>

  <para>
   By default, &helm; always installs the latest release. What if you
   accidentally skipped a release, and need to apply it before upgrading to the
   current release? Install the missing release by specifying the &helm; chart
   version number. For example, your current <literal>uaa</literal> and
   <literal>scf</literal> versions are 2.10.1. Consult the table at the
   beginning of this chapter to see which releases you have missed. In this
   example, the missing &helm; chart version for <literal>uaa</literal> and
   <literal>scf</literal> is 2.11.0. Use the <command>--version</command>
   option to install a specific version:
  </para>

<screen>&prompt.user;helm upgrade --recreate-pods --version 2.11.0 <replaceable>susecf-uaa</replaceable> suse/uaa \
--values scf-config-values.yaml</screen>

  <para>
   Be sure to install the corresponding versions for <literal>scf</literal> and
   Stratos.
  </para>
 </sect1>
</chapter>
