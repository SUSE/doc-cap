<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha-cap-certificates"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>Managing Certificates</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  This chapter describes the process to deploy &productname;
  installed with certificates signed by an external Certificate Authority.
 </para>
 <sect1 xml:id="sec-cap-cert-properties">
  <title>Certificate Characteristics</title>

  <para>
   Ensure the certificates you use have the following characteristics:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     The certificate is encoded in the PEM format.
    </para>
   </listitem>
   <listitem>
    <para>
     In order to secure <literal>scf</literal>-related traffic, the certificate's
     Subject Alternative Name (SAN) should include the domain
     <replaceable>*.example.com</replaceable>, where <replaceable>example.com</replaceable>
     is replaced with the <literal>DOMAIN</literal> in your
     <filename>scf-config-values.yaml</filename>.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="sec-cap-cert-config">
  <title>Deployment Configuration</title>

  <para>
   Certificates used in &productname; are installed through a configuration file,
   called <filename>scf-config-values.yaml</filename>. To specify a
   certificate, set the value of the certificate and its corresponding private
   key under the <literal>secrets:</literal> section.
  </para>

  <note>
   <para>
    Note the use of the "|" character which indicates the use of a literal
    scalar. See the
    <link xlink:href="http://yaml.org/spec/1.2/spec.html#id2795688"/> for more information.
   </para>
  </note>

 <para>
   Certificates are installed to the <literal>scf</literal> component by setting
   the values <literal>ROUTER_SSL_CERT</literal> and
   <literal>ROUTER_SSL_CERT_KEY</literal>. For example:
  </para>

<screen>secrets:
  ROUTER_SSL_CERT: |
    -----BEGIN CERTIFICATE-----
    MIIEEjCCAfoCCQCWC4NErLzy3jANBgkqhkiG9w0BAQsFADBGMQswCQYDVQQGEwJD
    QTETMBEGA1UECAwKU29tZS1TdGF0ZTEOMAwGA1UECgwFTXlPcmcxEjAQBgNVBAMM
    CU15Q0Euc2l0ZTAeFw0xODA5MDYxNzA1MTRaFw0yMDAxMTkxNzA1MTRaMFAxCzAJ
    ...
    xtNNDwl2rnA+U0Q48uZIPSy6UzSmiNaP3PDR+cOak/mV8s1/7oUXM5ivqkz8pEJo
    M3KrIxZ7+MbdTvDOh8lQplvFTeGgjmUDd587Gs4JsormqOsGwKd1BLzQbGELryV9
    1usMOVbUuL8mSKVvgqhbz7vJlW1+zwmrpMV3qgTMoHoJWGx2n5g=
    -----END CERTIFICATE-----

  ROUTER_SSL_CERT_KEY: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEpAIBAAKCAQEAm4JMchGSqbZuqc4LdryJpX2HnarWPOW0hUkm60DL53f6ehPK
    T5Dtb2s+CoDX9A0iTjGZWRD7WwjpiiuXUcyszm8y9bJjP3sIcTnHWSgL/6Bb3KN5
    G5D8GHz7eMYkZBviFvygCqEs1hmfGCVNtgiTbAwgBTNsrmyx2NygnF5uy4KlkgwI
    ...
    GORpbQKBgQDB1/nLPjKxBqJmZ/JymBl6iBnhIgVkuUMuvmqES2nqqMI+r60EAKpX
    M5CD+pq71TuBtbo9hbjy5Buh0+QSIbJaNIOdJxU7idEf200+4anzdaipyCWXdZU+
    MPdJf40awgSWpGdiSv6hoj0AOm+lf4AsH6yAqw/eIHXNzhWLRvnqgA==
    -----END RSA PRIVATE KEY----
</screen>

  <sect2 xml:id="sec-cap-cert-multiple">
   <title>Configuring Multiple Certificates</title>
   <para>
    &cap; supports configurations that use multiple certificates. To specify
    multiple certificates with their associated keys, replace the
    <literal>ROUTER_SSL_CERT</literal> and
    <literal>ROUTER_SSL_CERT_KEY</literal> properties with the
    <literal>ROUTER_TLS_PEM</literal> property in your
    <filename>scf-config-values.yaml</filename> file.
   </para>
<screen>secrets:
  ROUTER_TLS_PEM: |
    - cert_chain: |
        -----BEGIN CERTIFICATE-----
        MIIEDzCCAfcCCQCWC4NErLzy9DANBgkqhkiG9w0BAQsFADBGMQswCQYDVQQGEwJD
        QTETMBEGA1UECAwKU29tZS1TdGF0ZTEOMAwGA1UECgwFTXlPcmcxEjAQBgNVBAMM
        opR9hW2YNrMYQYfhVu4KTkpXIr4iBrt2L+aq2Rk4NBaprH+0X6CPlYg+3edC7Jc+
	...
        ooXNKOrpbSUncflZYrAfYiBfnZGIC99EaXShRdavStKJukLZqb3iHBZWNLYnugGh
        jyoKpGgceU1lwcUkUeRIOXI8qs6jCqsePM6vak3EO5rSiMpXMvLO8WMaWsXEfcBL
        dglVTMCit9ORAbVZryXk8Xxiham83SjG+fOVO4pd0R8UuCE=
        -----END CERTIFICATE-----
      private_key: |
        -----BEGIN RSA PRIVATE KEY-----
        MIIEpAIBAAKCAQEA0HZ/aF64ITOrwtzlRlDkxf0b4V6MFaaTx/9UIQKQZLKT0d7u
        3Rz+egrsZ90Jk683Oz9fUZKtgMXt72CMYUn13TTYwnh5fJrDM1JXx6yHJyiIp0rf
        3G6wh4zzgBosIFiadWPQgL4iAJxmP14KMg4z7tNERu6VXa+0OnYT0DBrf5IJhbn6
	...
        ja0CsQKBgQCNrhKuxLgmQKp409y36Lh4VtIgT400jFOsMWFH1hTtODTgZ/AOnBZd
        bYFffmdjVxBPl4wEdVSXHEBrokIw+Z+ZhI2jf2jJkge9vsSPqX5cTd2X146sMUSy
        o+J1ZbzMp423AvWB7imsPTA+t9vfYPSlf+Is0MhBsnGE7XL4fAcVFQ==
        -----END RSA PRIVATE KEY-----
    - cert_chain: |
        -----BEGIN CERTIFICATE-----
        MIIEPzCCAiegAwIBAgIJAJYLg0SsvPL1MA0GCSqGSIb3DQEBCwUAMEYxCzAJBgNV
        BAYTAkNBMRMwEQYDVQQIDApTb21lLVN0YXRlMQ4wDAYDVQQKDAVNeU9yZzESMBAG
        A1UEAwwJTXlDQS5zaXRlMB4XDTE4MDkxNzE1MjQyMVoXDTIwMDEzMDE1MjQyMVow
	...
        FXrgM9jVBGXeL7T/DNfJp5QfRnrQq1/NFWafjORXEo9EPbAGVbPh8LiaEqwraR/K
        cDuNI7supZ33I82VOrI4+5mSMxj+jzSGd2fRAvWEo8E+MpHSpHJt6trGa5ON57vV
        duCWD+f1swpuuzW+rNinrNZZxUQ77j9Vk4oUeVUfL91ZK4k=
        -----END CERTIFICATE-----
      private_key: |
        -----BEGIN RSA PRIVATE KEY-----
        MIIEowIBAAKCAQEA5kNN9ZZK/UssdUeYSajG6xFcjyJDhnPvVHYA0VtgVOq8S/rb
        irVvkI1s00rj+WypHqP4+l/0dDHTiclOpUU5c3pn3vbGaaSGyonOyr5Cbx1X+JZ5
        17b+ah+oEnI5pUDn7chGI1rk56UI5oV1Qps0+bYTetEYTE1DVjGOHl5ERMv2QqZM
	...
        rMMhAoGBAMmge/JWThffCaponeakJu63DHKz87e2qxcqu25fbo9il1ZpllOD61Zi
        xd0GATICOuPeOUoVUjSuiMtS7B5zjWnmk5+siGeXF1SNJCZ9spgp9rWA/dXqXJRi
        55w7eGyYZSmOg6I7eWvpYpkRll4iFVApMt6KPM72XlyhQOigbGdJ
        -----END RSA PRIVATE KEY-----</screen>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-cap-cert-deploy">
  <title>Deploying &productname; with Certificates</title>

  <para>
   Once the certificate-related values have been set in your
   <filename>scf-config-values.yaml</filename>, deploy &productname;.
  </para>

  <para>
   If this is an initial deployment, use <command>helm install</command> to
   deploy <literal>scf</literal>:
  </para>

  <procedure>
   <step>
    <para>
     Deploy <literal>scf</literal>:
    </para>
<screen>&prompt.user;kubectl create namespace <replaceable>scf</replaceable>

&prompt.user;helm install <replaceable>susecf-scf</replaceable> suse/cf \
--namespace <replaceable>scf</replaceable> \
--values scf-config-values.yaml
</screen>
    &scf-deploy-complete;
   </step>
  </procedure>

  <para>
   If this is an existing deployment, use <command>helm upgrade</command> to
   apply the changes to <literal>scf</literal>:
  </para>

  <procedure>
   <step>
    <para>
     Upgrade <literal>scf</literal>:
    </para>
<screen>&prompt.user;helm upgrade <replaceable>susecf-scf</replaceable> suse/cf \
--values scf-config-values.yaml \
--version &cf_chart;
</screen>
   </step>
   <step>
    <para>
     Monitor the deployment progress using the <command>watch</command> command:
    </para>
<screen>&prompt.user;watch --color 'kubectl get pods --namespace scf'</screen>
   </step>
  </procedure>

  <para>
   Once all pods are up and running, verify you can successfully set your cluster as the
   target API endpoint by running the <command>cf api</command> command without using the
   <command>--skip-ssl-validation</command> option.
  </para>

<screen>&prompt.user;cf api https://api.example.com</screen>

 </sect1>
 <sect1 xml:id="sec-cap-secrets-rotation">
  <title>Rotating Automatically Generated Secrets</title>

  <para>
   &cap; uses a number of automatically generated secrets (passwords and
   certificates) for use internally provided by &operator;. This removes
   the burden from human operators while allowing for secure communication.

   From time to time, operators may wish to change such secrets, either manually
   or on a schedule. This is called rotating a secret.
  </para>
  <sect2 xml:id="sec-cap-secrets-rotation-finding">
    <title>Finding Secrets</title>
    <para>
     Retrieve the list of all secrets maintained by &kubecf;:
    </para>
<screen>
&prompt.user;kubectl get quarkssecret --namespace <replaceable>kubecf</replaceable>
    </screen>
    <para>
      To see information about a specific secret, for example the NATS
      password:
    </para>
<screen>
&prompt.user;kubectl get quarkssecret --namespace <replaceable>kubecf</replaceable> <replaceable>kubecf.var-nats-password</replaceable> --output yaml
   </screen>
   <para>
     Note that each quarkssecret has a corresponding regular &kube; secret
     that it controls:
   </para>
<screen>
&prompt.user;kubectl get secret --namespace <replaceable>kubecf</replaceable>
&prompt.user;kubectl get secret --namespace <replaceable>kubecf</replaceable> <replaceable>kubecf.var-nats-password</replaceable> --output yaml
   </screen>
  </sect2>
  <sect2 xml:id="sec-cap-secrets-rotation-specific">
    <title>Rotating Specific Secrets</title>
    <para>
      To rotate a secret, for example <replaceable>kubecf.var-nats-password</replaceable>:
    </para>
    <procedure>
      <step>
        <para>Create a YAML file for a ConfigMap of the form:</para>
<screen>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: <replaceable>rotate-kubecf.var-nats-password</replaceable>
  labels:
    quarks.cloudfoundry.org/secret-rotation: "true"
data:
  secrets: '["<replaceable>kubecf.var-nats-password</replaceable>"]'
       </screen>
       <para>
         The name of the ConfigMap can be anything allowed by &kube; syntax but
         we recommend using a name derived from the name of the secret itself.
       </para>
       <para>
         Also, the example above rotates only a single secret but 
         the <literal>data.secrets</literal> key accepts an array of secret
         names, allowing simultaneous rotation of many secrets. 
       </para>
      </step>
      <step>
        <para>Apply the ConfigMap:</para>
<screen>
&prompt.user;kubectl apply --namespace <replaceable>kubecf</replaceable> -f <replaceable>/path/to/your/yaml/file</replaceable>
       </screen>
       <para>
         The result can be seen in the &operator;'s log.</para>
     </step>
      <step>
        <para>
          After the rotation is complete, that is after secrets have been
          changed and all affected pods have been restarted, delete the config
          map again:
        </para>
<screen>
&prompt.user;kubectl delete <replaceable>--namespace</replaceable> kubecf -f <replaceable>/path/to/your/yaml/file</replaceable>
       </screen>
      </step>
    </procedure>
  </sect2>

</sect1>
 <sect1 xml:id="sec-cap-trusted-certs">
   <title>Difference between TRUSTED_CERTS and ROOTFS_TRUSTED_CERTS</title>
   <para>
     The <literal>TRUSTED_CERTS</literal> parameter contains a list of CA certificates which become
     available in application instance containers as files in the directory
     <filename>/etc/cf-system-certificates</filename> and the general trust store
     (Only cflinuxfs3).
     The environment variable <literal>CF_SYSTEM_CERT_PATH</literal> holds the first path.
     No difference between applications from buildpacks and from &docker; images.
   </para>
   <para>
     <literal>The ROOT_TRUSTED_CERTS</literal> parameter contains a list of CA certificates which
     are available in application instance containers through the general OS trust store.
     Only applications based on buildpacks (and a rootfs) receive the information.
   </para>
   <para>
     Summary
   </para>
   <itemizedlist>
     <listitem>
       <para>
         Both contain additional CA certificates for applications.
       </para>
      </listitem>
      <listitem>
        <para>
          <literal>ROOTFS_TRUSTED_CERTS</literal> only applies to applications based
          on buildpacks and rootfs and are automatically available through
          the OS trust store.
        </para>
       </listitem>
       <listitem>
         <para>
           <literal>TRUSTED_CERTS</literal> applies to all applications, based on both
           buildpacks and &docker; images. Not automatically available. Applications
           have to use the environment variable <literal>CF_SYSTEM_CERT_PATH</literal>
           and add the certificates themselves.
         </para>
        </listitem>
   </itemizedlist>
 </sect1>
</chapter>
