<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha.cap.install-stratos"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>Installing the Stratos Web Console</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <sect1 xml:id="sec.cap.stratos-prod">
  <title>Install Stratos with &helm;</title>

  <para>
   Stratos UI is a modern web-based management application for Cloud Foundry.
   It provides a graphical management console for both developers and system
   administrators. Install Stratos with &helm; after all of the UAA and SCF
   pods are running. Start by preparing the environment:
  </para>

<screen>&prompt.user;kubectl create namespace stratos</screen>

  <para>
   If you are using &ses; as your storage backend, copy the secret into the
   Stratos namespace.
  </para>

<screen>&prompt.user;kubectl get secret ceph-secret-admin -o json --namespace default | \
sed 's/"namespace": "default"/"namespace": "stratos"/' | \
kubectl create -f -</screen>

  <para>
   You should already have the Stratos charts when you downloaded the SUSE
   charts repository (see <xref linkend="sec.cap.addrepo-prod"/>). Search your
   &helm; repository:
  </para>

<screen>&prompt.user;helm search suse                                  
NAME                         VERSION DESCRIPTION
suse/cf                      &latestscfchart;  A Helm chart for SUSE Cloud Foundry
suse/cf-usb-sidecar-mysql    1.0.1   A Helm chart for SUSE Universal Service Broker ...
suse/cf-usb-sidecar-postgres 1.0.1   A Helm chart for SUSE Universal Service Broker ...
suse/console                 &lateststratoschart;   A Helm chart for deploying Stratos UI Console
suse/uaa                     &latestuaachart;  A Helm chart for SUSE UAA</screen>

  <para>
   Install Stratos, and if you have not set a default storage class you must
   specify it:
  </para>

<screen>&prompt.user;helm install suse/console \
    --name <replaceable>susecf-console</replaceable> \
    --namespace stratos \
    --values scf-config-values.yaml \
    --set storageClass=<replaceable>persistent</replaceable></screen>

  <para>
   Monitor progress:
  </para>

<screen>$ watch -c 'kubectl get pods --namespace stratos'
 Every 2.0s: kubectl get pods --namespace stratos
 
NAME                               READY     STATUS    RESTARTS   AGE
console-0                          3/3       Running   0          30m
console-mariadb-3697248891-5drf5   1/1       Running   0          30m</screen>

  <para>
   When all statuses show Ready, press <keycombo> <keycap function="control"/>
   <keycap>C</keycap> </keycombo> to exit and to view your release information:
  </para>

<screen>NAME:   susecf-console
LAST DEPLOYED: Tue Aug 14 11:53:28 2018
NAMESPACE: stratos
STATUS: DEPLOYED

RESOURCES:
==> v1/Secret
NAME                           TYPE    DATA  AGE
susecf-console-mariadb-secret  Opaque  2     2s
susecf-console-secret          Opaque  2     2s

==> v1/PersistentVolumeClaim
NAME                                  STATUS  VOLUME                                    CAPACITY  ACCESSMODES  STORAGECLASS    AGE
console-mariadb                       Bound   pvc-ef3a120d-3e76-11e8-946a-90b8d00d625f  1Gi       RWO          persistent      2s
susecf-console-upgrade-volume         Bound   pvc-ef409e41-3e76-11e8-946a-90b8d00d625f  20Mi      RWO          persistent      2s
susecf-console-encryption-key-volume  Bound   pvc-ef49b860-3e76-11e8-946a-90b8d00d625f  20Mi      RWO          persistent      2s

==> v1/Service
NAME                    CLUSTER-IP      EXTERNAL-IP    PORT(S)         AGE
susecf-console-mariadb  172.24.181.255  &lt;none>         3306/TCP        2s
susecf-console-ui-ext   172.24.84.50    10.10.100.82   8443:32511/TCP  1s

==> v1beta1/Deployment
NAME             DESIRED  CURRENT  UP-TO-DATE  AVAILABLE  AGE
console-mariadb  1        1        1           0          1s

==> v1beta1/StatefulSet
NAME     DESIRED  CURRENT  AGE
console  1        1        1s</screen>

  <para>
   In this example, pointing your web browser to https://example.com:8443
   opens the console. Wade through the nag screens about the self-signed
   certificates and log in as <literal>admin</literal> with the password you
   created in <filename>scf-config-values.yaml</filename>. If you see an
   upgrade message, wait a few minutes and try again.
  </para>

  <figure xml:id="fig.cap.stratos-prod">
   <title>Stratos UI Cloud Foundry Console</title>
   <mediaobject>
    <imageobject>
     <imagedata fileref="stratos.png" format="PNG" width="75%"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   Another way to get the release name is with the <command>helm list</command>
   command, then query the release name to get its IP address and port number:
  </para>

<screen>&prompt.user;helm list
NAME            REVISION  UPDATED                  STATUS   CHART           NAMESPACE
susecf-console  1         Tue Aug 14 11:53:28 2018 DEPLOYED console-&lateststratoschart;   stratos
susecf-scf      1         Tue Aug 14 10:58:16 2018 DEPLOYED cf-&latestscfchart;       scf
susecf-uaa      1         Tue Aug 14 10:49:30 2018 DEPLOYED uaa-&latestuaachart;      uaa

&prompt.user;helm status susecf-console
LAST DEPLOYED: Tue Aug 14 11:53:28 2018
NAMESPACE: stratos
STATUS: DEPLOYED
[...]
==> v1/Service
NAME                    CLUSTER-IP      EXTERNAL-IP    PORT(S)         AGE
susecf-console-mariadb  172.24.181.255  &lt;none>         3306/TCP        19m
susecf-console-ui-ext   172.24.84.50    10.10.100.82   8443:32511/TCP  19m</screen>
 </sect1>
  </sect1>

  <sect1 xml:id="sec.cap.stratos-prod-kube">
    <title>Connecting Kubernetes</title>

    <para>Stratos can show information from your Kubernetes
    environment.</para>

    <para>To enable this, you must register and connect your Kubernetes
    environment with Stratos.</para>

    <para>In the Stratos UI, go to Endpoints in the left-hand side navigation
    and click on the + icon in the top-right of the view - you should be shown
    the 'Register new Endpoint' view.</para>

    <itemizedlist>
      <listitem>
        <para>Select Kubernetes from the Endpoint Type drop-down</para>
      </listitem>

      <listitem>
        <para>Enter a memorable name for your environment in the Name
        field</para>
      </listitem>

      <listitem>
        <para>Enter the URL of the API server for your Kubernetes
        environment</para>
      </listitem>

      <listitem>
        <para>Check the 'Skip SSL validation for the endpoint' checkbox if
        using self-signed certificates</para>
      </listitem>

      <listitem>
        <para>Click 'Finish'</para>
      </listitem>
    </itemizedlist>

    <para>The view will refresh to show the new endpoint in the disconnected
    state.</para>

    <para>Next you will need to connect to this endpoint. In the table of
    endpoints, click the three-dot menu icon alongside the endpoint that you
    added above. Click on 'Connect' in the drop-down menu.</para>

    <para>You will need to select the appropriate 'Auth Type' for your
    Kubernetes environment and provide the required credentials:</para>

    <itemizedlist>
      <listitem>
        <para>For CaaSP, use the Auth Type 'CAASP (OIDC)' and provide a valid
        kubeconfig file for your environment</para>
      </listitem>

      <listitem>
        <para>For Amazon EKS use the Auth Type 'AWS IAM (EKS)' and provide the
        name of your EKS cluster and your AWS Access Key ID and Secret Access
        Key</para>
      </listitem>

      <listitem>
        <para>For Azure AKS use the Auth Type 'Azure AKS' and provide a valid
        kubeconfig file for your environment</para>
      </listitem>

      <listitem>
        <para>For Minikube use the Auth Type 'Kubernetes Cert Auth' and
        provide the Certificate and Certificate Key files</para>
      </listitem>
    </itemizedlist>

    <para>Finally, click 'Connect' to connect the endpoint with the
    authentication information that you have provided. The endpoint list
    should update to show that your Kubernetes endpoint is connected.</para>

    <para>Once connected, you should see a Kubernetes menu item in the
    left-hand side navigation - click on this to access Kubernetes
    views.</para>
  </sect1>

  <sect1>
    <title>Install Stratos Metrics with &helm;</title>

    <para>Stratos can show metrics data from Prometheus for both Cloud Foundry
    and Kubernetes.</para>

    <para>In order to do this, you need to deploy the stratos-metrics Helm
    chart - this deploys Prometheus with the necessary exporters that collect
    data from Cloud Foundry and Kubernetes. It also wraps Prometheus with an
    nginx server to provide authentication.</para>

    <para>As with deploying Stratos, you should deploy the metrics Helm chart
    using the same scf-config-values.yaml file that was used for deploying SCF
    and UAA.</para>

    <para>Create a new yaml file named stratos-metrics-values.yaml, with the
    following contents:</para>

    <screen>kubernetes:
  authEndpoint: $KUBE_SERVER_ADDRESS
prometheus:
  kubeStateMetrics:
    enabled: true
nginx:
  username: $USERNAME
  password: $PASSWORD</screen>

    <para>where:</para>

    <itemizedlist>
      <listitem>
        <para>$KUBE_SERVER_ADDRESS is the same URL that you used when
        registering your Kubernetes environment with Stratos (the Kubernetes
        API Server URL)</para>
      </listitem>

      <listitem>
        <para>$USERNAME should be chosen by you as the username that you will
        use when connecting to Stratos Metrics</para>
      </listitem>

      <listitem>
        <para>$PASSWORD should be chosen by you as the password that you will
        use when connecting to Stratos Metrics</para>
      </listitem>
    </itemizedlist>

    <para>Install Metrics with:</para>

    <screen>&prompt.user;helm install suse/metrics \
    --name <replaceable>susecf-metrics</replaceable> \
    --namespace metrics \
    --values scf-config-values.yaml \
    --values stratos-metrics-values.yaml</screen>

    <para>Monitor progress:</para>

    <screen>$ watch -c 'kubectl get pods --namespace metrics'</screen>

    <para>When all statuses show Ready, press <keycombo>
        <keycap function="control"/>

        <keycap>C</keycap>
      </keycombo> to exit and to view your release information.</para>

    <para>You can locate the IP and Port that Stratos Metrics is running on
    with:</para>

    <screen>kubectl get service susecf-metrics-metrics-nginx --namespace=metrics</screen>

    <para>This will give output similar to:</para>

    <screen>
NAME                         TYPE     CLUSTER-IP     EXTERNAL-IP PORT(S)       AGE
susecf-metrics-metrics-nginx NodePort 172.24.218.219 10.17.3.1   443:31173/TCP 13s</screen>
  </sect1>

  <sect1>
    <title>Connecting Stratos Metrics</title>

    <para>When Stratos Metrics is connected to Stratos, additional views are
    enabled that show metrics metadata that has been ingested into the Stratos
    Metrics Prometheus server.</para>

    <para>To enable this, you must register and connect your Stratos Metrics
    instance with Stratos.</para>

    <para>In the Stratos UI, go to Endpoints in the left-hand side navigation
    and click on the + icon in the top-right on the view - you should be shown
    the 'Register new Endpoint' view. Next:</para>

    <itemizedlist>
      <listitem>
        <para>Select Metrics from the Endpoint Type dropdown</para>
      </listitem>

      <listitem>
        <para>Enter a memorable name for your environment in the Name
        field</para>
      </listitem>

      <listitem>
        <para>Check the 'Skip SSL validation for the endpoint' checkbox if
        using self-signed certificates</para>
      </listitem>

      <listitem>
        <para>Click 'Finish'</para>
      </listitem>
    </itemizedlist>

    <para>The view will refresh to show the new endpoint in the disconnected
    state. Next you will need to connect to this endpoint.</para>

    <para>In the table of endpoints, click the three-dot menu icon alongside
    the endpoint that you added above, then:</para>

    <itemizedlist>
      <listitem>
        <para>Click on 'Connect' in the dropdown menu</para>
      </listitem>

      <listitem>
        <para>Enter the username for your Stratos Metrics instance</para>
      </listitem>

      <listitem>
        <para>Enter the password for your Stratos Metrics instance</para>
      </listitem>

      <listitem>
        <para>Click 'Connect'</para>
      </listitem>
    </itemizedlist>

    <para>Once connected, you should see that the name of your Metrics
    endpoint is a hyperlink and clicking on it should show basic metadata
    about the Stratos Metrics endpoint.</para>

    <para>Metrics data and views should now be available in the Stratos UI,
    for example:</para>

    <itemizedlist>
      <listitem>
        <para>On the Instances tab for an Application, the table should show
        an additional Cell column to indicate which Diego Cell the instance is
        running on. This should be clickable to navigate to a Cell view
        showing Cell information and metrics</para>
      </listitem>

      <listitem>
        <para>On the view for an Application there should be a new Metrics tab
        that shows Application metrics</para>
      </listitem>

      <listitem>
        <para>On the Kubernetes views, views such as the Node view should show
        an additional Metrics tab with metric information</para>
      </listitem>
    </itemizedlist>
  </sect1>
</chapter>
