<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha-cap-install-stratos"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>Installing the Stratos Web Console</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

   <para>
   The Stratos user interface (UI) is a modern web-based management application
   for &cf;. It provides a graphical management console for both
   developers and system administrators. Install Stratos with &helm; after all
   of the <literal>uaa</literal> and <literal>scf</literal> pods are running.
  </para>

 <sect1 xml:id="sec-cap-stratos-prod">
  <title>Deploy Stratos on &susecaaspreg;</title>

   <para>
      The steps in this section describe how to install Stratos on &susecaaspreg;
      without an external load balancer, instead mapping the master node to your
      &productname; domain as described in
      <xref linkend="sec-cap-configure-prod"/>. These instructions assume you
      have followed the procedure in <xref linkend="cha-cap-depl-caasp"/>,
      have deployed <literal>uaa</literal> and <literal>scf</literal> successfully,
      and have created a default storage class.
      <!-- Hopefully an additional section describing how to deploy with a load
      balancer will actually be written. cjs april 1 2019 "See
      TODO to learn how to configure
      Stratos to use an external load balancer."-->
  </para>

  <para>
   If you are using &ses; as your storage back-end, copy the secret into the
   Stratos namespace:
  </para>

<screen>&prompt.user;kubectl get secret ceph-secret-admin --output json --namespace default | \
sed 's/"namespace": "default"/"namespace": "stratos"/' | kubectl create --filename -</screen>

  <para>
   You should already have the Stratos charts when you downloaded the &suse;
   charts repository (see <xref linkend="sec-cap-addrepo-prod"/>). Search your
   &helm; repository to verify that you have the <literal>suse/console</literal>
   chart:
  </para>

&helm-search-suse;

 <para>
     Use &helm; to install Stratos, using the same
     <filename>scf-config-values.yaml</filename> configuration file you used to
     deploy<literal>uaa</literal> and <literal>scf</literal>:
  </para>

<screen>&prompt.user;helm install suse/console \
    --name <replaceable>susecf-console</replaceable> \
    --namespace stratos \
    --values scf-config-values.yaml
</screen>

  &stratos-deploy-complete;

  <para>
   When the <literal>stratos</literal> deployment completes, query with &helm;
   to view your release information:
  </para>

<screen>&prompt.user;helm status susecf-console
LAST DEPLOYED: Wed Mar 27 06:51:36 2019
NAMESPACE: stratos
STATUS: DEPLOYED

RESOURCES:
==> v1/Secret
NAME                           TYPE    DATA  AGE
susecf-console-secret          Opaque  2     3h
susecf-console-mariadb-secret  Opaque  2     3h

==> v1/PersistentVolumeClaim
NAME                                  STATUS  VOLUME                                    CAPACITY  ACCESSMODES  STORAGECLASS  AGE
susecf-console-upgrade-volume         Bound   pvc-711380d4-5097-11e9-89eb-fa163e15acf0  20Mi      RWO          persistent    3h
susecf-console-encryption-key-volume  Bound   pvc-711b5275-5097-11e9-89eb-fa163e15acf0  20Mi      RWO          persistent    3h
console-mariadb                       Bound   pvc-7122200c-5097-11e9-89eb-fa163e15acf0  1Gi       RWO          persistent    3h

==> v1/Service
NAME                    CLUSTER-IP      EXTERNAL-IP                                                PORT(S)   AGE
susecf-console-mariadb  172.24.137.195  &lt;none>                                                     3306/TCP  3h
susecf-console-ui-ext   172.24.80.22    10.86.101.115,172.28.0.31,172.28.0.36,172.28.0.7,172.28.0.22  8443/TCP  3h

==> v1beta1/Deployment
NAME        DESIRED  CURRENT  UP-TO-DATE  AVAILABLE  AGE
stratos-db  1        1        1           1          3h

==> v1beta1/StatefulSet
NAME     DESIRED  CURRENT  AGE
stratos  1        1        3h
</screen>

  <para>
  Find the external IP address with
  <command>kubectl get service susecf-console-ui-ext --namespace stratos</command> to access your new Stratos Web console, for example https://10.86.101.115:8443, or use the
          domain you created for it, and its port, for example
          https://example.com:8443. Wade through the nag screens about the self-signed
   certificates and log in as <literal>admin</literal> with the password you
   created in <filename>scf-config-values.yaml</filename>.
  </para>

  <!-- Image of Stratos UI console -->
  &stratos-figure;

  <sect2 xml:id="sec-cap-stratos-caasp-connect">
   <title>Connecting &susecaaspreg; to Stratos</title>

   <para>
    Stratos can show information from your &susecaaspreg; environment.
   </para>

   <para>
    To enable this, you must register and connect your &susecaaspreg; environment
    with Stratos.
   </para>

   <para>
    In the Stratos UI, go to <guimenu>Endpoints</guimenu> in the left-hand side
    navigation and click on the <guimenu>+</guimenu> icon in the top-right of
    the view - you should be shown the "Register new Endpoint" view.
   </para>

   <procedure>
    <step>
     <para>
      In the Stratos UI, go to <guimenu>Endpoints</guimenu> in the left-hand side
      navigation and click on the <guimenu>+</guimenu> icon in the top-right of
      the view.
     </para>
    </step>
    <step>
     <para>
      On the <literal>Register a new Endpoint</literal> view, click the
      <literal>&caasp;</literal> button.
     </para>
    </step>
    <step>
     <para>
      Enter a memorable name for your &susecaaspreg; environment in the <guimenu>Name</guimenu>
      field. For example, <replaceable>my-endpoint</replaceable>.
     </para>
    </step>
    <step>
     <para>
      Enter the URL of the API server for your &kube; environment in the
      <guimenu>Endpoint Address</guimenu> field. Run <command>kubectl cluster-info</command>
      and use the value of <literal>&kube; master</literal> as the URL.
     </para>
<screen>&prompt.user;kubectl cluster-info</screen>
    </step>
    <step>
     <para>
      Activate the <guimenu>Skip SSL validation for the endpoint</guimenu> check box
      if using self-signed certificates.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Register</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Activate the <guimenu>Connect to my-endpoint now (optional).</guimenu> check box.
     </para>
    </step>
    <step>
     <para>
      Provide a valid <filename>kubeconfig</filename> file for your &susecaaspreg; environment.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Connect</guimenu>.
     </para>
    </step>
    <step>
     <para>
      In the Stratos UI, go to <guimenu>&kube;</guimenu> in the left-hand side
      navigation. Information for your &susecaaspreg; environment should now be displayed.
     </para>
    </step>
   </procedure>

   <figure xml:id="stratos-kubernetes-view-caasp-png">
    <title>&kube; Environment Information on Stratos</title>
    <mediaobject>
     <imageobject>
      <imagedata fileref="stratos-kubernetes-view-caasp.png" format="PNG" width="75%"/>
     </imageobject>
    </mediaobject>
   </figure>
  </sect2>
 </sect1>

 <sect1 xml:id="sec-cap-stratos-eks">
  <title>Deploy Stratos on &eks;</title>

  <para>
   Before deploying Stratos, ensure <literal>uaa</literal> and <literal>scf</literal>
   have been successfully deployed on &eks; (see <xref linkend="cha-cap-depl-eks"/>).
  </para>
  <para>
   Configure a scoped storage class for your Stratos deployment. Create a configuration
   file, called <filename>scoped-storage-class.yaml</filename> in this example,
   using the following as a template. Specify the region you are using as the
   <literal>zone</literal> and be sure to include the letter (for example, the
   letter <literal>a</literal> in <literal>us-west-2a</literal>) identifier to indicate
   the Availability Zone used:
  </para>
<screen>kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: <replaceable>gp2scoped</replaceable>
provisioner: kubernetes.io/aws-ebs
parameters:
  type: gp2
  zone: <replaceable>"us-west-2a"</replaceable>
reclaimPolicy: Retain
mountOptions:
  - debug
</screen>
  <para>
   Create the storage class using the <filename>scoped-storage-class.yaml</filename>
   configuration file:
  </para>
<screen>&prompt.user;kubectl create --filename <replaceable>scoped-storage-class.yaml</replaceable></screen>
  <para>
   Verify the storage class has been created:
  </para>
<screen>&prompt.user;kubectl get storageclass
NAME            PROVISIONER             AGE
gp2 (default)   kubernetes.io/aws-ebs   1d
gp2scoped       kubernetes.io/aws-ebs   1d
</screen>
  <para>
   Use &helm; to install Stratos:
  </para>
<screen>&prompt.user;helm install suse/console \
    --name susecf-console \
    --namespace stratos \
    --values scf-config-values.yaml \
    --set kube.storage_class.persistent=gp2scoped \
    --set services.loadbalanced=true
</screen>

  &stratos-deploy-complete;

  <para>
   Obtain the host name of the service exposed through the public load balancer:
  </para>
<screen>&prompt.user;kubectl get service susecf-console-ui-ext --namespace stratos</screen>
  <para>
   Use this host name to create a CNAME record.
  </para>

  <!-- Image of Stratos UI console -->
  &stratos-figure;

  <sect2 xml:id="sec-cap-stratos-eks-connect">
   <title>Connecting &eks; to Stratos</title>

   <para>
    Stratos can show information from your &eks; environment.
   </para>

   <para>
    To enable this, you must register and connect your &eks; environment
    with Stratos.
   </para>

   <para>
    In the Stratos UI, go to <guimenu>Endpoints</guimenu> in the left-hand side
    navigation and click on the <guimenu>+</guimenu> icon in the top-right of
    the view - you should be shown the "Register new Endpoint" view.
   </para>

   <procedure>
    <step>
     <para>
      In the Stratos UI, go to <guimenu>Endpoints</guimenu> in the left-hand side
      navigation and click on the <guimenu>+</guimenu> icon in the top-right of
      the view.
     </para>
    </step>
    <step>
     <para>
      On the <literal>Register a new Endpoint</literal> view, click the
      <literal>&eks;</literal> button.
     </para>
    </step>
    <step>
     <para>
      Enter a memorable name for your &eks; environment in the <guimenu>Name</guimenu>
      field. For example, <replaceable>my-endpoint</replaceable>.
     </para>
    </step>
    <step>
     <para>
      Enter the URL of the API server for your &kube; environment in the
      <guimenu>Endpoint Address</guimenu> field. Run <command>kubectl cluster-info</command>
      and use the value of <literal>&kube; master</literal> as the URL.
     </para>
<screen>&prompt.user;kubectl cluster-info</screen>
    </step>
    <step>
     <para>
      Activate the <guimenu>Skip SSL validation for the endpoint</guimenu> check box
      if using self-signed certificates.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Register</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Activate the <guimenu>Connect to my-endpoint now (optional).</guimenu> check box.
     </para>
    </step>
    <step>
     <para>
      Enter the name of your &eks; cluster in the <guimenu>Cluster</guimenu>
      field.
     </para>
    </step>
    <step>
     <para>
      Enter your AWS Access Key ID in the <guimenu>Access Key ID</guimenu>
      field.
     </para>
    </step>
    <step>
     <para>
      Enter your AWS Secret Access Key in the <guimenu>Secret Access Key</guimenu>
      field.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Connect</guimenu>.
     </para>
    </step>
    <step>
     <para>
      In the Stratos UI, go to <guimenu>&kube;</guimenu> in the left-hand side
      navigation. Information for your &eks; environment should now be displayed.
     </para>
    </step>
   </procedure>

   <!-- Image of Kubernetes information after connecting with Stratos -->
   &stratos-kubernetes-figure;

  </sect2>
 </sect1>
 <sect1 xml:id="sec-cap-stratos-aks">
  <title>Deploy Stratos on &aks;</title>

  <para>
   Before deploying Stratos, ensure <literal>uaa</literal> and <literal>scf</literal>
   have been successfully deployed on &aks; (see <xref linkend="cha-cap-depl-aks"/>).
  </para>

  <para>
   Use &helm; to install Stratos:
  </para>
<screen>&prompt.user;helm install suse/console \
    --name susecf-console \
    --namespace stratos \
    --values scf-config-values.yaml \
    --set services.loadbalanced=true
</screen>

  &stratos-deploy-complete;

  <para>
   Obtain the IP address of the service exposed through the public load balancer:
  </para>
<screen>&prompt.user;kubectl get service susecf-console-ui-ext --namespace stratos</screen>
  <para>
   Use this IP address to create an A record.
  </para>

  <!-- Image of Stratos UI console -->
  &stratos-figure;

  <sect2 xml:id="sec-cap-stratos-aks-connect">
   <title>Connecting &aks; to Stratos</title>

   <para>
    Stratos can show information from your &aks; environment.
   </para>

   <para>
    To enable this, you must register and connect your &aks; environment
    with Stratos.
   </para>

   <para>
    In the Stratos UI, go to <guimenu>Endpoints</guimenu> in the left-hand side
    navigation and click on the <guimenu>+</guimenu> icon in the top-right of
    the view - you should be shown the "Register new Endpoint" view.
   </para>

   <procedure>
    <step>
     <para>
      In the Stratos UI, go to <guimenu>Endpoints</guimenu> in the left-hand side
      navigation and click on the <guimenu>+</guimenu> icon in the top-right of
      the view.
     </para>
    </step>
    <step>
     <para>
      On the <literal>Register a new Endpoint</literal> view, click the
      <literal>Azure AKS</literal> button.
     </para>
    </step>
    <step>
     <para>
      Enter a memorable name for your &aks; environment in the <guimenu>Name</guimenu>
      field. For example, <replaceable>my-endpoint</replaceable>.
     </para>
    </step>
    <step>
     <para>
      Enter the URL of the API server for your &kube; environment in the
      <guimenu>Endpoint Address</guimenu> field. Run <command>kubectl cluster-info</command>
      and use the value of <literal>&kube; master</literal> as the URL.
     </para>
<screen>&prompt.user;kubectl cluster-info</screen>
    </step>
    <step>
     <para>
      Activate the <guimenu>Skip SSL validation for the endpoint</guimenu> check box
      if using self-signed certificates.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Register</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Activate the <guimenu>Connect to my-endpoint now (optional).</guimenu> check box.
     </para>
    </step>
    <step>
     <para>
      Provide a valid <filename>kubeconfig</filename> file for your &aks; environment.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Connect</guimenu>.
     </para>
    </step>
    <step>
     <para>
      In the Stratos UI, go to <guimenu>&kube;</guimenu> in the left-hand side
      navigation. Information for your &aks; environment should now be displayed.
     </para>
    </step>
   </procedure>

   <!-- Image of Kubernetes information after connecting with Stratos -->
   &stratos-kubernetes-figure;

  </sect2>
 </sect1>
 <sect1 xml:id="sec-cap-stratos-gke">
  <title>Deploy Stratos on &gke;</title>

  <para>
   Before deploying Stratos, ensure <literal>uaa</literal> and <literal>scf</literal>
   have been successfully deployed on &gke; (see <xref linkend="cha-cap-depl-gke"/>).
  </para>

  <para>
   Use &helm; to install Stratos:
  </para>
<screen>&prompt.user;helm install suse/console \
    --name susecf-console \
    --namespace stratos \
    --values scf-config-values.yaml \
    --set services.loadbalanced=true
</screen>

  &stratos-deploy-complete;

  <para>
   Obtain the IP address of the service exposed through the public load balancer:
  </para>
<screen>&prompt.user;kubectl get service susecf-console-ui-ext --namespace stratos</screen>
  <para>
   Use this IP address to create an A record.
  </para>

  <!-- Image of Stratos UI console -->
  &stratos-figure;

  <sect2 xml:id="sec-cap-stratos-gke-connect">
   <title>Connecting &gke; to Stratos</title>

   <para>
    Stratos can show information from your &gke; environment.
   </para>

   <para>
    To enable this, you must register and connect your &gke; environment
    with Stratos.
   </para>

   <para>
    In the Stratos UI, go to <guimenu>Endpoints</guimenu> in the left-hand side
    navigation and click on the <guimenu>+</guimenu> icon in the top-right of
    the view - you should be shown the "Register new Endpoint" view.
   </para>

   <procedure>
    <step>
     <para>
      In the Stratos UI, go to <guimenu>Endpoints</guimenu> in the left-hand side
      navigation and click on the <guimenu>+</guimenu> icon in the top-right of
      the view.
     </para>
    </step>
    <step>
     <para>
      On the <literal>Register a new Endpoint</literal> view, click the
      <literal>&gke-full;</literal> button.
     </para>
    </step>
    <step>
     <para>
      Enter a memorable name for your &aks; environment in the <guimenu>Name</guimenu>
      field. For example, <replaceable>my-endpoint</replaceable>.
     </para>
    </step>
    <step>
     <para>
      Enter the URL of the API server for your &kube; environment in the
      <guimenu>Endpoint Address</guimenu> field. Run <command>kubectl cluster-info</command>
      and use the value of <literal>&kube; master</literal> as the URL.
     </para>
<screen>&prompt.user;kubectl cluster-info</screen>
    </step>
    <step>
     <para>
      Activate the <guimenu>Skip SSL validation for the endpoint</guimenu> check box
      if using self-signed certificates.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Register</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Activate the <guimenu>Connect to my-endpoint now (optional).</guimenu> check box.
     </para>
    </step>
    <step>
     <para>
      Provide a valid <filename>Application Default Credentials</filename> file for your
      &gke; environment. Generate the file using the command below. The command saves the
      credentials to a file named <filename>application_default_credentials.json</filename>
      and outputs the path of the file.
     </para>
<screen>&prompt.user;gcloud auth application-default login</screen>
    </step>
    <step>
     <para>
      Click <guimenu>Connect</guimenu>.
     </para>
    </step>
    <step>
     <para>
      In the Stratos UI, go to <guimenu>&kube;</guimenu> in the left-hand side
      navigation. Information for your &gke; environment should now be displayed.
     </para>
    </step>
   </procedure>

   <!-- Image of Kubernetes information after connecting with Stratos -->
   &stratos-kubernetes-figure;
  </sect2>
 </sect1>
 <sect1 xml:id="sec-cap-stratos-upgrade">
  <title>Upgrading Stratos</title>

  <para>
   For instructions to upgrade Stratos, follow the process described in
   <xref linkend="cha-cap-upgrade"/>. Take note that <literal>uaa</literal> and
   <literal>scf</literal>, other components along with Stratos that make up a
   &cap; release, are upgraded prior to upgrading Stratos.
  </para>
 </sect1>
 <sect1 xml:id="sec-cap-stratos-metrics">
  <title>Stratos Metrics</title>

  <para>
   Stratos can show metrics data from
   <link xlink:href="https://prometheus.io/">Prometheus</link> for both &cf;
    and &kube;.
  </para>
  <para>
   To learn more about Stratos Metrics and its full list of configuration
   options, see <link xlink:href="https://github.com/SUSE/stratos-metrics"/>.
  </para>

  <sect2 xml:id="sec-cap-stratos-metrics-install">
   <title>Install Stratos Metrics with &helm;</title>
   <para>
    In order to display metrics data with Stratos, you need to deploy the
    <literal>stratos-metrics</literal> &helm; chart - this deploys Prometheus
    with the necessary exporters that collect data from &cf; and
    &kube;. It also wraps Prometheus with an
    <link xlink:href="http://nginx.org/">nginx</link> server to provide
    authentication.
   </para>
   <para>
    As with deploying Stratos, you should deploy the metrics &helm; chart using
    the same <filename>scf-config-values.yaml</filename> file that was used for
    deploying <literal>scf</literal> and <literal>uaa</literal>.
   </para>
   <para>
    Create a new yaml file named
    <filename>stratos-metrics-values.yaml</filename>, with the following
    contents:
   </para>
<screen>env:
  DOPPLER_PORT: 443
kubernetes:
  apiEndpoint: <replaceable>kube_server_address.example.com</replaceable>
prometheus:
  kubeStateMetrics:
    enabled: true
nginx:
  username: <replaceable>username</replaceable>
  password: <replaceable>password</replaceable>
services:
  loadbalanced: true</screen>
   <para>
    where:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <literal>apiEndpoint</literal> is the same URL that you used when
      registering your &kube; environment with Stratos (the &kube; API
      Server URL)
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>username</literal> should be chosen by you as the username that
      you will use when connecting to Stratos Metrics
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>password</literal> should be chosen by you as the password that
      you will use when connecting to Stratos Metrics. Ensure to choose a secure
      password
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>loadbalanced</literal> is set to <literal>true</literal> if your &kube;
      deployment supports automatic configuration of a load balancer (for example,
      AKS, EKS, and GKE)
     </para>
    </listitem>
   </itemizedlist>
   <para>
    If you are using &ses;, you must copy the Ceph admin secret to the
    <literal>metrics</literal> namespace:
   </para>
<screen>&prompt.user;kubectl get secret ceph-secret-admin --output json --namespace default | \
sed 's/"namespace": "default"/"namespace": "metrics"/' | kubectl create --filename -
</screen>
   <para>
    Install Metrics with:
   </para>
<screen>&prompt.user;helm install suse/metrics \
    --name <replaceable>susecf-metrics</replaceable> \
    --namespace metrics \
    --values scf-config-values.yaml \
    --values stratos-metrics-values.yaml</screen>
   <para>
    Monitor progress:
   </para>
<screen>$ watch --color 'kubectl get pods --namespace metrics'</screen>
   <para>
    When all statuses show <literal>Ready</literal>, press <keycombo>
    <keycap function="control"/> <keycap>C</keycap> </keycombo> to exit and to
    view your release information.
   </para>
  </sect2>

  <sect2 xml:id="sec-cap-stratos-metrics-connect">
   <title>Connecting Stratos Metrics</title>
   <para>
    When Stratos Metrics is connected to Stratos, additional views are enabled
    that show metrics metadata that has been ingested into the Stratos Metrics
    Prometheus server.
   </para>
   <para>
    To enable this, you must register and connect your Stratos Metrics instance
    with Stratos.
   </para>
   <para>
    In the Stratos UI, go to <guimenu>Endpoints</guimenu> in the left-hand side
    navigation and click on the <guimenu>+</guimenu> icon in the top-right of
    the view - you should be shown the "Register new Endpoint" view. Next:
   </para>
   <procedure>
    <step>
     <para>
      Select Metrics from the <guimenu>Endpoint Type</guimenu> dropdown.
     </para>
    </step>
    <step>
     <para>
      Enter a memorable name for your environment in the
      <guimenu>Name</guimenu> field.
     </para>
    </step>
    <step>
     <para>
      Enter the <guimenu>Endpoint Address</guimenu>. Use the following to find
      the endpoint value.
     </para>
<screen>&prompt.user;kubectl get service susecf-metrics-metrics-nginx --namespace metrics</screen>
     <itemizedlist>
      <listitem>
       <para>
	For &aks;, &eks;, and &gke; deployments which use a load balancer, the
	output will be similar to the following:
       </para>
<screen>
NAME                           TYPE           CLUSTER-IP     EXTERNAL-IP      PORT(S)         AGE
susecf-metrics-metrics-nginx   LoadBalancer   10.0.202.180   52.170.253.229   443:30263/TCP   21h
</screen>
       <para>
        Preprend <literal>https://</literal> to the public IP of the load
        balancer, and enter it into the <guimenu>Endpoint Address</guimenu>
        field. Using the values from the example above,
        <literal>https://52.170.253.229</literal> is entered as the endpoint
        address.
       </para>
      </listitem>
      <listitem>
       <para>
        For &caasp; deployments which do not use a load balancer, the output
	will be similar to the following:
       </para>
<screen>
NAME                           TYPE       CLUSTER-IP       EXTERNAL-IP               PORT(S)         AGE
susecf-metrics-metrics-nginx   NodePort   172.28.107.209   10.86.101.115,172.28.0.31 443:30685/TCP   21h
</screen>
       <para>
        Prepend <literal>https://</literal> to the external IP of your node,
	followed by the <literal>nodePort</literal>, and enter it into the
        <guimenu>Endpoint Address</guimenu> field. Using the values from the
        example above, <literal>https://10.86.101.115:30685</literal> is entered
        as the endpoint address.
       </para>
      </listitem>
     </itemizedlist>
    </step>
    <step>
     <para>
      Check the <guimenu>Skip SSL validation for the endpoint</guimenu>
      checkbox if using self-signed certificates.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Finish</guimenu>.
     </para>
    </step>
   </procedure>
   <para>
    The view will refresh to show the new endpoint in the disconnected state.
    Next you will need to connect to this endpoint.
   </para>
   <para>
    In the table of endpoints, click the overflow menu icon alongside the
    endpoint that you added above, then:
   </para>
   <procedure>
    <step>
     <para>
      Click on <guimenu>Connect</guimenu> in the dropdown menu.
     </para>
    </step>
    <step>
     <para>
      Enter the username for your Stratos Metrics instance. This will be the
      <literal>nginx.username</literal> defined in your
      <filename>stratos-metrics-values.yaml</filename> file.
     </para>
    </step>
    <step>
     <para>
      Enter the password for your Stratos Metrics instance. This will be the
      <literal>nginx.password</literal> defined in your
      <filename>stratos-metrics-values.yaml</filename> file.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Connect</guimenu>.
     </para>
    </step>
   </procedure>
   <para>
    Once connected, you should see that the name of your Metrics endpoint is a
    hyperlink and clicking on it should show basic metadata about the Stratos
    Metrics endpoint.
   </para>
   <para>
    Metrics data and views should now be available in the Stratos UI, for
    example:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      On the <guimenu>Instances</guimenu> tab for an Application, the table
      should show an additional Cell column to indicate which Diego Cell the
      instance is running on. This should be clickable to navigate to a Cell
      view showing Cell information and metrics.
     </para>
     <figure xml:id="stratos-app-instances-metrics-png">
      <title>Cell Column on Application Instance Tab after Connecting Stratos Metrics</title>
      <mediaobject>
       <imageobject>
        <imagedata fileref="stratos-app-instances-metrics.png" format="PNG" width="75%"/>
       </imageobject>
      </mediaobject>
     </figure>
    </listitem>
    <listitem>
     <para>
      On the view for an Application there should be a new Metrics tab that
      shows Application metrics.
     </para>
     <figure xml:id="stratos-app-metrics-tab-png">
      <title>Application Metrics Tab after Connecting Stratos Metrics</title>
      <mediaobject>
       <imageobject>
        <imagedata fileref="stratos-app-metrics-tab.png" format="PNG" width="75%"/>
       </imageobject>
      </mediaobject>
     </figure>
    </listitem>
    <listitem>
     <para>
      On the &kube; views, views such as the Node view should show an
      additional <guimenu>Metrics</guimenu> tab with metric information.
     </para>
     <figure xml:id="stratos-kubernetes-node-metrics-png">
      <title>Node Metrics on the Stratos &kube; View</title>
      <mediaobject>
       <imageobject>
        <imagedata fileref="stratos-kubernetes-node-metrics.png" format="PNG" width="75%"/>
       </imageobject>
      </mediaobject>
     </figure>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>
</chapter>
