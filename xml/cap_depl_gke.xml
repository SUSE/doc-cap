<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha-cap-depl-gke"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>Deploying &productname; on &gke-full; (GKE)</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <important>
     &readmefirst;
 </important>
 <para>
  &productname; supports deployment on &gke-full; (GKE). This chapter describes the steps
  to prepare a &productname; deployment on GKE using its integrated network load balancers. See
  <link xlink:href="https://cloud.google.com/kubernetes-engine/"/>
  for more information on GKE.
 </para>
 <sect1 xml:id="sec-cap-prereqs-gke">
  <title>Prerequisites</title>

  <para>
   The following are required to deploy and use &productname; on GKE:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     A Google Cloud Platform (GCP) user account or a service account with the
     following IAM roles. If you do not have an account, visit
     <link xlink:href="https://console.cloud.google.com/"/> to create one.
    </para>
    <itemizedlist>
     <listitem>
      <para>
       <literal>compute.admin</literal>. For details regarding this role, refer to
       <link xlink:href="https://cloud.google.com/iam/docs/understanding-roles#compute-engine-roles"/>.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>container.admin</literal>. For details regarding this role, refer to
       <link xlink:href="https://cloud.google.com/kubernetes-engine/docs/how-to/iam#predefined"/>.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>iam.serviceAccountUser</literal>. For details regarding this role, refer to
       <link xlink:href="https://cloud.google.com/kubernetes-engine/docs/how-to/iam#primitive"/>.
      </para>
     </listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>
     Access to a GCP project with the &kube; Engine API enabled. If a
     project needs to be created, refer to
     <link xlink:href="https://cloud.google.com/apis/docs/getting-started#creating_a_google_project"/>.
     To enable access to the API, refer to
     <link xlink:href="https://cloud.google.com/apis/docs/getting-started#enabling_apis"/>.
    </para>
   </listitem>
   <listitem>
    <para>
     <command>gcloud</command>, the primary command line interface to Google
     Cloud Platform. See
     <link xlink:href="https://cloud.google.com/sdk/gcloud/"/> for more
     information and installation instructions.
    </para>
   </listitem>

   <!-- listitems: Install steps and links -->
   &cfcli-prereq;
   &kubectl-prereq;
   &jq-prereq;
   &curl-prereq;
   &sed-prereq;
  </itemizedlist>

  &min-deploy-note;

 </sect1>
 <sect1 xml:id="sec-cap-create-gke-cluster">
  <title>Creating a GKE cluster</title>

  <para>
   In order to deploy &productname;, create a cluster that:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Is a <literal>Zonal</literal>, <literal>Regional</literal>, or
     <literal>Private</literal> type. Do not use a <literal>Alpha</literal>
     cluster.
    </para>
   </listitem>
   <listitem>
    <para>
     Uses <literal>Ubuntu</literal> as the host operating system. If using the
     <literal>gcloud</literal> CLI, include <command>--image-type=UBUNTU</command>
     during the cluster creation.
    </para>
   </listitem>
   <listitem>
    <para>
     Allows access to all Cloud APIs (in order for storage to work correctly).
	    <!--	    https://stackoverflow.com/questions/48759906/how-to-allow-allow-full-access-to-all-cloud-apis-for-cloud-api-access-scopes-f?rq=1

	    https://cloud.google.com/compute/docs/access/create-enable-service-accounts-for-instances#changeserviceaccountandscopes
	    -->
    </para>
   </listitem>
   <listitem>
    <para>
     Has at least 3 nodes of machine type <literal>n1-standard-4</literal>. If using the
     <literal>gcloud</literal> CLI, include <command>--machine-type=n1-standard-4</command>
     and <command>--num-nodes=3</command> during the cluster creation. For details, see
     <link xlink:href="https://cloud.google.com/compute/docs/machine-types#standard_machine_types"/>.
    </para>
   </listitem>
   <listitem>
    <!-- para -->
    &kernel-prereq;
   </listitem>
   <listitem>
    <para>
     Has at least &node_size; GB local storage per node.
    </para>
   </listitem>
   <listitem>
    <para>
     (Optional) Uses preemptible nodes to keep costs low. For detials, see
     <link xlink:href="https://cloud.google.com/kubernetes-engine/docs/how-to/preemptible-vms"/>.
    </para>
   </listitem>
  </itemizedlist>
  <procedure>
   <step>
    <para>
     Set a name for your cluster:
    </para>
<screen>&prompt.user;export CLUSTER_NAME=<replaceable>"cap"</replaceable></screen>
   </step>
   <step>
    <para>
     Set the zone for your cluster:
    </para>
<screen>&prompt.user;export CLUSTER_ZONE=<replaceable>"us-west1-a"</replaceable></screen>
   </step>
   <step>
    <para>
     Set the number of nodes for your cluster:
    </para>
<screen>&prompt.user;export NODE_COUNT=3</screen>
   </step>
   <step>
    <para>
     Create the cluster:
    </para>
<screen>&prompt.user;gcloud container clusters create ${CLUSTER_NAME} \
--image-type=UBUNTU \
--machine-type=n1-standard-4 \
--zone ${CLUSTER_ZONE} \
--num-nodes=$NODE_COUNT \
--no-enable-basic-auth \
--no-issue-client-certificate \
--no-enable-autoupgrade \
--metadata disable-legacy-endpoints=true
</screen>
    <itemizedlist>
     <listitem>
      <para>
       Specify the <command>--no-enable-basic-auth</command> and
       <command>--no-issue-client-certificate</command> flags so that
       <command>kubectl</command> does not use basic or client certificate
       authentication, but uses OAuth Bearer Tokens instead. Configure the
       flags to suit your desired authentication mechanism.
      </para>
     </listitem>
     <listitem>
      <para>
       Specify <command>--no-enable-autoupgrade</command> to disable
       automatic upgrades.
      </para>
     </listitem>
     <listitem>
      <para>
       Disable legacy metadata server endpoints using
       <command>--metadata disable-legacy-endpoints=true</command> as a best
       practice as indicated in
       <link xlink:href="https://cloud.google.com/compute/docs/storing-retrieving-metadata#default"/>.
      </para>
     </listitem>
    </itemizedlist>
   </step>
  </procedure>
 </sect1>

 <sect1 xml:id="sec-cap-gke-kubeconfig">
  <title>Get <literal>kubeconfig</literal> File</title>

  <para>
   Get the <literal>kubeconfig</literal> file for your cluster.
  </para>

<screen>&prompt.user;gcloud container clusters get-credentials --zone ${CLUSTER_ZONE:?required} ${CLUSTER_NAME:?required}</screen>

 </sect1>

  <!-- Entry defined in xml/repeated-content-decl.ent -->
  &install-helm;

 <sect1 xml:id="sec-cap-gke-storage">
  &storage-class;
 </sect1>

 <sect1 xml:id="sec-cap-gke-config">
  <title>Deployment Configuration</title>
  <para>
   The following file, &values-filename;, provides a
   complete example deployment configuration.
  </para>

  &supported-domains;

<screen>
### example deployment configuration file
### &values-file;

<!-- TODO-CAP2 -->
</screen>
 </sect1>

 <!-- Begin optional features -->

 <sect1 xml:id="sec-cap-gke-certificates">
  <!-- Entry defined in xml/repeated-content-decl.ent -->
  &certificates;
 </sect1>

 <sect1 xml:id="sec-cap-gke-ingress">
  <!-- Entry defined in xml/repeated-content-decl.ent -->
  &ingress-controller;
 </sect1>

 <sect1 xml:id="sec-cap-gke-high-availability">
  <!-- Entry defined in xml/repeated-content-decl.ent -->
  &high-availability;
 </sect1>

 <sect1 xml:id="sec-cap-gke-external-blobstore">
  <!-- Entry defined in xml/repeated-content-decl.ent -->
  &external-blobstore;
 </sect1>

 <sect1 xml:id="sec-cap-gke-external-database">
  <!-- Entry defined in xml/repeated-content-decl.ent -->
  &external-database;
 </sect1>

 <!-- End optional features -->

 <sect1 xml:id="sec-cap-addrepo-gke">
  <title>Add the &kube; charts repository</title>

  <para>
   Download the &suse; &kube; charts repository with &helm;:
  </para>

<screen>&prompt.user;helm repo add <replaceable>suse</replaceable> https://kubernetes-charts.suse.com/</screen>

  <para>
   You may replace the example <replaceable>suse</replaceable> name with any
   name. Verify with <command>helm</command>:
  </para>

<screen>&prompt.user;helm repo list
NAME       URL
stable     https://kubernetes-charts.storage.googleapis.com
local      http://127.0.0.1:8879/charts
suse       https://kubernetes-charts.suse.com/
</screen>

  <para>
   List your chart names, as you will need these for some operations:
  </para>

&helm-search-suse;

 </sect1>
 <sect1 xml:id="sec-cap-cap-on-gke">
  <title>Deploying &productname;</title>
  <para>
   This section describes how to deploy &productname; on &gke;, and how to
   configure your DNS records.
  </para>

  &kubecf-operator-versions;

  <sect2 xml:id="sec-cap-gke-deploy-operator">
   &deploy-operator;
  </sect2>

  <sect2 xml:id="sec-cap-gke-deploy-kubecf">
   &deploy-kubecf;
  </sect2>
 </sect1>

 <sect1 xml:id="sec-cap-gke-service-broker">
  <title>Deploying and Using the Google Cloud Platform Service Broker</title>

  <para>
   The Google Cloud Platform (GCP) Service Broker is designed for use with &cf;
   and &kube;. It is compliant with v2.13 of the Open Service Broker API (see
   <link xlink:href="https://www.openservicebrokerapi.org/"/>) and provides
   support for the services listed at
   <link xlink:href="https://github.com/GoogleCloudPlatform/gcp-service-broker/tree/master#open-service-broker-for-google-cloud-platform"/>.
  </para>
  <para>
   This section describes the how to deploy and use the GCP Service Broker, as a
   &scf; application, on &productname;.
  </para>

  <sect2 xml:id="sec-cap-gke-service-broker-apis">
   <title>Enable APIs</title>

   <procedure>
    <step>
     <para>
      From the GCP console, click the <guimenu>Navigation menu</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>APIs &amp; Services</guimenu> and then
      <guimenu>Library</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Enable the following:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        The Google Cloud Resource Manager API. For more information, see
	<link xlink:href="https://console.cloud.google.com/apis/api/cloudresourcemanager.googleapis.com"/>.
       </para>
      </listitem>
      <listitem>
       <para>
        The Google Identity and Access Management (IAM) API. For more
	information, see
	<link xlink:href="https://console.cloud.google.com/apis/api/iam.googleapis.com/overview"/>.
       </para>
      </listitem>
     </itemizedlist>
    </step>
    <step>
     <para>
      Additionally, enable the APIs for the services that will be used. Refer to
      <link xlink:href="https://github.com/GoogleCloudPlatform/gcp-service-broker/tree/master#open-service-broker-for-google-cloud-platform"/>
      to see the services available and the corresponding APIs that will need to
      be enabled. The examples in this section will require enabling the
      following APIs:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        The Google Cloud SQL API. For more information, see
	<link xlink:href="https://console.cloud.google.com/apis/library/sql-component.googleapis.com"/>.
       </para>
      </listitem>
      <listitem>
       <para>
        The Google Cloud SQL Admin API. For more information, see
	<link xlink:href="https://console.cloud.google.com/apis/library/sqladmin.googleapis.com"/>.
       </para>
      </listitem>
     </itemizedlist>
    </step>
   </procedure>
  </sect2>
  <sect2 xml:id="sec-cap-gke-service-broker-service-account">
   <title>Create a Service Account</title>

   <para>
    A service account allows non-human users to authenticate with and be
    authorized to interact with Google APIs. To learn more about service
    accounts, see
    <link xlink:href="https://cloud.google.com/iam/docs/understanding-service-accounts"/>.
    The service account created here will be used by the GCP Service Broker
    application so that it can interact with the APIs to provision resources.
   </para>
   <procedure>
    <step>
     <para>
      From the GCP console, click the <guimenu>Navigation menu</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Go to <guimenu>IAM &amp; admin</guimenu> and click <guimenu>Service
      accounts</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Create Service Account</guimenu>.
     </para>
    </step>
    <step>
     <para>
      In the <guimenu>Service account name</guimenu> field, enter a name.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Create</guimenu>.
     </para>
    </step>
    <step>
     <para>
      In the <guimenu>Service account permissions</guimenu> section, add the
      following roles:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        <guimenu>Project > Editor</guimenu>
       </para>
      </listitem>
      <listitem>
       <para>
        <guimenu>Cloud SQL > Cloud SQL Admin</guimenu>
       </para>
      </listitem>
      <listitem>
       <para>
        <guimenu>Compute Engine > Compute Admin</guimenu>
       </para>
      </listitem>
      <listitem>
       <para>
        <guimenu>Service Accounts > Service Account User</guimenu>
       </para>
      </listitem>
      <listitem>
       <para>
        <guimenu>Cloud Services > Service Broker Admin</guimenu>
       </para>
      </listitem>
      <listitem>
       <para>
        <guimenu>IAM > Security Admin</guimenu>
       </para>
      </listitem>
     </itemizedlist>
    </step>
    <step>
     <para>
      Click <guimenu>Continue</guimenu>.
     </para>
    </step>
    <step>
     <para>
      In the <guimenu>Create key</guimenu> section, click <guimenu>Create
      Key</guimenu>.
     </para>
    </step>
    <step>
     <para>
      In the <guimenu>Key type</guimenu> field, select <literal>JSON</literal>
      and click <guimenu>Create</guimenu>. Save the file to a secure location.
      This will be required when deploying the GCP Service Broker application.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Done</guimenu> to finish creating the service account.
     </para>
    </step>
   </procedure>
  </sect2>
  <sect2 xml:id="sec-cap-gke-service-broker-database">
   <title>Create a Database for the GCP Service Broker</title>

   <para>
    The GCP Service Broker requires a database to store information about the
    resources it provisions. Any database that adheres to the &mysql; protocol
    may be used, but it is recommended to use a GCP Cloud SQL instance, as
    outlined in the following steps.
   </para>
   <procedure>
    <step>
     <para>
      From the GCP console, click the <guimenu>Navigation menu</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Under the <guimenu>Storage</guimenu> section, click
      <guimenu>SQL</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Create Instance</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Choose &mysql;</guimenu> to select &mysql; as the database
      engine.
     </para>
    </step>
    <step>
     <para>
      In the <guimenu>Instance ID</guimenu> field, enter an identifier for &mysql;
      instance.
     </para>
    </step>
    <step>
     <para>
      In the <guimenu>Root password</guimenu> field, set a password for the root
      user.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Show configuration options</guimenu> to see additonal
      configuration options.
     </para>
    </step>
    <step>
     <para>
      Under the <guimenu>Set connectivity</guimenu> section, click
      <guimenu>Add network</guimenu> to add an authorized network.
     </para>
    </step>
    <step>
     <para>
      In the <guimenu>Network</guimenu> field, enter
      <literal>0.0.0.0/0</literal> and click <guimenu>Done</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Optionally, create SSL certificates for the database and store them in a
      secure location.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Create</guimenu> and wait for the &mysql; instance to finish
      creating.
     </para>
    </step>
    <step>
     <para>
      After the &mysql; instance is finished creating, connect to it using either
      the Cloud Shell or the <command>mysql</command> command line client.
     </para>
     <itemizedlist>
      <listitem>
       <para>
        To connect using Cloud Shell:
       </para>
       <procedure>
        <step>
         <para>
          Click on the instance ID of the &mysql; instance.
         </para>
        </step>
        <step>
         <para>
          In the <guimenu>Connect to this instance</guimenu> section of the
          <guimenu>Overview</guimenu> tab, click
          <guimenu>Connect using Cloud Shell</guimenu>.
         </para>
        </step>
        <step>
         <para>
          After the shell is opened, the <command>gcloud sql connect</command>
          command is displayed. Press <keycap>Enter</keycap> to connect to the
          &mysql; instance as the root user.
         </para>
        </step>
        <step>
         <para>
          When prompted, enter the password for the root user set in an earlier
          step.
         </para>
        </step>
       </procedure>
      </listitem>
      <listitem>
       <para>
        To connect using the <command>mysql</command> command line client:
       </para>
       <procedure>
        <step>
         <para>
          Click on the instance ID of the &mysql; instance.
         </para>
        </step>
        <step>
         <para>
          In the <guimenu>Connect to this instance</guimenu> section of the
          <guimenu>Overview</guimenu> tab, take note of the IP address. For
          example, <replaceable>11.22.33.44</replaceable>.
         </para>
        </step>
        <step>
         <para>
          Using the <command>mysql</command> command line client, run the
          following command.
         </para>
<screen>&prompt.user;mysql -h <replaceable>11.22.33.44</replaceable> -u root -p</screen>
        </step>
        <step>
         <para>
          When prompted, enter the password for the root user set in an earlier
          step.
         </para>
        </step>
       </procedure>
      </listitem>
     </itemizedlist>
    </step>
    <step>
     <para>
      After connecting to the &mysql; instance, run the following commands to
      create an initial user. The service broker will use this user to connect
      to the service broker database.
     </para>
<screen>CREATE DATABASE servicebroker;
CREATE USER '<replaceable>gcpdbuser</replaceable>'@'%' IDENTIFIED BY '<replaceable>gcpdbpassword</replaceable>';
GRANT ALL PRIVILEGES ON servicebroker.* TO '<replaceable>gcpdbuser</replaceable>'@'%' WITH GRANT OPTION;
</screen>
     <para>
      Where:
     </para>
     <variablelist>
      <varlistentry>
       <term>gcpdbuser</term>
       <listitem>
        <para>
         Is the username of the user the service broker will connect to the
	 service broker database with. Replace
	 <replaceable>gcpdbuser</replaceable> with a username of your choosing.
	</para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>gcpdbpassword</term>
       <listitem>
        <para>
         Is the password of the user the service broker will connect to the
	 service broker database with. Replace
	 <replaceable>gcpdbpassword</replaceable> with a secure password of your
	 choosing.
	</para>
       </listitem>
      </varlistentry>
     </variablelist>
    </step>
   </procedure>
  </sect2>
  <sect2 xml:id="sec-cap-gke-service-broker-deploy">
   <title>Deploy the Service Broker</title>

   <para>
    The GCP Service Broker can be deployed as a &cf; application onto your
    deployment of &productname;.
   </para>
   <procedure>
    <step>
     <para>
      Get the GCP Service Broker application from Github and change to the GCP
      Service Broker application directory.
     </para>
<screen>&prompt.user;git clone https://github.com/GoogleCloudPlatform/gcp-service-broker
&prompt.user;cd gcp-service-broker
</screen>
    </step>
    <step>
     <para>
      Update the <filename>manifest.yml</filename> file and add the environment
      variables below and their associated values to the <literal>env</literal>
      section:
     </para>
     <variablelist>
      <varlistentry>
       <term>ROOT_SERVICE_ACCOUNT_JSON</term>
       <listitem>
        <para>
         The contents, as a string, of the JSON key file created for the service
	 account created earlier (see
	 <xref linkend="sec-cap-gke-service-broker-service-account"/>).
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>SECURITY_USER_NAME</term>
       <listitem>
        <para>
	 The username to authenticate broker requests. This will be the same one
	 used in the <command>cf create-service-broker</command> command. In the
	 examples, this is <replaceable>cfgcpbrokeruser</replaceable>.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>SECURITY_USER_PASSWORD</term>
       <listitem>
        <para>
	 The password to authenticate broker requests. This will be the same one
	 used in the <command>cf create-service-broker</command> command. In the
	 examples, this is <replaceable>cfgcpbrokerpassword</replaceable>.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>DB_HOST</term>
       <listitem>
        <para>
	 The host for the service broker database created earlier (see
	 <xref linkend="sec-cap-gke-service-broker-database"/>. This can be
	 found in the GCP console by clicking on the name of the database
	 instance and examining the <guimenu>Connect to this instance</guimenu>
	 section of the <guimenu>Overview</guimenu> tab. In the examples, this
	 is <replaceable>11.22.33.44</replaceable>.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>DB_USERNAME</term>
       <listitem>
        <para>
         The username used to connect to the service broker database. This was
	 created by the <command>mysql</command> commands earlier while
	 connected to the service broker database instance (see
	 <xref linkend="sec-cap-gke-service-broker-database"/>). In the
	 examples, this is <replaceable>gcpdbuser</replaceable>.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>DB_PASSWORD</term>
       <listitem>
        <para>
	 The password of the user used to connect to the service broker
	 database. This was created by the <command>mysql</command> commands
	 earlier while connected to the service broker database instance (see
	 <xref linkend="sec-cap-gke-service-broker-database"/>). In the
	 examples, this is <replaceable>gcpdbpassword</replaceable>.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      The <filename>manifest.yml</filename> should look similar to the example
      below.
     </para>
<screen>### example manifest.yml for the GCP Service Broker
---
applications:
- name: gcp-service-broker
  memory: 1G
  buildpacks:
  - go_buildpack
  env:
    GOPACKAGENAME: github.com/GoogleCloudPlatform/gcp-service-broker
    GOVERSION: go1.12
    ROOT_SERVICE_ACCOUNT_JSON: <replaceable>'{ ... }'</replaceable>
    SECURITY_USER_NAME: <replaceable>cfgcpbrokeruser</replaceable>
    SECURITY_USER_PASSWORD: <replaceable>cfgcpbrokerpassword</replaceable>
    DB_HOST: <replaceable>11.22.33.44</replaceable>
    DB_USERNAME: <replaceable>gcpdbuser</replaceable>
    DB_PASSWORD: <replaceable>gcpdbpassword</replaceable>
</screen>
    </step>
    <step>
     <para>
      After updating the <filename>manifest.yml</filename> file, deploy the
      service broker as an application to your &cap; deployment. Specify a
      health check type of <literal>none</literal>.
     </para>
<screen>&prompt.user;cf push --health-check-type none</screen>
    </step>
    <step>
     <para>
      After the service broker application is deployed, take note of the URL
      displayed in the <literal>route</literal> field. Alternatively, run
      <command>cf app gcp-service-broker</command> to find the URL in the
      <literal>route</literal> field. On a browser, go to the route (for
      example,
      <replaceable>https://gcp-service-broker.example.com</replaceable>). You
      should see the documentation for the GCP Service Broker.
     </para>
    </step>
    <step>
     <para>
      Create the service broker in &scf; using the &cfcli;.
     </para>
<screen>&prompt.user;cf create-service-broker <replaceable>gcp-service-broker</replaceable> <replaceable>cfgcpbrokeruser</replaceable> <replaceable>cfgcpbrokerpassword</replaceable> <replaceable>https://gcp-service-broker.example.com</replaceable></screen>
     <para>
      Where <replaceable>https://gcp-service-broker.example.com</replaceable> is
      replaced by the URL of the GCP Service Broker application deployed
      to &productname;. Find the URL using
      <command>cf app gcp-service-broker</command> and examining the
      <literal>routes</literal> field.
     </para>
    </step>
    <step>
     <para>
      Verify the service broker has been successfully registered.
     </para>
<screen>&prompt.user;cf service-brokers</screen>
    </step>
    <step>
     <para>
      List the available services and their associated plans for the GCP Service
      Broker. For more information about the services, see
      <link xlink:href="https://github.com/GoogleCloudPlatform/gcp-service-broker/tree/master#open-service-broker-for-google-cloud-platform"/>.
     </para>
<screen>&prompt.user;cf service-access -b <replaceable>gcp-service-broker</replaceable></screen>
    </step>
    <step>
     <para>
      Enable access to a service. This example enables access to the Google
      CloudSQL &mysql; service (see
      <link xlink:href="https://cloud.google.com/sql/"/>).
     </para>
<screen>&prompt.user;cf enable-service-access <replaceable>google-cloudsql-mysql</replaceable></screen>
    </step>
    <step>
     <para>
      Create an instance of the Google CloudSQL &mysql; service. This example uses
      the <literal>mysql-db-f1-micro</literal> plan. Use the
      <command>-c</command> flag to pass optional parameters when provisioning a
      service. See <link xlink:href="https://github.com/GoogleCloudPlatform/gcp-service-broker/blob/master/docs/use.md"/> for the parameters that can be set for each service.
     </para>
<screen>&prompt.user;cf create-service <replaceable>google-cloudsql-mysql</replaceable> <replaceable>mysql-db-f1-micro</replaceable> <replaceable>mydb-instance</replaceable></screen>
     <para>
      Wait for the service to finish provisioning. Check the status using the
      GCP console or with the following command.
     </para>
<screen>&prompt.user;cf service <replaceable>mydb-instance</replaceable> | grep status</screen>
     <para>
      The service can now be bound to applications and used.
     </para>
    </step>
   </procedure>
  </sect2>
 </sect1>

 <!-- Begin optional features -->

 <sect1 xml:id="sec-cap-gke-ldap">
  <!-- Entry defined in xml/repeated-content-decl.ent -->
  &ldap;
 </sect1>

 <!-- End optional features -->

 <!-- sect1 for PV resizing -->
 <!-- &resize-persistent-volume; -->

 <sect1 xml:id="sec-cap-gke-add-capacity">
  <title>Expanding Capacity of a &cap; Deployment on &gke;</title>

  <para>
   If the current capacity of your &cap; deployment is insufficient for your
   workloads, you can expand the capacity using the procedure in this section.
  </para>

  <para>
   These instructions assume you have followed the procedure in
   <xref linkend="cha-cap-depl-gke"/> and have a running &cap; deployment on
   &aks;. The instructions below will use environment variables defined in
   <xref linkend="sec-cap-create-gke-cluster"/>.
  </para>

  <procedure>
   <step>
    <para>
     Get the most recently created node in the cluster.
    </para>
<screen>&prompt.user;RECENT_VM_NODE=$(gcloud compute instances list --filter=name~${CLUSTER_NAME:?required} --format json | jq --raw-output '[sort_by(.creationTimestamp) | .[].creationTimestamp ] | last | .[0:19] | strptime("%Y-%m-%dT%H:%M:%S") | mktime')</screen>
   </step>
   <step>
    <para>
     <!-- https://cloud.google.com/kubernetes-engine/docs/how-to/resizing-a-cluster -->
     Increase the &kube; node count in the cluster. Replace the example value
     with the number of nodes required for your workload.
    </para>
<screen>&prompt.user;gcloud container clusters resize $CLUSTER_NAME \
--num-nodes <replaceable>4</replaceable>
</screen>
   </step>
   <step>
    <para>
     Verify the new nodes are in a <literal>Ready</literal> state before proceeding.
    </para>
<screen>&prompt.user;kubectl get nodes</screen>
   </step>
   <step>
    <para>
     Add or update the following in your
     &values-filename; file to increase the number of
     <literal>diego-cell</literal> in your &cap; deployment. Replace the
     example value with the number required by your workflow.
    </para>
<screen>sizing:
  diego_cell:
    count: <replaceable>4</replaceable>
</screen>
   </step>
   <step>
    <para>
     Perform a <command>helm upgrade</command> to apply the change.
    </para>
<screen>&prompt.user;helm upgrade susecf-scf suse/cf \
--values &values-file; \
--version &kubecf_chart;
</screen>
   </step>
   <step>
    <para>
     Monitor progress of the additional <literal>diego-cell</literal> pods:
    </para>
<screen>&prompt.user;watch --color 'kubectl get pods --namespace scf'</screen>
   </step>
  </procedure>
 </sect1>
</chapter>
