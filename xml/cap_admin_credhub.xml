<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha-cap-credhub"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>Integrating CredHub with &productname;</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  &productname; supports CredHub integration. You should already have a working
  CredHub instance, a CredHub service on your cluster, then apply the steps in
  this chapter to connect &productname;.
 </para>
 <sect1 xml:id="sec-cap-credhub">
  <title>Installing the CredHub Client</title>

  <para>
   Start by creating a new directory for the CredHub client on your local
   workstation, then download and unpack the CredHub client. The following
   example is for the 2.2.0 Linux release. For other platforms and current
   releases, see the cloudfoundry-incubator/credhub-cli at
   <link xlink:href="https://github.com/cloudfoundry-incubator/credhub-cli/releases"/>
  </para>

<screen>&prompt.user;mkdir <replaceable>chclient</replaceable>
&prompt.user;cd <replaceable>chclient</replaceable>
&prompt.user;wget https://github.com/cloudfoundry-incubator/credhub-cli/releases/download/2.2.0/credhub-linux-2.2.0.tgz
&prompt.user;tar zxf credhub-linux-2.2.0.tgz
</screen>
 </sect1>
 <sect1 xml:id="sec-cap-credhub-enable">
  <title>Enabling and Disabling CredHub</title>

  <para>
   Enable CredHub for your deployment using the <command>--set "enable.credhub=true"</command>
   flag when running <command>helm install</command> or <command>helm upgrade</command>.
  </para>

  <para>
   If this is an initial deployment, use <command>helm install</command> to deploy
   <literal>scf</literal> with CredHub enabled:
  </para>

  &uaa-ca-cert-note;

<screen>&prompt.user;kubectl create namespace <replaceable>scf</replaceable>

&prompt.user;helm install <replaceable>susecf-scf</replaceable> suse/cf \
--namespace <replaceable>scf</replaceable> \
--values scf-config-values.yaml \
--set "enable.credhub=true"</screen>

 <para>
  If this is an existing deployment, use <command>helm upgrade</command> to enable
  CredHub:
 </para>

<screen>&prompt.user;helm upgrade <replaceable>susecf-scf</replaceable> suse/cf \
--values scf-config-values.yaml \
--set "secrets.UAA_CA_CERT=${CA_CERT}" \
--set "enable.credhub=true" \
--version &latestscfchart;
</screen>

 <warning>
  <para>
   On occasion, the <literal>credhub</literal> pod may fail to start due to
   database migration failures; this has been spotted intermittently on
   &aks-full; and to a lesser extent, other public clouds.
   In these situations, manual intervention is required to track the last
   completed transaction in <literal>credhub_user</literal> database and
   update the flyway schema history table with the record of the last
   completed transaction. Please contact support for further instructions.
  </para>
 </warning>

 <para>
  To disable CredHub, run <command>helm upgrade</command> with the
  <command>--set "enable.credhub=false"</command> flag. Be sure to
  pass your <literal>uaa</literal> secret and certificate to <literal>scf</literal>
  first:
 </para>

<screen>&prompt.user;SECRET=$(kubectl get pods --namespace uaa \
--output jsonpath='{.items[?(.metadata.name=="uaa-0")].spec.containers[?(.name=="uaa")].env[?(.name=="INTERNAL_CA_CERT")].valueFrom.secretKeyRef.name}')

&prompt.user;CA_CERT="$(kubectl get secret $SECRET --namespace uaa \
--output jsonpath="{.data['internal-ca-cert']}" | base64 --decode -)"

&prompt.user;helm upgrade <replaceable>susecf-scf</replaceable> suse/cf \
--values scf-config-values.yaml \
--set "secrets.UAA_CA_CERT=${CA_CERT}" \
--set "enable.credhub=false" \
--version &latestscfchart;
</screen>
 </sect1>
 <sect1 xml:id="sec-cap-credhub-upgrade-considerations">
  <title>Upgrade Considerations</title>

  <para>
   The following applies to upgrades from &productname; 1.3.1 to &productname; 1.4:
  </para>

  <para>
   If CredHub is enabled on your deployment of &productname; 1.3.1, then you must
   specify <command>--set "enable.credhub=true"</command> during the upgrade to
   keep the feature installed. Sizing values previously set to have a count of 1,
   which is the new minimum setting, to enable the service no longer need to be
   set explicitly. The following values in your <filename>scf-config-values.yaml</filename>
   file can be removed:
  </para>

<screen>sizing:
  credhub_user:
    count: 1</screen>

 </sect1>
 <sect1 xml:id="sec-cap-credhub-connect">
  <title>Connecting to the CredHub Service</title>

  <para>
   Set environment variables for the CredHub client, your CredHub service
   location, and &cap; namespace. In these guides the example namespace is
   <literal>scf</literal>:
  </para>

<screen>&prompt.user;CH_CLI=~/.chclient/credhub
&prompt.user;CH_SERVICE=<replaceable>https://credhub.example.com</replaceable>
&prompt.user;NAMESPACE=<replaceable>scf</replaceable>
</screen>

  <para>
   Set up the CredHub service location:
  </para>

<screen>
&prompt.user;SECRET="$(kubectl get secrets --namespace "${NAMESPACE}" | awk '/^secrets-/ { print $1 }')"
&prompt.user;CH_SECRET="$(kubectl get secrets --namespace "${NAMESPACE}" "${SECRET}" --output jsonpath="{.data['uaa-clients-credhub-user-cli-secret']}"|base64 --decode)"
&prompt.user;CH_CLIENT=credhub_user_cli
&prompt.user;echo Service ......@ $CH_SERVICE
&prompt.user;echo CH cli Secret @ $CH_SECRET
</screen>

  <para>
   Set the CredHub target through its &kube; service, then log into CredHub:
  </para>

<screen>
&prompt.user;"${CH_CLI}" api --skip-tls-validation --server "${CH_SERVICE}"
&prompt.user;"${CH_CLI}" login --client-name="${CH_CLIENT}" --client-secret="${CH_SECRET}"
</screen>

  <para>
   Test your new connection by inserting and retrieving some fake credentials:
  </para>

<screen>
&prompt.user;"${CH_CLI}" set --name FOX --type value --value 'fox over lazy dog'
&prompt.user;"${CH_CLI}" set --name DOG --type user --username dog --password fox
&prompt.user;"${CH_CLI}" get --name FOX
&prompt.user;"${CH_CLI}" get --name DOG
</screen>
 </sect1>
</chapter>
