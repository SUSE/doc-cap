<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha.cap.certificates"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>Managing Certificates</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  This chapter describes the process to deploy &productname;
  installed with certificates signed by an external Certificate Authority.
 </para>
 <sect1 xml:id="sec.cap.cert-properties">
  <title>Certificate Characteristics</title>

  <para>
   Ensure the certificates you use have the following characteristics:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     The certificate is encoded in the PEM format.
    </para>
   </listitem>
   <listitem>
    <para>
     In order to secure <literal>uaa</literal>-related traffic, the certificate's
     Subject Alternative Name (SAN) should include the domains
     <replaceable>uaa.example.com</replaceable> and
     <replaceable>*.uaa.example.com</replaceable>, where <replaceable>example.com</replaceable>
     is replaced with the <literal>DOMAIN</literal> set in your
     <filename>scf-config-values.yaml</filename>.
    </para>
   </listitem>
   <listitem>
    <para>
     In order to secure <literal>scf</literal>-related traffic, the certificate's
     Subject Alternative Name (SAN) should include the domain
     <replaceable>*.example.com</replaceable>, where <replaceable>example.com</replaceable>
     is replaced with the <literal>DOMAIN</literal> in your
     <filename>scf-config-values.yaml</filename>.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="sec.cap.cert-config">
  <title>Deployment Configuration</title>

  <para>
   Certificates used in &productname; are installed through a configuration file,
   called <filename>scf-config-values.yaml</filename>. To specify a
   certificate, set the value of the certificate and its corresponding private
   key under the <literal>secrets:</literal> section.
  </para>

  <note>
   <para>
    Note the use of the "|" character which indicates the use of a literal
    scalar. See the
    <link xlink:href="http://yaml.org/spec/1.2/spec.html#id2795688"/> for more information.
   </para>
  </note>

  <para>
   Certificates are installed to the <literal>uaa</literal> component by setting
   the values <literal>UAA_SERVER_CERT</literal> and <literal>UAA_SERVER_KEY</literal>.
   For example:
  </para>

<screen>secrets:
  UAA_SERVER_CERT: |
    -----BEGIN CERTIFICATE-----
    MIIFnzCCA4egAwIBAgICEAMwDQYJKoZIhvcNAQENBQAwXDELMAkGA1UEBhMCQ0Ex
    CzAJBgNVBAgMAkJDMRIwEAYDVQQHDAlWYW5jb3V2ZXIxETAPBgNVBAoMCE15Q2Fw
    T3JnMRkwFwYDVQQDDBBNeUNhcE9yZyBSb290IENBMB4XDTE4MDkxNDIyNDMzNVoX
    ...
    IqhPRKYBFHPw6RxVTjG/ClMsFvOIAO3QsK+MwTRIGVu/MNs0wjMu34B/zApLP+hQ
    3ZxAt/z5Dvdd0y78voCWumXYPfDw9T94B4o58FvzcM0eR3V+nVtahLGD2r+DqJB0
    3xoI
    -----END CERTIFICATE-----

  UAA_SERVER_KEY: |
    -----BEGIN PRIVATE KEY-----
    MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDhRlcoZAVwUkg0
    sdExkBnPenhLG5FzQM3wm9t4erbSQulKjeFlBa9b0+RH6gbYDHh5+NyiL0L89txO
    JHNRGEmt+4zy+9bY7e2syU18z1orOrgdNq+8QhsSoKHJV2w+0QZkSHTLdWmAetrA
    ...
    ZP5BpgjrT2lGC1ElW/8AFM5TxkkOPMzDCe8HRXPUUw+2YDzyKY1YgkwOMpHlk8Cs
    wPQYJsrcObenRwsGy2+A6NiIg2AVJwHASFG65taoV+1A061P3oPDtyIH/UPhRUoC
    OULPS8fbHefNiSvZTNVKwj8=
    -----END PRIVATE KEY-----
</screen>
 
  <para>
   Certificates are installed to the <literal>scf</literal> component by setting
   the values <literal>ROUTER_SSL_CERT</literal> and <literal>ROUTER_SSL_KEY</literal>.
   In addition, set <literal>UAA_CA_CERT</literal> with the root certificate of the
   Certificate Authority used to sign your certificate. For example:
  </para>

<screen>secrets:
  ROUTER_SSL_CERT: |
    -----BEGIN CERTIFICATE-----
    MIIEEjCCAfoCCQCWC4NErLzy3jANBgkqhkiG9w0BAQsFADBGMQswCQYDVQQGEwJD
    QTETMBEGA1UECAwKU29tZS1TdGF0ZTEOMAwGA1UECgwFTXlPcmcxEjAQBgNVBAMM
    CU15Q0Euc2l0ZTAeFw0xODA5MDYxNzA1MTRaFw0yMDAxMTkxNzA1MTRaMFAxCzAJ
    ...
    xtNNDwl2rnA+U0Q48uZIPSy6UzSmiNaP3PDR+cOak/mV8s1/7oUXM5ivqkz8pEJo
    M3KrIxZ7+MbdTvDOh8lQplvFTeGgjmUDd587Gs4JsormqOsGwKd1BLzQbGELryV9
    1usMOVbUuL8mSKVvgqhbz7vJlW1+zwmrpMV3qgTMoHoJWGx2n5g=
    -----END CERTIFICATE-----

  ROUTER_SSL_KEY: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEpAIBAAKCAQEAm4JMchGSqbZuqc4LdryJpX2HnarWPOW0hUkm60DL53f6ehPK
    T5Dtb2s+CoDX9A0iTjGZWRD7WwjpiiuXUcyszm8y9bJjP3sIcTnHWSgL/6Bb3KN5
    G5D8GHz7eMYkZBviFvygCqEs1hmfGCVNtgiTbAwgBTNsrmyx2NygnF5uy4KlkgwI
    ...
    GORpbQKBgQDB1/nLPjKxBqJmZ/JymBl6iBnhIgVkuUMuvmqES2nqqMI+r60EAKpX
    M5CD+pq71TuBtbo9hbjy5Buh0+QSIbJaNIOdJxU7idEf200+4anzdaipyCWXdZU+
    MPdJf40awgSWpGdiSv6hoj0AOm+lf4AsH6yAqw/eIHXNzhWLRvnqgA==
    -----END RSA PRIVATE KEY----

  UAA_CA_CERT: |
    -----BEGIN CERTIFICATE-----
    MIIDaSjCAjKgAwIBAgIQRK+wgNajJ7qJMDmGLvhAazANBgkqhkiG9w0BAQUFADA/
    MTQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT
    DkITVCBSb290IENBIFg7MB4XDTAwMDkzMDIxMTIxOVoXDTIxMDkzMDE0MDExNVow
    ...
    R8srzJmwN0jP41ZL9c8PDHIyh8bwRLtTcm1D9SZImlJnt1ir/md2cXjbDaJWFBM5
    NvaEkqgCWjBH4d1QB7wCCZAA62RjYJsWvIjJEubSfZGL+T0yjWW06XyxV3bqxbYo
    NTQVZRzI9neWagqNdwvYkQsEjgfbKbYK7p2MEIAL
    -----END CERTIFICATE-----
</screen>

  <sect2 xml:id="sec.cap.cert-multiple">
   <title>Configuring Multiple Certificates</title>
   <para>
    &cap; supports configurations that use multiple certificates. To specify
    multiple certificates with their associated keys, replace the
    <literal>ROUTER_SSL_CERT</literal> and <literal>ROUTER_SSL_KEY</literal>
    properties with the <literal>ROUTER_TLS_PEM</literal> property in your
    <filename>scf-config-values.yaml</filename> file.
   </para>
<screen>secrets:
  ROUTER_TLS_PEM: |
    - cert_chain: |
        -----BEGIN CERTIFICATE-----
        MIIEDzCCAfcCCQCWC4NErLzy9DANBgkqhkiG9w0BAQsFADBGMQswCQYDVQQGEwJD
        QTETMBEGA1UECAwKU29tZS1TdGF0ZTEOMAwGA1UECgwFTXlPcmcxEjAQBgNVBAMM
        opR9hW2YNrMYQYfhVu4KTkpXIr4iBrt2L+aq2Rk4NBaprH+0X6CPlYg+3edC7Jc+
	...
        ooXNKOrpbSUncflZYrAfYiBfnZGIC99EaXShRdavStKJukLZqb3iHBZWNLYnugGh
        jyoKpGgceU1lwcUkUeRIOXI8qs6jCqsePM6vak3EO5rSiMpXMvLO8WMaWsXEfcBL
        dglVTMCit9ORAbVZryXk8Xxiham83SjG+fOVO4pd0R8UuCE=
        -----END CERTIFICATE-----
      private_key: |
        -----BEGIN RSA PRIVATE KEY-----
        MIIEpAIBAAKCAQEA0HZ/aF64ITOrwtzlRlDkxf0b4V6MFaaTx/9UIQKQZLKT0d7u
        3Rz+egrsZ90Jk683Oz9fUZKtgMXt72CMYUn13TTYwnh5fJrDM1JXx6yHJyiIp0rf
        3G6wh4zzgBosIFiadWPQgL4iAJxmP14KMg4z7tNERu6VXa+0OnYT0DBrf5IJhbn6
	...
        ja0CsQKBgQCNrhKuxLgmQKp409y36Lh4VtIgT400jFOsMWFH1hTtODTgZ/AOnBZd
        bYFffmdjVxBPl4wEdVSXHEBrokIw+Z+ZhI2jf2jJkge9vsSPqX5cTd2X146sMUSy
        o+J1ZbzMp423AvWB7imsPTA+t9vfYPSlf+Is0MhBsnGE7XL4fAcVFQ==
        -----END RSA PRIVATE KEY-----
    - cert_chain: |
        -----BEGIN CERTIFICATE-----
        MIIEPzCCAiegAwIBAgIJAJYLg0SsvPL1MA0GCSqGSIb3DQEBCwUAMEYxCzAJBgNV
        BAYTAkNBMRMwEQYDVQQIDApTb21lLVN0YXRlMQ4wDAYDVQQKDAVNeU9yZzESMBAG
        A1UEAwwJTXlDQS5zaXRlMB4XDTE4MDkxNzE1MjQyMVoXDTIwMDEzMDE1MjQyMVow
	...
        FXrgM9jVBGXeL7T/DNfJp5QfRnrQq1/NFWafjORXEo9EPbAGVbPh8LiaEqwraR/K
        cDuNI7supZ33I82VOrI4+5mSMxj+jzSGd2fRAvWEo8E+MpHSpHJt6trGa5ON57vV
        duCWD+f1swpuuzW+rNinrNZZxUQ77j9Vk4oUeVUfL91ZK4k=
        -----END CERTIFICATE-----
      private_key: |
        -----BEGIN RSA PRIVATE KEY-----
        MIIEowIBAAKCAQEA5kNN9ZZK/UssdUeYSajG6xFcjyJDhnPvVHYA0VtgVOq8S/rb
        irVvkI1s00rj+WypHqP4+l/0dDHTiclOpUU5c3pn3vbGaaSGyonOyr5Cbx1X+JZ5
        17b+ah+oEnI5pUDn7chGI1rk56UI5oV1Qps0+bYTetEYTE1DVjGOHl5ERMv2QqZM
	...
        rMMhAoGBAMmge/JWThffCaponeakJu63DHKz87e2qxcqu25fbo9il1ZpllOD61Zi
        xd0GATICOuPeOUoVUjSuiMtS7B5zjWnmk5+siGeXF1SNJCZ9spgp9rWA/dXqXJRi
        55w7eGyYZSmOg6I7eWvpYpkRll4iFVApMt6KPM72XlyhQOigbGdJ
        -----END RSA PRIVATE KEY-----</screen>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.cap.cert-deploy">
  <title>Deploying &productname; with Certificates</title>

  <para>
   Once the certificate-related values have been set in your
   <filename>scf-config-values.yaml</filename>, deploy &productname;.
  </para>
  
  <para>
   If this is an initial deployment, use <command>helm install</command> to
   deploy <literal>uaa</literal> and <literal>scf</literal>:
  </para>

  <procedure>
   <step>
    <para>
     Deploy <literal>uaa</literal>:
    </para>
<screen>&prompt.user;helm install suse/uaa \
--name <replaceable>susecf-uaa</replaceable> \
--namespace uaa \
--values scf-config-values.yaml
</screen>
   </step>
   <step>
    <para>
     Wait until you have a successful <literal>uaa</literal> deployment before
     going to the next steps, which you can monitor with the
     <command>watch</command> command:
    </para>
<screen>&prompt.user;watch -c 'kubectl get pods --namespace uaa'</screen>
   </step>
   <step>
    <para>
     Pass your <literal>uaa</literal> secret and certificate to <literal>scf</literal>:
    </para>
<screen>&prompt.user;SECRET=$(kubectl get pods --namespace uaa \
-o jsonpath='{.items[?(.metadata.name=="uaa-0")].spec.containers[?(.name=="uaa")].env[?(.name=="INTERNAL_CA_CERT")].valueFrom.secretKeyRef.name}')

&prompt.user;CA_CERT="$(kubectl get secret $SECRET --namespace uaa \
-o jsonpath="{.data['internal-ca-cert']}" | base64 --decode -)"
</screen>
   </step>
   <step>
    <para>
     Deploy <literal>scf</literal>:
    </para>
<screen>&prompt.user;helm install suse/cf \
--name <replaceable>susecf-scf</replaceable> \
--namespace scf \
--values scf-config-values.yaml
</screen>
   </step>
   <step>
    <para>
     Monitor the deployment progress using the <command>watch</command> command:
    </para>
<screen>&prompt.user;watch -c 'kubectl get pods --namespace scf'</screen>
   </step>
  </procedure>

  <para>
   If this is an existing deployment, use <command>helm upgrade</command> to
   apply the changes to <literal>uaa</literal> and <literal>scf</literal>:
  </para>

  <procedure>
   <step>
    <para>
     Upgrade <literal>uaa</literal>:
    </para>
<screen>&prompt.user;helm upgrade <replaceable>susecf-uaa</replaceable> suse/uaa \
--values scf-config-values.yaml
</screen>
   </step>
   <step>
    <para>
     Wait until you have a successful <literal>uaa</literal> deployment before
     going to the next steps, which you can monitor with the
     <command>watch</command> command:
    </para>
<screen>&prompt.user;watch -c 'kubectl get pods --namespace uaa'</screen>
   </step>
   <step>
    <para>
     Upgrade <literal>scf</literal>:
    </para>
<screen>&prompt.user;helm upgrade <replaceable>susecf-scf</replaceable> suse/cf \
--values scf-config-values.yaml
</screen>
   </step>
   <step>
    <para>
     Monitor the deployment progress using the <command>watch</command> command:
    </para>
<screen>&prompt.user;watch -c 'kubectl get pods --namespace scf'</screen>
   </step>
  </procedure>

  <para>
   Once all pods are up and running, verify you can successfully set your cluster as the
   target API endpoint by running the <command>cf api</command> command without using the
   <command>--skip-ssl-validation</command> option.
  </para>

<screen>&prompt.user;cf api https://api.example.com</screen>

 </sect1>
 <sect1 xml:id="sec.cap.secrets-rotation">
  <title>Rotating Automatically Generated Secrets</title>

  <para>
   &cap; uses a number of automatically generated secrets for use internally.
   These secrets have a default expiration of 10950 days and are set through
   the <literal>CERT_EXPIRATION</literal> property in the
   <literal>env:</literal> section of the <filename>scf-config-values.yaml</filename>
   file. If rotation of the secrets is required, increment the value of
   <literal>secrets_generation_counter</literal> in the
   <literal>kube:</literal> section of the <filename>scf-config-values.yaml</filename>
   configuration file (for example the example
   <filename>scf-config-values.yaml</filename> used in this guide) then run
   <command>helm upgrade</command>.
  </para>

  <para>
   This example demonstrates rotating the secrets of the <literal>scf</literal>
   deployment.
  </para>

  <para>
   First, update the <filename>scf-config-values.yaml</filename> file.
  </para>

<screen>kube:
  # Increment this counter to rotate all generated secrets
  secrets_generation_counter: 2</screen>

  <para>
   Next, perform a <command>helm upgrade</command> to apply the change.
  </para>

<screen>&prompt.user;SECRET=$(kubectl get pods --namespace uaa \
-o jsonpath='{.items[?(.metadata.name=="uaa-0")].spec.containers[?(.name=="uaa")].env[?(.name=="INTERNAL_CA_CERT")].valueFrom.secretKeyRef.name}')

&prompt.user;CA_CERT="$(kubectl get secret $SECRET --namespace uaa \
 -o jsonpath="{.data['internal-ca-cert']}" | base64 --decode -)"

&prompt.user;helm upgrade <replaceable>susecf-scf</replaceable> suse/cf \
 --values scf-config-values.yaml --set "secrets.UAA_CA_CERT=${CA_CERT}"</screen>
 </sect1>
</chapter>
