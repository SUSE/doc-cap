<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha-cap-app-autoscaler"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>App-AutoScaler</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  The App-AutoScaler service is used for automatically managing an
  application's instance count when deployed on &scf;. The scaling behavior is
  determined by a set of criteria defined in a policy (See
  <xref linkend="sec-cap-app-autoscaler-policies"/>).
 </para>
 <sect1 xml:id="sec-cap-app-autoscaler-prereqs">
  <title>Prerequisites</title>

  <para>
   Using the App-AutoScaler service requires:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     A running deployment of <literal>scf</literal>
    </para>
   </listitem>

   <!-- listitem Links to CF CLI -->
   &cfcli-prereq;

   <listitem>
    <para>
     The &cf; CLI AutoScaler Plug-in, see <link xlink:href="https://github.com/cloudfoundry/app-autoscaler-cli-plugin"/>
    </para>
    <para>
     The plugin can be installed by running the following command:
    </para>
<screen>&prompt.user;cf install-plugin -r CF-Community app-autoscaler-plugin</screen>
    <para>
      If the plugin repo is not found, add it first:
    </para>
<screen>&prompt.user;cf add-plugin-repo "CF-Community" "https://plugins.cloudfoundry.org"</screen>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="sec-cap-enable-app-autoscaler">
  <title>Enabling and Disabling the App-AutoScaler Service</title>

  <para>
   By default, the App-AutoScaler service is not enabled as part of a &scf;
   deployment. To enable it, run <command>helm upgrade</command> with the
   <command>--set "enable.autoscaler=true"</command> flag on an existing
   <literal>scf</literal> deployment. Be sure to pass your
   <literal>uaa</literal> secret and certificate to <literal>scf</literal>
   first:
  </para>

<screen>&prompt.user;SECRET=$(kubectl get pods --namespace uaa \
--output jsonpath='{.items[?(.metadata.name=="uaa-0")].spec.containers[?(.name=="uaa")].env[?(.name=="INTERNAL_CA_CERT")].valueFrom.secretKeyRef.name}')

&prompt.user;CA_CERT="$(kubectl get secret $SECRET --namespace uaa \
--output jsonpath="{.data['internal-ca-cert']}" | base64 --decode -)"

&prompt.user;helm upgrade <replaceable>susecf-scf</replaceable> suse/cf \
--values scf-config-values.yaml \
--set "secrets.UAA_CA_CERT=${CA_CERT}" \
--set "enable.autoscaler=true" \
--version &cf_chart;
</screen>

  <para>
   To disable the App-AutoScaler service, run <command>helm upgrade</command>
   with the <command>--set "enable.autoscaler=false"</command> flag. Be sure to
   pass your <literal>uaa</literal> secret and certificate to <literal>scf</literal>
   first:
  </para>

<screen>&prompt.user;SECRET=$(kubectl get pods --namespace uaa \
--output jsonpath='{.items[?(.metadata.name=="uaa-0")].spec.containers[?(.name=="uaa")].env[?(.name=="INTERNAL_CA_CERT")].valueFrom.secretKeyRef.name}')

&prompt.user;CA_CERT="$(kubectl get secret $SECRET --namespace uaa \
--output jsonpath="{.data['internal-ca-cert']}" | base64 --decode -)"

&prompt.user;helm upgrade <replaceable>susecf-scf</replaceable> suse/cf \
--values scf-config-values.yaml \
--set "secrets.UAA_CA_CERT=${CA_CERT}" \
--set "enable.autoscaler=false" \
--version &cf_chart;
</screen>

 </sect1>
 <sect1 xml:id="sec-cap-app-autoscaler-upgrade-considerations">
  <title>Upgrade Considerations</title>

  <para>
   In order to upgrade from a &productname; 1.3.1 deployment with the App-AutoScaler enabled
   to &productname; 1.4, perform one of the two methods listed below. Both methods require
   that <literal>uaa</literal> is first upgraded.
  </para>

  <procedure>
   <step>
    <para>
     Enabling App-AutoScaler no longer requires sizing values set to have a count of 1, which
     is the new minimum setting. The following values in your
     <filename>scf-config-values.yaml</filename> file can be removed:
   </para>
<screen>sizing:
  autoscaler_api:
    count: 1
  autoscaler_eventgenerator:
    count: 1
  autoscaler_metrics:
    count: 1
  autoscaler_operator:
    count: 1
  autoscaler_postgres:
    count: 1
  autoscaler_scalingengine:
    count: 1
  autoscaler_scheduler:
    count: 1
  autoscaler_servicebroker:
    count: 1
</screen>
   </step>
   <step>
    <para>
     Get the most recent &helm; charts:
    </para>
<screen>&prompt.user;helm repo update</screen>
   </step>
   <step>
    <para>
     Upgrade <literal>uaa</literal>:
    </para>
<screen>&prompt.user;helm upgrade susecf-uaa suse/uaa \
--values scf-config-values.yaml \
--version TODO
</screen>
   </step>
   <step>
    <para>
     Extract the <literal>uaa</literal> secret for <literal>scf</literal> to use:
    </para>
<screen>&prompt.user;SECRET=$(kubectl get pods --namespace uaa \
--output jsonpath='{.items[?(.metadata.name=="uaa-0")].spec.containers[?(.name=="uaa")].env[?(.name=="INTERNAL_CA_CERT")].valueFrom.secretKeyRef.name}')

&prompt.user;CA_CERT="$(kubectl get secret $SECRET --namespace uaa \
--output jsonpath="{.data['internal-ca-cert']}" | base64 --decode -)"
</screen>
   </step>
  </procedure>

  <para>
   You are now ready to upgrade <literal>scf</literal> using one of the two
   following methods:
  </para>

  <para>
   The first method is to disable the App-AutoScaler during the initial &productname; upgrade, then
   when the upgrade completes, enable the App-AutoScaler again.
  </para>

  <procedure>
   <step>
    <para>
     Upgrade <literal>scf</literal> with the App-AutoScaler disabled:
    </para>
<screen>&prompt.user;helm upgrade <replaceable>susecf-scf</replaceable> suse/cf \
--values scf-config-values.yaml \
--set "secrets.UAA_CA_CERT=${CA_CERT}" \
--set "enable.autoscaler=false"
</screen>
   </step>
   <step>
    <para>
     Monitor the deployment progress. Wait until all pods are in a ready state before proceeding:
    </para>
<screen>&prompt.user;watch --color 'kubectl get pods --namespace scf'</screen>
   </step>
   <step>
    <para>
     Enable the App-AutoScaler again:
    </para>
<screen>&prompt.user;helm upgrade <replaceable>susecf-scf</replaceable> suse/cf \
--values scf-config-values.yaml \
--set "secrets.UAA_CA_CERT=${CA_CERT}" \
--set "enable.autoscaler=true"
</screen>
   </step>
   <step>
    <para>
     Monitor the deployment progress and until all pods are in a ready state:
    </para>
<screen>&prompt.user;watch --color 'kubectl get pods --namespace scf'</screen>
   </step>
  </procedure>

  <para>
   The second method is to pass the
   <command>--set sizing.autoscaler_postgres.disk_sizes.postgres_data=100</command>
   option as part of the upgrade.
  </para>

<screen>&prompt.user;helm upgrade <replaceable>susecf-scf</replaceable> suse/cf \
--values scf-config-values.yaml \
--set "secrets.UAA_CA_CERT=${CA_CERT}" \
--set "enable.autoscaler=true" \
--set sizing.autoscaler_postgres.disk_sizes.postgres_data=100
</screen>
 </sect1>
 <sect1 xml:id="sec-cap-app-autoscaler-usage">
  <title>Using the App-AutoScaler Service</title>

  <para>
   Push the application without starting it
   first:
  </para>

<screen>&prompt.user;cf push <replaceable>my_application</replaceable> --no-start
</screen>

  <para>
   Attach autoscaling policy to the application:
  </para>

<screen>&prompt.user;cf attach-autoscaling-policy <replaceable>my_application</replaceable> <replaceable>my-policy.json</replaceable>
</screen>

  <para>
    Policy has to be defined as a JSON file
    (See <xref linkend="sec-cap-app-autoscaler-policies"/>) in a proper format
    (See <link xlink:href="https://github.com/cloudfoundry/app-autoscaler/blob/develop/docs/policy.md"/>).
  </para>

  <para>
   Start the application:
  </para>

<screen>&prompt.user;cf start <replaceable>my_application</replaceable></screen>

  <para>
   Autoscaling policies can be managed using &cfcli; with the App-AutoScaler plugin
   as above (See <xref linkend="sec-cap-app-autoscaler-cli"/>) or using the
   App-AutoScaler API (See <xref linkend="sec-cap-app-autoscaler-api"/>).
  </para>

  <sect2 xml:id="sec-cap-app-autoscaler-cli">
   <title>The App-AutoScaler &cfcli; Plugin</title>
   <para>
    The App-AutoScaler plugin is used for managing the service with your
    applications and provides the following commands (with shortcuts in brackets). Refer to <link xlink:href="https://github.com/cloudfoundry/app-autoscaler-cli-plugin#command-list"/> for details about each command:
   </para>
   <variablelist>
    <varlistentry>
     <term>autoscaling-api (asa)</term>
     <listitem>
      <para>
       Set or view AutoScaler service API endpoint. See <link xlink:href="https://github.com/cloudfoundry/app-autoscaler-cli-plugin#cf-autoscaling-api"/> for more information.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>autoscaling-policy (asp)</term>
     <listitem>
      <para>
       Retrieve the scaling policy of an application. See <link xlink:href="https://github.com/cloudfoundry/app-autoscaler-cli-plugin#cf-autoscaling-policy"/> for more information.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>attach-autoscaling-policy (aasp)</term>
     <listitem>
      <para>
       Attach a scaling policy to an application. See <link xlink:href="https://github.com/cloudfoundry/app-autoscaler-cli-plugin#cf-attach-autoscaling-policy"/> for more information.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>detach-autoscaling-policy (dasp)</term>
     <listitem>
      <para>
       Detach the scaling policy from an application. See <link xlink:href="https://github.com/cloudfoundry/app-autoscaler-cli-plugin#cf-detach-autoscaling-policy"/> for more information.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>create-autoscaling-credential (casc)</term>
     <listitem>
      <para>
       Create custom metric credential for an application. See <link xlink:href="https://github.com/cloudfoundry/app-autoscaler-cli-plugin#cf-create-autoscaling-credential"/> for more information.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>delete-autoscaling-credential (dasc)</term>
     <listitem>
      <para>
        Delete the custom metric credential of an application.
        See <link xlink:href="https://github.com/cloudfoundry/app-autoscaler-cli-plugin#cf-delete-autoscaling-credential"/> for more information.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>autoscaling-metrics (asm)</term>
     <listitem>
      <para>
       Retrieve the metrics of an application. See <link xlink:href="https://github.com/cloudfoundry/app-autoscaler-cli-plugin#cf-autoscaling-metrics"/> for more information.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>autoscaling-history (ash)</term>
     <listitem>
      <para>
       Retrieve the scaling history of an application. See <link xlink:href="https://github.com/cloudfoundry/app-autoscaler-cli-plugin#cf-autoscaling-history"/> for more information.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-cap-app-autoscaler-api">
   <title>App-AutoScaler API</title>
   <para>
    The App-AutoScaler service provides a
    Public
    API with detailed usage information, see <link xlink:href="https://github.com/cloudfoundry/app-autoscaler/blob/develop/docs/Public_API.rst"/>. It includes requests to:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      List scaling history of an application. For details, refer to <link xlink:href="https://github.com/cloudfoundry/app-autoscaler/blob/develop/docs/Public_API.rst#list-scaling-history-of-an-application"/>
     </para>
    </listitem>
    <listitem>
     <para>
      List instance metrics of an application. For details, refer to <link xlink:href="https://github.com/cloudfoundry/app-autoscaler/blob/develop/docs/Public_API.rst#list-instance-metrics-of-an-application"/>
     </para>
    </listitem>
    <listitem>
     <para>
      List aggregated metrics of an application. For details, refer to <link xlink:href="https://github.com/cloudfoundry/app-autoscaler/blob/develop/docs/Public_API.rst#list-aggregated-metrics-of-an-application"/>
     </para>
    </listitem>
    <listitem>
     <para>
      Policy api. For details, refer to <link xlink:href="https://github.com/cloudfoundry/app-autoscaler/blob/develop/docs/Public_API.rst#policy-api"/>
     </para>
    </listitem>
    <listitem>
     <para>
      Delete policy. For details, refer to <link xlink:href="https://github.com/cloudfoundry/app-autoscaler/blob/develop/docs/Public_API.rst#delete-policy"/>
     </para>
    </listitem>
    <listitem>
     <para>
      Get policy. For details, refer to <link xlink:href="https://github.com/cloudfoundry/app-autoscaler/blob/develop/docs/Public_API.rst#get-policy"/>
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-cap-app-autoscaler-policies">
  <title>Policies</title>

  <para>
   A policy identifies characteristics including minimum instance count,
   maximum instance count, and the rules used to determine when the number of
   application instances is scaled up or down. These rules are categorized into
   two types, scheduled scaling and dynamic scaling. (See
   <xref linkend="sec-cap-app-autoscaler-scaling-types"/>). Multiple scaling
   rules can be specified in a policy, but App-AutoScaler does not detect or
   handle conflicts that may occur. Ensure there are no conflicting rules to
   avoid unintended scaling behavior.
  </para>

  <para>
   Policies are defined using the JSON format and can be attached to an
   application either by passing the path to the policy file or directly as a
   parameter.
  </para>

  <para>
   The following is an example of a policy file, called
   <filename>my-policy.json</filename>.
  </para>

<screen>{
    "instance_min_count": 1,
    "instance_max_count": 4,
    "scaling_rules": [{
        "metric_type": "memoryused",
        "stat_window_secs": 60,
        "breach_duration_secs": 60,
        "threshold": 10,
        "operator": ">=",
        "cool_down_secs": 300,
        "adjustment": "+1"
    }]
}
</screen>

  <para>
   For an example that demonstrates defining multiple scaling rules in a single
   policy, refer to the sample of a policy file at <link xlink:href="https://github.com/cloudfoundry/app-autoscaler/blob/develop/src/integration/fakePolicyWithSchedule.json"/>. The complete list of configurable policy values can be
   found at
   <link xlink:href="https://github.com/cloudfoundry/app-autoscaler/blob/master/docs/policy.md"/>.
  </para>

  <sect2 xml:id="sec-cap-app-autoscaler-scaling-types">
   <title>Scaling Types</title>
   <variablelist>
    <varlistentry>
     <term>Scheduled Scaling</term>
     <listitem>
      <para>
       Modifies an application's instance count at a predetermined time. This
       option is suitable for workloads with predictable resource usage.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Dynamic Scaling</term>
     <listitem>
      <para>
       Modifies an application's instance count based on metrics criteria. This
       option is suitable for workloads with dynamic resource usage. The
       following metrics are available:
      </para>
      <itemizedlist>
       <listitem>
        <para>
         memoryused
        </para>
       </listitem>
       <listitem>
        <para>
         memoryutil
        </para>
       </listitem>
       <listitem>
        <para>
         cpu
        </para>
       </listitem>
       <listitem>
        <para>
         responsetime
        </para>
       </listitem>
       <listitem>
        <para>
         throughput
        </para>
       </listitem>
       <listitem>
        <para>
         custom metric
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    See
    <link xlink:href="https://github.com/cloudfoundry/app-autoscaler/tree/develop/docs#scaling-type"/> for additional details.
   </para>
  </sect2>
 </sect1>
</chapter>
