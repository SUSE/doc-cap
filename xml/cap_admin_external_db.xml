<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha-cap-external-db"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>External Database</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  By default, internal &mariadb; instances serve as the backing databases for
  internal components of &productname;. These components can be configured to
  use an external database system, such as a data service offered by a cloud
  service provider or an existing high availability database server.
 </para>
 <para>
  The current &productname; release is compatible with the following external
  databases:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    Amazon RDS &mariadb;
   </para>
  </listitem>
  <listitem>
   <para>
    Azure MariaDB
   </para>
  </listitem>
 </itemizedlist>
 <sect1 xml:id="sec-cap-external-db-considerations">
  <title>Important Considerations</title>
  <itemizedlist>
   <listitem>
    <para>
     If you are using external UAA with an external database you must set up two
     separate database instances; one for UAA and one for SCF. One external
     database instance for both an external UAA and an SCF setup is not
     supported and will cause data conflicts resulting in deployment failures.
    </para>
   </listitem>
   <listitem>
    <para>
     When the external database server is configured to use TLS, it
     <emphasis role="bold">must</emphasis> support both TLS and unencrypted
     connections; if the external database server only accepts TLS connections
     some SCF components will not be able to communicate with the database
     server.
    </para>
   </listitem>
   <listitem>
    <para>
     Note that Amazon RDS uses a CA that is not currently recognized as a
     well-known CA within UAA. Therefore, you must use the flag
     <literal>env.UAADB_TLS</literal> to
     <literal>enabled_skip_all_validation</literal> to disable server
     certificate validation for TLS connections to RDS. If you are using
     credhub, you will need to pass in the RDS CA via the
     <literal>secrets.CREDHUB_DB_CA_CERT</literal> flag to ensure credhub is
     able to validate the RDS server cert.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="sec-cap-configuring-external-db">
  <title>Configuration</title>
  <para>
   This section describes the components involved and their associated
   configuration options when connecting to an external database. The
   configuration options are specified through &helm; values inside the
   <filename>scf-config-values.yaml</filename>. The deployment and
   configuration of the external database itself is the responsibility of the
   operator and beyond the scope of this documentation. It is assumed the
   external database has been deployed and accessible.
  </para>
  <important>
   <title>Configuration during Initial Install Only</title>
   <para>
    Configuration of &productname; to use an external database
    <emphasis role="bold">must</emphasis> be done during the initial
    installation and cannot be changed afterwards.
   </para>
  </important>
  <variablelist>
   <varlistentry>
    <term>database-seeder</term>
    <listitem>
     <para>
      The <literal>database-seeder</literal> runs during installation and
      created databases inside the service for the various clients (Cloud
      Controller, Diego, UAA, etc.). It uses these configuration variables:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        <literal>env.DB_EXTERNAL_HOST</literal>: Hostname for an external
	database server to use for the CF-internal databases. If not set, the
	internal database is used and the remaining
	<literal>DB_EXTERNAL_*</literal> variables are ignored.
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>env.DB_EXTERNAL_USER_HOST_SUFFIX</literal>: A suffix that has
        to be appended to every user name for the external database; usually
	<literal>@host</literal>. Must include the <literal>@</literal> sign.
	Empty by default.
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>env.DB_EXTERNAL_PORT</literal>: Port for an external database
	server to use for the CF-internal databases. Default:
	<literal>3306</literal>.
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>env.DB_EXTERNAL_SSL_MODE</literal>: SSL configuration for the
	external database server. Valid values: <literal>false</literal>
	(<literal>database-seeder</literal> will communicate over plain TCP),
	<literal>skip-verify</literal>, <literal>preferred</literal>, and
	<literal>true</literal>. Default: <literal>true</literal>.
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>env.DB_EXTERNAL_USER</literal>: Administrator user name for an
        external database server; this is required to create the necessary
	databases. <literal>DB_EXTERNAL_USER_HOST_SUFFIX</literal> will be
	appended to this user name, so this variable should include just the
	user name without the host suffix.
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>secrets.DB_EXTERNAL_PASSWORD</literal>: Administrator password
	for an external database server; this is required to create the
	necessary databases.
       </para>
      </listitem>
     </itemizedlist>
     <para>
      The user and password are only used by the seeder to create the databases.
      All clients will then use database specific usernames and passwords.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>credhub</term>
    <listitem>
     <itemizedlist>
      <listitem>
       <para>
        <literal>secrets.CREDHUB_DB_CA_CERT</literal>: CA trusted for making TLS
        connections to targeted database server.
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>env.CREDHUB_DB_HOST_VALIDATION</literal>: Enables hostname
	verification for TLS connections to targeted database server. Default:
	<literal>true</literal>.
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>env.CREDHUB_DB_REQUIRE_TLS</literal>: Requires only TLS
	connections to targeted database server. Default:
	<literal>true</literal>.
       </para>
      </listitem>
     </itemizedlist>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>uaa</term>
    <listitem>
     <para>
      <literal>env.UAADB_TLS</literal>: Use TLS connection for UAA database.
      Valid options are: <literal>enabled</literal> (use TLS with full
      certificate validation),
      <literal>enabled_skip_hostname_validation</literal> (use TLS but skip
      validation of common and alt names in the host certificate),
      <literal>enabled_skip_all_validation</literal> (use TLS but do not
      validate anything about the host certificate), and
      <literal>disabled</literal> (do not use TLS). Default:
      <literal>enabled</literal>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   After your configuration file has been updated, refer to the
   platform-specific instructions to deploy <literal>uaa</literal> and/or
   <literal>scf</literal>:
  </para>
  &deployment-platforms;
 </sect1>
</chapter>
