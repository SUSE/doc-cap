<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha.cap.install-stratos"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>Installing the Stratos Web Console</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <sect1 xml:id="sec.cap.stratos-prod">
  <title>Install Stratos with &helm;</title>

  <para>
   Stratos UI is a modern web-based management application for Cloud Foundry.
   It provides a graphical management console for both developers and system
   administrators. Install Stratos with &helm; after all of the
   <literal>uaa</literal> and <literal>scf</literal> pods are running.
  </para>

  <para>
   If you are using &ses; as your storage backend, copy the secret into the
   Stratos namespace:
  </para>

<screen>&prompt.user;kubectl get secret ceph-secret-admin -o json --namespace default | \
sed 's/"namespace": "default"/"namespace": "stratos"/' | \
kubectl create -f -</screen>

  <para>
   You should already have the Stratos charts when you downloaded the SUSE
   charts repository (see <xref linkend="sec.cap.addrepo-prod"/>). Search your
   &helm; repository:
  </para>

&helm-search-suse;  

 <para>
   Use &helm; to install Stratos:
  </para>

<screen>&prompt.user;helm install suse/console \
    --name <replaceable>susecf-console</replaceable> \
    --namespace stratos \
    --values scf-config-values.yaml
</screen>

  <para>
   Monitor progress:
  </para>

<screen>&prompt.user;watch -c 'kubectl get pods --namespace stratos'
 Every 2.0s: kubectl get pods --namespace stratos
 
NAME                               READY     STATUS    RESTARTS   AGE
console-0                          3/3       Running   0          30m
console-mariadb-3697248891-5drf5   1/1       Running   0          30m</screen>

  <para>
   When all statuses show Ready, press <keycombo> <keycap function="control"/>
   <keycap>C</keycap> </keycombo> to exit. Query with &helm; to view your
   release information:
  </para>

<screen>&prompt.user;helm status susecf-console
LAST DEPLOYED: Wed Jan  2 10:25:22 2019
NAMESPACE: stratos
STATUS: DEPLOYED

RESOURCES:
==> v1/Secret
NAME                           TYPE    DATA  AGE
susecf-console-secret          Opaque  2     1h
susecf-console-mariadb-secret  Opaque  2     1h

==> v1/PersistentVolumeClaim
NAME                                  STATUS  VOLUME                                    CAPACITY  ACCESS MODES  STORAGECLASS  AGE
console-mariadb                       Bound   pvc-c41fb6be-0ebb-11e9-9b6c-fa163e0b27ed  1Gi       RWO           persistent    1h
susecf-console-upgrade-volume         Bound   pvc-c420356f-0ebb-11e9-9b6c-fa163e0b27ed  20Mi      RWO           persistent    1h
susecf-console-encryption-key-volume  Bound   pvc-c4292f69-0ebb-11e9-9b6c-fa163e0b27ed  20Mi      RWO           persistent    1h

==> v1/Service
NAME                    TYPE       CLUSTER-IP      EXTERNAL-IP                                        PORT(S)                      AGE
susecf-console-mariadb  ClusterIP  172.24.60.105   &lt;none>                                             3306/TCP                     1h
susecf-console-ui-ext   NodePort   172.24.164.199  10.86.1.15,172.24.10.12,172.24.10.16,172.24.10.14  80:31104/TCP,8443:31528/TCP  1h

==> v1beta1/Deployment
NAME             DESIRED  CURRENT  UP-TO-DATE  AVAILABLE  AGE
console-mariadb  1        1        1           1          1h

==> v1beta1/StatefulSet
NAME     DESIRED  CURRENT  AGE
console  1        1        1h

==> v1/Pod(related)
NAME                              READY  STATUS   RESTARTS  AGE
console-mariadb-66fc57b5b5-fzq7w  1/1    Running  0         1h
console-0                         3/3    Running  0         1h
</screen>

  <para>
   Point your web browser to https://example.com:8443, or
   https://10.86.1.15:8443 (from the <command>helm list</command> output) to
   see the Stratos console. Wade through the nag screens about the self-signed
   certificates and log in as <literal>admin</literal> with the password you
   created in <filename>scf-config-values.yaml</filename>. If you see an
   upgrade message, wait a few minutes and try again.
  </para>

  <figure xml:id="fig.cap.stratos-prod">
   <title>Stratos UI Cloud Foundry Console</title>
   <mediaobject>
    <imageobject>
     <imagedata fileref="stratos.png" format="PNG" width="75%"/>
    </imageobject>
   </mediaobject>
  </figure>
 </sect1>
 <sect1 xml:id="sec.cap.stratos-eks">
  <title>Deploy Stratos on &eks;</title>

  <para>
   Before deploying Stratos, ensure <literal>uaa</literal> and <literal>scf</literal>
   have been successfully deployed on &eks; (see <xref linkend="cha.cap.eks"/>).
  </para>
  <para>
   Configure a scoped storage class for your Stratos deployment. Create a configuration
   file, called <filename>scoped-storage-class.yaml</filename> in this example,
   using the following as a template. Specify the region you are using as the
   <literal>zone</literal> and be sure to include the letter (for example, the
   letter <literal>a</literal> in <literal>us-west-2a</literal>) identifier to indicate
   the Availability Zone used:
  </para>
<screen>kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: <replaceable>gp2scoped</replaceable>
provisioner: kubernetes.io/aws-ebs
parameters:
  type: gp2
  zone: <replaceable>"us-west-2a"</replaceable>
reclaimPolicy: Retain
mountOptions:
  - debug
</screen>
  <para>
   Create the storage class using the <filename>scoped-storage-class.yaml</filename>
   configuration file:
  </para>
<screen>&prompt.user;kubectl create --filename <replaceable>scoped-storage-class.yaml</replaceable></screen>
  <para>
   Verify the storage class has been created:
  </para>
<screen>&prompt.user;kubectl get storageclass
NAME            PROVISIONER             AGE
gp2 (default)   kubernetes.io/aws-ebs   1d
gp2scoped       kubernetes.io/aws-ebs   1d
</screen>
  <para>
   Use &helm; to install Stratos:
  </para>
<screen>helm install suse/console \
    --name susecf-console \
    --namespace stratos \
    --set kube.storage_class.persistent=gp2scoped \
    --set services.loadbalanced=true \
    --set console.service.http.servicePort=8080
</screen>
  <para>
    Monitor progress:
  </para>
<screen>$ watch -c 'kubectl get pods --namespace stratos'</screen>

  <para>
   Obtain the hostname of the service exposed through the public load balancer:
  </para>
<screen>&prompt.user;kubectl get service susecf-console-ui-ext --namespace stratos</screen>
  <para>
   Use this hostname to create a CNAME record.
  </para>
 </sect1>
 <sect1 xml:id="sec.cap.stratos-aks">
  <title>Deploy Stratos on &aks;</title>

  <para>
   Before deploying Stratos, ensure <literal>uaa</literal> and <literal>scf</literal>
   have been successfully deployed on &aks; (see <xref linkend="cha.cap.depl-azure"/>).
  </para>

  <para>
   Use &helm; to install Stratos:
  </para>
<screen>helm install suse/console \
    --name susecf-console \
    --namespace stratos \
    --set services.loadbalanced=true \
    --set console.service.http.servicePort=8080
</screen>
  <para>
    Monitor progress:
  </para>
<screen>$ watch -c 'kubectl get pods --namespace stratos'</screen>

  <para>
   Obtain the IP address of the service exposed through the public load balancer:
  </para>
<screen>&prompt.user;kubectl get service susecf-console-ui-ext --namespace stratos</screen>
  <para>
   Use this IP address to create an A record.
  </para>
 </sect1>
 <sect1 xml:id="sec.cap.stratos-prod-kube">
  <title>Connecting Kubernetes</title>

  <para>
   Stratos can show information from your Kubernetes environment.
  </para>

  <para>
   To enable this, you must register and connect your Kubernetes environment
   with Stratos.
  </para>

  <para>
   In the Stratos UI, go to <guimenu>Endpoints</guimenu> in the left-hand side
   navigation and click on the <guimenu>+</guimenu> icon in the top-right of
   the view - you should be shown the "Register new Endpoint" view.
  </para>

  <procedure>
   <step>
    <para>
     Select <literal>Kubernetes</literal> from the <guimenu>Endpoint
     Type</guimenu> drop-down
    </para>
   </step>
   <step>
    <para>
     Enter a memorable name for your environment in the <guimenu>Name</guimenu>
     field
    </para>
   </step>
   <step>
    <para>
     Enter the URL of the API server for your Kubernetes environment
    </para>
   </step>
   <step>
    <para>
     Check the <guimenu>Skip SSL validation for the endpoint</guimenu> checkbox
     if using self-signed certificates
    </para>
   </step>
   <step>
    <para>
     Click <guimenu>Finish</guimenu>
    </para>
   </step>
  </procedure>

  <para>
   The view will refresh to show the new endpoint in the disconnected state.
  </para>

  <para>
   Next, you will need to connect to this endpoint. In the table of endpoints,
   click the overflow menu icon alongside the endpoint that you added above.
   Click on <guimenu>Connect</guimenu> in the drop-down menu.
  </para>

  <para>
   You will need to select the appropriate Auth Type for your Kubernetes
   environment and provide the required credentials:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     For CaaSP, use the Auth Type <literal>CAASP (OIDC)</literal> and provide a
     valid <filename>kubeconfig</filename> file for your environment
    </para>
   </listitem>
   <listitem>
    <para>
     For Amazon EKS, use the Auth Type <literal>AWS IAM (EKS)</literal> and
     provide the name of your EKS cluster and your AWS Access Key ID and Secret
     Access Key
    </para>
   </listitem>
   <listitem>
    <para>
     For Azure AKS, use the Auth Type <literal>Azure AKS</literal> and provide
     a valid <filename>kubeconfig</filename> file for your environment
    </para>
   </listitem>
   <listitem>
    <para>
     For Minikube, use the Auth Type <literal>Kubernetes Cert Auth</literal>
     and provide the Certificate and Certificate Key files
    </para>
   </listitem>
  </itemizedlist>

  <para>
   Finally, click <guimenu>Connect</guimenu> to connect the endpoint with the
   authentication information that you have provided. The endpoint list should
   update to show that your Kubernetes endpoint is connected.
  </para>

  <para>
   Once connected, you should see a Kubernetes menu item in the left-hand side
   navigation - click on this to access Kubernetes views.
  </para>
 </sect1>
 <sect1 xml:id="sec.cap.stratos-metrics">
  <title>Stratos Metrics</title>

  <para>
   Stratos can show metrics data from
   <link xlink:href="https://prometheus.io/">Prometheus</link> for both Cloud
   Foundry and Kubernetes.
  </para>

  <sect2 xml:id="sec.cap.stratos-metrics-install">
   <title>Install Stratos Metrics with &helm;</title>
   <para>
    In order to display metrics data with Stratos, you need to deploy the
    <literal>stratos-metrics</literal> &helm; chart - this deploys Prometheus
    with the necessary exporters that collect data from Cloud Foundry and
    Kubernetes. It also wraps Prometheus with an
    <link xlink:href="http://nginx.org/">nginx</link> server to provide
    authentication.
   </para>
   <para>
    As with deploying Stratos, you should deploy the metrics &helm; chart using
    the same <filename>scf-config-values.yaml</filename> file that was used for
    deploying <literal>scf</literal> and <literal>uaa</literal>.
   </para>
   <para>
    Create a new yaml file named
    <filename>stratos-metrics-values.yaml</filename>, with the following
    contents:
   </para>
<screen>kubernetes:
  authEndpoint: <replaceable>kube_server_address.example.com</replaceable>
prometheus:
  kubeStateMetrics:
    enabled: true
nginx:
  username: <replaceable>username</replaceable>
  password: <replaceable>password</replaceable>
useLb: true</screen>
   <para>
    where:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <literal>authEndpoint</literal> is the same URL that you used when
      registering your Kubernetes environment with Stratos (the Kubernetes API
      Server URL)
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>username</literal> should be chosen by you as the username that
      you will use when connecting to Stratos Metrics
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>password</literal> should be chosen by you as the password that
      you will use when connecting to Stratos Metrics. Ensure to choose a secure
      password
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>useLb</literal> is set to <literal>true</literal> if your &kube;
      deployment supports automatic configuration of a load balancer (for example,
      AKS and EKS)
     </para>
    </listitem>
   </itemizedlist>
   <para>
    Install Metrics with:
   </para>
<screen>&prompt.user;helm install suse/metrics \
    --name <replaceable>susecf-metrics</replaceable> \
    --namespace metrics \
    --values scf-config-values.yaml \
    --values stratos-metrics-values.yaml</screen>
   <para>
    Monitor progress:
   </para>
<screen>$ watch -c 'kubectl get pods --namespace metrics'</screen>
   <para>
    When all statuses show <literal>Ready</literal>, press <keycombo>
    <keycap function="control"/> <keycap>C</keycap> </keycombo> to exit and to
    view your release information.
   </para>
  </sect2>

  <sect2 xml:id="sec.cap.stratos-metrics-connect">
   <title>Connecting Stratos Metrics</title>
   <para>
    When Stratos Metrics is connected to Stratos, additional views are enabled
    that show metrics metadata that has been ingested into the Stratos Metrics
    Prometheus server.
   </para>
   <para>
    To enable this, you must register and connect your Stratos Metrics instance
    with Stratos.
   </para>
   <para>
    In the Stratos UI, go to <guimenu>Endpoints</guimenu> in the left-hand side
    navigation and click on the <guimenu>+</guimenu> icon in the top-right of
    the view - you should be shown the "Register new Endpoint" view. Next:
   </para>
   <procedure>
    <step>
     <para>
      Select Metrics from the <guimenu>Endpoint Type</guimenu> dropdown
     </para>
    </step>
    <step>
     <para>
      Enter a memorable name for your environment in the
      <guimenu>Name</guimenu> field
     </para>
    </step>
    <step>
     <para>
      Find the external endpoint Stratos Metrics is running on:
     </para>
<screen>&prompt.user;kubectl get service susecf-metrics-metrics-nginx --namespace metrics
NAME                           TYPE           CLUSTER-IP     EXTERNAL-IP      PORT(S)         AGE
susecf-metrics-metrics-nginx   LoadBalancer   10.0.202.180   52.170.253.229   443:30263/TCP   21h
</screen>
     <para>
      Prepend <literal>https://</literal> to the endpoint of your
      Stratos Metrics deployment and enter it into the
      <guimenu>Endpoint Address</guimenu> field. In this example,
      <literal>https://52.170.253.229</literal> will be used.
     </para>
    </step>
    <step>
     <para>
      Check the <guimenu>Skip SSL validation for the endpoint</guimenu>
      checkbox if using self-signed certificates
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Finish</guimenu>
     </para>
    </step>
   </procedure>
   <para>
    The view will refresh to show the new endpoint in the disconnected state.
    Next you will need to connect to this endpoint.
   </para>
   <para>
    In the table of endpoints, click the overflow menu icon alongside the
    endpoint that you added above, then:
   </para>
   <procedure>
    <step>
     <para>
      Click on <guimenu>Connect</guimenu> in the dropdown menu
     </para>
    </step>
    <step>
     <para>
      Enter the username for your Stratos Metrics instance. This will be the
      <literal>nginx.username</literal> defined in your
      <filename>stratos-metrics-values.yaml</filename> file
     </para>
    </step>
    <step>
     <para>
      Enter the password for your Stratos Metrics instance. This will be the
      <literal>nginx.password</literal> defined in your 
      <filename>stratos-metrics-values.yaml</filename> file
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Connect</guimenu>
     </para>
    </step>
   </procedure>
   <para>
    Once connected, you should see that the name of your Metrics endpoint is a
    hyperlink and clicking on it should show basic metadata about the Stratos
    Metrics endpoint.
   </para>
   <para>
    Metrics data and views should now be available in the Stratos UI, for
    example:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      On the <guimenu>Instances</guimenu> tab for an Application, the table
      should show an additional Cell column to indicate which Diego Cell the
      instance is running on. This should be clickable to navigate to a Cell
      view showing Cell information and metrics
     </para>
    </listitem>
    <listitem>
     <para>
      On the view for an Application there should be a new Metrics tab that
      shows Application metrics
     </para>
    </listitem>
    <listitem>
     <para>
      On the Kubernetes views, views such as the Node view should show an
      additional <guimenu>Metrics</guimenu> tab with metric information
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>
</chapter>
