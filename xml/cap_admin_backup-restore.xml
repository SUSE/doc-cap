<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha-cap-backup-restore"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
  <title>Backup and Restore</title>
 </info>
 <sect1 xml:id="sec-cap-backup-restore-with-plugin">
  <title>Backup and Restore Using cf-plugin-backup</title>

  <para>
   <literal>cf-plugin-backup</literal> backs up and restores your Cloud
   Controller Database (CCDB), using the &cf; command line interface (&cfcli;).
   (See <xref linkend="sec-cap-cf-cli"/>.)
  </para>

  <para>
   <literal>cf-plugin-backup</literal> is not a general-purpose backup and
   restore plugin. It is designed to save the state of a &kubecf; instance before
   making changes to it. If the changes cause problems, use
   <literal>cf-plugin-backup</literal> to restore the instance from scratch. Do
   not use it to restore to a non-pristine &kubecf; instance. Some of the
   limitations for applying the backup to a non-pristine &kubecf; instance are:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Application configuration is not restored to running applications, as the
     plugin does not have the ability to determine which applications should be
     restarted to load the restored configurations.
    </para>
   </listitem>
   <listitem>
    <para>
     User information is managed by the &uaa; (<literal>uaa</literal>) Server,
     not the Cloud Controller (CC). As the plugin talks only to the CC it cannot
     save full user information, nor restore users. Saving and restoring users
     must be performed separately, and user restoration must be performed before
     the backup plugin is invoked.
    </para>
   </listitem>
   <listitem>
    <para>
     The set of available stacks is part of the &kubecf; instance setup, and is
     not part of the CC configuration. Trying to restore applications using
     stacks not available on the target &kubecf; instance will fail. Setting up
     the necessary stacks must be performed separately before the backup plugin
     is invoked.
    </para>
   </listitem>
   <listitem>
    <para>
     Buildpacks are not saved. Applications using custom buildpacks not
     available on the target &kubecf; instance will not be restored.
     Custom buildpacks must be managed separately, and relevant buildpacks must
     be in place before the affected applications are restored.
    </para>
   </listitem>
  </itemizedlist>

  <sect2 xml:id="sec-cap-install-backup-restore-plugin">
   <title>Installing the cf-plugin-backup</title>
   <para>
    Download the plugin from
    <link xlink:href="https://github.com/SUSE/cf-plugin-backup/releases"/>.
   </para>
   <para>
    Then install it with <command>cf</command>, using the name of the plugin
    binary that you downloaded:
   </para>
<screen>&prompt.user;cf install-plugin <replaceable>cf-plugin-backup-1.0.8.0.g9e8438e.linux-amd64</replaceable>
 Attention: Plugins are binaries written by potentially untrusted authors.
 Install and use plugins at your own risk.
 Do you want to install the plugin
 backup-plugin/cf-plugin-backup-1.0.8.0.g9e8438e.linux-amd64? [yN]: y
 Installing plugin backup...
 OK
 Plugin backup 1.0.8 successfully installed.</screen>
   <para>
    Verify installation by listing installed plugins:
   </para>
<screen>&prompt.user;cf plugins
 Listing installed plugins...

 plugin   version   command name      command help
 backup   1.0.8     backup-info       Show information about the current snapshot
 backup   1.0.8     backup-restore    Restore the CloudFoundry state from a
  backup created with the snapshot command
 backup   1.0.8     backup-snapshot   Create a new CloudFoundry backup snapshot
  to a local file

 Use 'cf repo-plugins' to list plugins in registered repos available to install.</screen>
  </sect2>

  <sect2 xml:id="sec-cap-using-backup-restore-plugin">
   <title>Using cf-plugin-backup</title>
   <para>
    The plugin has three commands:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      backup-info
     </para>
    </listitem>
    <listitem>
     <para>
      backup-snapshot
     </para>
    </listitem>
    <listitem>
     <para>
      backup-restore
     </para>
    </listitem>
   </itemizedlist>
   <para>
    View the online help for any command, like this example:
   </para>
<screen>&prompt.user; cf backup-info --help
 NAME:
   backup-info - Show information about the current snapshot

 USAGE:
   cf backup-info</screen>
   <para>
    Create a backup of your &productname; data and applications. The command
    outputs progress messages until it is completed:
   </para>
<screen>&prompt.user;cf backup-snapshot
 2018/08/18 12:48:27 Retrieving resource /v2/quota_definitions
 2018/08/18 12:48:30 org quota definitions done
 2018/08/18 12:48:30 Retrieving resource /v2/space_quota_definitions
 2018/08/18 12:48:32 space quota definitions done
 2018/08/18 12:48:32 Retrieving resource /v2/organizations
 [...]</screen>
   <para>
    Your &cap; data is saved in the current directory in
    <filename>cf-backup.json</filename>, and application data in the
    <filename>app-bits/</filename> directory.
   </para>
   <para>
    View the current backup:
   </para>
<screen>&prompt.user;cf backup-info
 - Org  system</screen>
   <para>
    Restore from backup:
   </para>
<screen>&prompt.user;cf backup-restore</screen>
   <para>
    There are two additional restore options:
    <command>--include-security-groups</command> and
    <command>--include-quota-definitions</command>.
   </para>
  </sect2>

  <sect2 xml:id="sec-cap-backup-restore-plugin-scope">
   <title>Scope of Backup</title>
   <para>
    The following table lists the scope of the
    <literal>cf-plugin-backup</literal> backup. Organization and space users
    are backed up at the &productname; level. The user account in
    <literal>uaa</literal>/LDAP, the service instances and their application
    bindings, and buildpacks are not backed up. The sections following the
    table goes into more detail.
   </para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Scope</entry>
       <entry>Restore</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>Orgs</entry>
       <entry>Yes</entry>
      </row>
      <row>
       <entry>Org auditors</entry>
       <entry>Yes</entry>
      </row>
      <row>
       <entry>Org billing-manager</entry>
       <entry>Yes</entry>
      </row>
      <row>
       <entry>Quota definitions</entry>
       <entry>Optional</entry>
      </row>
      <row>
       <entry>Spaces</entry>
       <entry>Yes</entry>
      </row>
      <row>
       <entry>Space developers</entry>
       <entry>Yes</entry>
      </row>
      <row>
       <entry>Space auditors</entry>
       <entry>Yes</entry>
      </row>
      <row>
       <entry>Space managers</entry>
       <entry>Yes</entry>
      </row>
      <row>
       <entry>Apps</entry>
       <entry>Yes</entry>
      </row>
      <row>
       <entry>App binaries</entry>
       <entry>Yes</entry>
      </row>
      <row>
       <entry>Routes</entry>
       <entry>Yes</entry>
      </row>
      <row>
       <entry>Route mappings</entry>
       <entry>Yes</entry>
      </row>
      <row>
       <entry>Domains</entry>
       <entry>Yes</entry>
      </row>
      <row>
       <entry>Private domains</entry>
       <entry>Yes</entry>
      </row>
      <row>
       <entry>Stacks</entry>
       <entry>not available</entry>
      </row>
      <row>
       <entry>Feature flags</entry>
       <entry>Yes</entry>
      </row>
      <row>
       <entry>Security groups</entry>
       <entry>Optional</entry>
      </row>
      <row>
       <entry>Custom buildpacks</entry>
       <entry>No</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
   <para>
    <command>cf backup-info</command> reads the
    <filename>cf-backup.json</filename> snapshot file found in the current
    working directory, and reports summary statistics on the content.
   </para>
   <para>
    <command>cf backup-snapshot</command> extracts and saves the following
    information from the CC into a <filename>cf-backup.json</filename> snapshot
    file. Note that it does not save user information, but only the references
    needed for the roles. The full user information is handled by the
    <literal>uaa</literal> server, and the plugin talks only to the CC. The
    following list provides a summary of what each plugin command does.
   </para>
   <itemizedlist>
    <listitem>
     <para>
      Org Quota Definitions
     </para>
    </listitem>
    <listitem>
     <para>
      Space Quota Definitions
     </para>
    </listitem>
    <listitem>
     <para>
      Shared Domains
     </para>
    </listitem>
    <listitem>
     <para>
      Security Groups
     </para>
    </listitem>
    <listitem>
     <para>
      Feature Flags
     </para>
    </listitem>
    <listitem>
     <para>
      Application droplets (zip files holding the staged app)
     </para>
    </listitem>
    <listitem>
     <para>
      Orgs
     </para>
     <itemizedlist>
      <listitem>
       <para>
        Spaces
       </para>
       <itemizedlist>
        <listitem>
         <para>
          Applications
         </para>
        </listitem>
        <listitem>
         <para>
          Users' references (role in the space)
         </para>
        </listitem>
       </itemizedlist>
      </listitem>
     </itemizedlist>
    </listitem>
   </itemizedlist>
   <para>
    <command>cf backup-restore</command> reads the
    <filename>cf-backup.json</filename> snapshot file found in the current
    working directory, and then talks to the targeted &kubecf; instance to upload
    the following information, in the specified order:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      Shared domains
     </para>
    </listitem>
    <listitem>
     <para>
      Feature flags
     </para>
    </listitem>
    <listitem>
     <para>
      Quota Definitions (iff --include-quota-definitions)
     </para>
    </listitem>
    <listitem>
     <para>
      Orgs
     </para>
     <itemizedlist>
      <listitem>
       <para>
        Space Quotas (iff --include-quota-definitions)
       </para>
      </listitem>
      <listitem>
       <para>
        UserRoles
       </para>
      </listitem>
      <listitem>
       <para>
        (private) Domains
       </para>
      </listitem>
      <listitem>
       <para>
        Spaces
       </para>
       <itemizedlist>
        <listitem>
         <para>
          UserRoles
         </para>
        </listitem>
        <listitem>
         <para>
          Applications (+ droplet)
         </para>
         <itemizedlist>
          <listitem>
           <para>
            Bound Routes
           </para>
          </listitem>
         </itemizedlist>
        </listitem>
        <listitem>
         <para>
          Security Groups (iff --include-security-groups)
         </para>
        </listitem>
       </itemizedlist>
      </listitem>
     </itemizedlist>
    </listitem>
   </itemizedlist>
   <para>
    The following list provides more details of each action.
   </para>
   <variablelist>
    <varlistentry>
     <term>Shared Domains</term>
     <listitem>
      <para>
       Attempts to create domains from the backup. Existing domains are
       retained, and not overwritten.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Feature Flags</term>
     <listitem>
      <para>
       Attempts to update flags from the backup.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Quota Definitions</term>
     <listitem>
      <para>
       Existing quotas are overwritten from the backup (deleted, re-created).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Orgs</term>
     <listitem>
      <para>
       Attempts to create orgs from the backup. Attempts to update existing
       orgs from the backup.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Space Quota Definitions</term>
     <listitem>
      <para>
       Existing quotas are overwritten from the backup (deleted, re-created).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>User roles</term>
     <listitem>
      <para>
       Expect the referenced user to exist. Will fail when the user is already
       associated with the space, in the given role.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>(private) Domains</term>
     <listitem>
      <para>
       Attempts to create domains from the backup. Existing domains are
       retained, and not overwritten.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Spaces</term>
     <listitem>
      <para>
       Attempts to create spaces from the backup. Attempts to update existing
       spaces from the backup.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>User roles</term>
     <listitem>
      <para>
       Expect the referenced user to exist. Will fail when the user is already
       associated with the space, in the given role.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Apps</term>
     <listitem>
      <para>
       Attempts to create apps from the backup. Attempts to update existing
       apps from the backup (memory, instances, buildpack, state, ...)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Security groups</term>
     <listitem>
      <para>
       Existing groups are overwritten from the backup
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-cap-backup-restore-of-raw-data">
  <title>Disaster Recovery through Raw Data Backup and Restore</title>

  <para>
   An existing &productname; deployment's data can be migrated to a new
   &productname; deployment through a backup and restore of its raw data. The
   process involves performing a backup and restore of the
   <literal>kubecf</literal> components respectively. This procedure is agnostic of
   the underlying &kube; infrastructure and can be included as part of your
   disaster recovery solution.
  </para>

  <sect2 xml:id="sec-cap-raw-data-prerequisites">
   <title>Prerequisites</title>
   <para>
    In order to complete a raw data backup and restore, the following are
    required:
   </para>

   <itemizedlist>
    <listitem>
     <para>
      Access to a running deployment of <literal>kubecf</literal> to create backups
      with
     </para>
    </listitem>
    <listitem>
     <para>
      Access to a new deployment of <literal>kubecf</literal> (deployed with a
      &values-filename; configured according to
      <xref linkend="prepare-config-for-new-cluster"/> of
      <xref linkend="sec-cap-raw-data-restore-procedure"/>) to perform the
      restore to
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec-cap-raw-data-scope">
   <title>Scope of Raw Data Backup and Restore</title>
   <para>
    The following lists the data that is included as part of the backup (and
    restore) procedure:
   </para>

   <itemizedlist>
    <listitem>
     <para>
      The Cloud Controller Database (CCDB). In addition to what is encompassed
      by the CCDB listed in
      <xref linkend="sec-cap-backup-restore-plugin-scope"/>, this will include
      service binding data as well.
     </para>
    </listitem>
    <listitem>
     <para>
      The Cloud Controller blobstore, which includes the types of binary large
      object (blob) files listed below. (See
      <link xlink:href="https://docs.cloudfoundry.org/concepts/architecture/cloud-controller.html#blob-store"/>
      to learn more about each blob type.)
     </para>
     <itemizedlist>
      <listitem>
       <para>
        App Packages
       </para>
      </listitem>
      <listitem>
       <para>
        Buildpacks
       </para>
      </listitem>
      <listitem>
       <para>
        Resource Cache
       </para>
      </listitem>
      <listitem>
       <para>
        Buildpack Cache
       </para>
      </listitem>
      <listitem>
       <para>
        Droplets
       </para>
      </listitem>
     </itemizedlist>
    </listitem>
    <listitem>
     <para>
      User data
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
  <sect2 xml:id="sec-cap-raw-data-backup-procedure">
   <title>Performing a Raw Data Backup</title>
   <note>
    <title>Restore to the Same Version</title>
    <para>
     This process is intended for backing up and restoring to a target
     deployment with the same version as the source deployment. For example,
     data from a backup of &productname; &productnumber; should be restored to a
     &productname; &productnumber; deployment.
    </para>
   </note>
   <para>
    Perform the following steps to create a backup of your source
    &productname; deployment.
   </para>
   <procedure>
    <step>
     <para>
      Export the blobstore into a file.
     </para>
<screen>&prompt.user;kubectl exec --namespace kubecf singleton-blobstore-0 --
tar cfz - --exclude=/var/vcap/store/shared/tmp /var/vcap/store/shared >
blob.tgz</screen>
    </step>
    <step>
     <para>
      The current UAA database configuration does not allow exporting of a
      mysqldump, so need to be more permissive.
     </para>
<screen>&prompt.user;cat &lt;&lt;EOF | kubectl exec --stdin database-0 --namespace kubecf
-- mysql
SET GLOBAL pxc_strict_mode=PERMISSIVE;
SET GLOBAL
sql_mode='STRICT_ALL_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
set GLOBAL innodb_strict_mode='OFF';
EOF
</screen>
    </step>
    <step>
     <para>
      Export the UAA database into a file.
     </para>
<screen>&prompt.user;kubectl exec --stdin database-0 --namespace kubecf --
mysqldump uaa > uaadb-src.sql</screen>
    </step>
    <step>
     <para>
      Export the Cloud Controller Database (CCDB) into a file.
     </para>
<screen>&prompt.user;kubectl exec --stdin database-0 --namespace kubecf --
mysqldump cloud_controller > ccdb-src.sql</screen>
    </step>
    <step xml:id="get-encryption-key">
     <para>
      Save the CCDB encryption key(s). Adjust the <command>A</command> flag as
      needed to include all keys.
     </para>
<screen>&prompt.user;kubectl exec --stdin --tty --namespace kubecf api-0 -- bash
-c "cat /var/vcap/jobs/cloud_controller_ng/config/cloud_controller_ng.yml | grep
-A 10 db_encryption" > enc_key
</screen>
    </step>
   </procedure>
  </sect2>
  <sect2 xml:id="sec-cap-raw-data-restore-procedure">
   <title>Performing a Raw Data Restore</title>
   <important>
    <title>Ensure Access to the Correct Deployment</title>
    <para>
     Working with multiple &kube; clusters simultaneously can be confusing.
     Ensure you are communicating with the desired cluster
     <link xlink:href="https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/#set-the-kubeconfig-environment-variable">by
     setting <literal>$KUBECONFIG</literal> correctly</link>.
    </para>
   </important>
   <para>
    Perform the following steps to restore your backed up data to the target
    &productname; deployment.
   </para>
   <procedure>
    <step xml:id="prepare-config-for-new-cluster">
     <para>
      Deploy the target &productname; cluster following the steps for your
      platform.
     </para>
     &deployment-platforms;
    </step>
    <step>
     <para>
      The current UAA database configuration does not allow importing of a
      mysqldump, so needs to be made more permissive.
     </para>
<screen>&prompt.user;cat &lt;&lt;EOF | kubectl exec --stdin database-0 --namespace kubecf
-- mysql
SET GLOBAL pxc_strict_mode=PERMISSIVE;
SET GLOBAL
sql_mode='STRICT_ALL_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
set GLOBAL innodb_strict_mode='OFF';
EOF
</screen>
    </step>
    <step>
     <para>
      Import the UAA database.
     </para>
<screen>&prompt.user;kubectl exec --stdin database-0 --namespace kubecf -- mysql
uaa &lt; uaadb-src.sql</screen>
     <para>
      Verify the import is successful. The output should list the users from the
      deployment the backup was taken from.
     </para>
<screen>&prompt.user;echo "select username from uaa.users;" | kubectl exec -i
database-0 --namespace kubecf -- mysql</screen>
    </step>
    <step>
     <para>
      Import the blobstore and restart the pod for changes to take affect.
     </para>
<screen>&prompt.user;kubectl exec --stdin singleton-blobstore-0 --namespace kubecf -- tar xfz - -C
/ &lt; blob.tgz

&prompt.user;kubectl delete pod --namespace kubecf singleton-blobstore-0
</screen>
    </step>
    <step>
     <para>
      Drop the current CCDB and create a new instance.
     </para>
<screen>&prompt.user;echo "drop database cloud_controller; create database
cloud_controller;" | \
     kubectl exec -i database-0 --namespace kubecf -- mysql
</screen>
    </step>
    <step>
     <para>
      Import the CCDB.
     </para>
<screen>&prompt.user;kubectl exec --stdin database-0 --namespace kubecf -- mysql
cloud_controller &lt; ccdb-src.sql</screen>
    </step>
    <step>
     <para>
      Update the encryption key.
     </para>
     <substeps>
      <step>
       <para>
        Create a YAML configuration file containing the encryption key
        information. The file structure should look similar to the following
        example, called <filename>enc_key_values.yaml</filename>. Replace 
        the example values using the values from the <filename>enc_key</filename>
        file generated earlier. Depending on the state of the cluster the
        encryption keys were retrieved from, the key labels may differ and not
        be <literal>encryption_key_0</literal>. 
       </para>
<screen>ccdb:
  encryption:
    rotation:
      key_labels:
      - <replaceable>encryption_key_0</replaceable>
      current_key_label: <replaceable>encryption_key_0</replaceable>

credentials:
  cc_db_encryption_key:
<replaceable>elqdi7TARO6NYELa9cUr6WwMYIvqaG4U0nMyfL1loDYi02C1Rrneov6fxxfd64je</replaceable>
  ccdb_key_label_<replaceable>encryption_key_0</replaceable>:
<replaceable>tPhZZbMNYVWKs0II8e8pMxsJMokeReUrJAnQNdLaXEheTZVv5OpMe7vdyThhrkEP</replaceable>
</screen>
       <para>
        In the above, the key
        <literal>credentials.ccdb_key_label_encryption_key_0</literal> is
        based on the generic form
        <literal>credentials.ccdb_key_label_XYZ</literal>. The
        <literal>XYZ</literal> should be replaced with the value of the
        <literal>current_key_label</literal>.
       </para>
       <para>
        For example, if the <literal>current_key_label</literal> is
        <literal>new_key</literal>, then
        <literal>credentials.ccdb_key_label_new_key</literal> should be used.
       </para>
      </step>
      <step>
       <para>
        Perform a <command>helm upgrade</command> for the changes to take
        affect.
       </para>
<screen>&prompt.user;helm upgrade <replaceable>kubecf</replaceable> suse/kubecf
\
--namespace <replaceable>kubecf</replaceable> \
--values &values-file; \
--values <replaceable>enc_key_values.yaml</replaceable> \
--version &kubecf_chart;
</screen>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      When all pods are fully running, verify the restore is successful. Example
      commands to run include <command>cf apps</command>,
      <command>cf marketplace</command>, or <command>cf services</command>.
     </para>
    </step>
   </procedure>
  </sect2>
 </sect1>
</chapter>
