<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha.cap.app-autoscaler"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>App-AutoScaler</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  The App-AutoScaler service is used for automatically managing an
  application's instance count when deployed on &scf;. The scaling behavior is
  determined by a set of criteria defined in a policy (See
  <xref linkend="sec.cap.app-autoscaler-policies"/>).
 </para>
 <sect1 xml:id="sec.cap.app-autoscaler-prereqs">
  <title>Prerequisites</title>

  <para>
   Using the App-AutoScaler service requires:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     <link xlink:href="https://docs.cloudfoundry.org/cf-cli/">The &cf; command
     line interface (&cfcli;)</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link xlink:href="https://github.com/cloudfoundry-incubator/app-autoscaler-cli-plugin">The
     App-AutoScaler &cfcli; Plugin</link>
    </para>
    <para>
     The plugin can be installed by running the following command:
    </para>
<screen>cf install-plugin app-autoscaler-plugin</screen>
   </listitem>
   <listitem>
    <para>
     Review of the
     <link xlink:href="https://github.com/cloudfoundry-incubator/app-autoscaler/tree/master/docs#things-you-need-to-know-before-auto-scale-an-application">considerations
     and guidelines</link>.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="sec.cap.enable-app-autoscaler">
  <title>Enabling the App-AutoScaler Service</title>

  <para>
   By default, the App-AutoScaler service is not enabled as part of a &scf;
   deployment. To enable it, add the following values to your
   <filename>scf-config-values.yaml</filename> file and deploy
   <literal>scf</literal>:
  </para>

<screen>
sizing:
  autoscaler_api:
    count: 1
  autoscaler_eventgenerator:
    count: 1
  autoscaler_metrics:
    count: 1
  autoscaler_operator:
    count: 1
  autoscaler_postgres:
    count: 1
  autoscaler_scalingengine:
    count: 1
  autoscaler_scheduler:
    count: 1
  autoscaler_servicebroker:
    count: 1
</screen>

  <para>
   See <command>helm inspect suse/cf</command> for the full list of available
   values that can be used to configure the App-AutoScaler.
  </para>

  <para>
   If <literal>uaa</literal> is deployed, pass your <literal>uaa</literal>
   secret and certificate to <literal>scf</literal>. Otherwise deploy
   <literal>uaa</literal> first (See
   <xref linkend="sec.cap.install-uaa-prod"/>), then proceed with this step:
  </para>

<screen>&prompt.user;SECRET=$(kubectl get pods --namespace uaa \
-o jsonpath='{.items[?(.metadata.name=="uaa-0")].spec.containers[?(.name=="uaa")].env[?(.name=="INTERNAL_CA_CERT")].valueFrom.secretKeyRef.name}')

&prompt.user;CA_CERT="$(kubectl get secret $SECRET --namespace uaa \
-o jsonpath="{.data['internal-ca-cert']}" | base64 --decode -)"
</screen>

  <para>
   If this is an initial deployment, use <command>helm install</command> to
   deploy <literal>scf</literal>:
  </para>

<screen>&prompt.user;helm install suse/cf \
--name susecf-scf \
--namespace scf \
--values scf-config-values.yaml \
--set "secrets.UAA_CA_CERT=${CA_CERT}"
</screen>

  <para>
   If this is an existing deployment, use <command>helm upgrade</command> to
   apply the change:
  </para>

<screen>&prompt.user;helm upgrade susecf-scf suse/cf \
--values scf-config-values.yaml --set "secrets.UAA_CA_CERT=${CA_CERT}"
</screen>
 </sect1>
 <sect1 xml:id="sec.cap.app-autoscaler-usage">
  <title>Using the App-AutoScaler Service</title>

  <para>
   Create the Service Broker for App-AutoScaler:
  </para>

<screen>&prompt.user;SECRET=$(kubectl get pods --namespace scf \
-o jsonpath='{.items[?(.metadata.name=="api-group-0")].spec.containers[?(.name=="api-group")].env[?(.name=="INTERNAL_CA_CERT")].valueFrom.secretKeyRef.name}')

&prompt.user;AS_PASSWORD="$(kubectl get secret $SECRET --namespace scf -o jsonpath="{.data['autoscaler-service-broker-password']}" | base64 --decode)"

&prompt.user;cf create-service-broker <replaceable>autoscaler</replaceable> <replaceable>username</replaceable> $AS_PASSWORD https://autoscalerservicebroker.<replaceable>example.com</replaceable>
</screen>

  <para>
   Enable access to the service:
  </para>

<screen>&prompt.user;cf enable-service-access autoscaler -p autoscaler-free-plan</screen>

  <para>
   Create a new instance of the App-AutoScaler service:
  </para>

<screen>&prompt.user;cf create-service autoscaler autoscaler-free-plan <replaceable>service_instance_name</replaceable></screen>

  <para>
   A name of your choice may be used to replace
   <literal>service_instance_name</literal>.
  </para>

  <para>
   Bind the service instance to an application and attach a policy (See
   <xref linkend="sec.cap.app-autoscaler-policies"/>):
  </para>

<screen>&prompt.user;cf bind-service <replaceable>my_application</replaceable> <replaceable>service_instance_name</replaceable>
&prompt.user;cf attach-autoscaling-policy <replaceable>my_application</replaceable> <replaceable>my-policy.json</replaceable>  
</screen>

  <para>
   If a policy has already been defined and is available for use, you can
   attach the policy as part of the binding process instead:
  </para>

<screen>&prompt.user;cf bind-service <replaceable>my_application</replaceable> <replaceable>service_instance_name</replaceable> -c <replaceable>'{
    "instance_min_count": 1,
    "instance_max_count": 4,
    "scaling_rules": [{
        "metric_type": "memoryused",
        "stat_window_secs": 60,
        "breach_duration_secs": 60,
        "threshold": 10,
        "operator": ">=",
        "cool_down_secs": 300,
        "adjustment": "+1"
    }]
}'</replaceable></screen>

  <para>
   Note that attaching a policy in this manner requires passing the policy
   directly rather than specifying the path to the policy file.
  </para>

  <para>
   Once an instance of the App-AutoScaler service has been created and bound to
   an app, it can be managed using the &cfcli; with the App-AutoScaler plugin
   (See <xref linkend="sec.cap.app-autoscaler-cli"/>) or using the
   App-AutoScaler API (See <xref linkend="sec.cap.app-autoscaler-api"/>).
  </para>

  <sect2 xml:id="sec.cap.app-autoscaler-cli">
   <title>The App-AutoScaler &cfcli; Plugin</title>
   <para>
    The App-AutoScaler plugin is used for managing the service with your
    applications and provides the following commands. Refer to the
    <link xlink:href="https://github.com/cloudfoundry-incubator/app-autoscaler-cli-plugin#command-list">command
    list</link> for details about each command:
   </para>
   <variablelist>
    <varlistentry>
     <term><link xlink:href="https://github.com/cloudfoundry-incubator/app-autoscaler-cli-plugin#cf-autoscaling-api">autoscaling-api</link></term>
     <listitem>
      <para>
       Set or view AutoScaler service API endpoint
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><link xlink:href="https://github.com/cloudfoundry-incubator/app-autoscaler-cli-plugin#cf-autoscaling-policy">autoscaling-policy</link></term>
     <listitem>
      <para>
       Retrieve the scaling policy of an application
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><link xlink:href="https://github.com/cloudfoundry-incubator/app-autoscaler-cli-plugin#cf-attach-autoscaling-policy">attach-autoscaling-policy</link></term>
     <listitem>
      <para>
       Attach a scaling policy to an application
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><link xlink:href="https://github.com/cloudfoundry-incubator/app-autoscaler-cli-plugin#cf-detach-autoscaling-policy">detach-autoscaling-policy</link></term>
     <listitem>
      <para>
       Detach the scaling policy from an application
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><link xlink:href="https://github.com/cloudfoundry-incubator/app-autoscaler-cli-plugin#cf-autoscaling-metrics">autoscaling-metrics</link></term>
     <listitem>
      <para>
       Retrieve the metrics of an application
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><link xlink:href="https://github.com/cloudfoundry-incubator/app-autoscaler-cli-plugin#cf-autoscaling-history">autoscaling-history</link></term>
     <listitem>
      <para>
       Retrieve the scaling history of an application
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec.cap.app-autoscaler-api">
   <title>App-AutoScaler API</title>
   <para>
    The App-AutoScaler service provides a
    <link xlink:href="https://github.com/cloudfoundry-incubator/app-autoscaler/blob/develop/docs/Public_API.rst">Public
    API</link> with detailed usage information. It includes requests to:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <link xlink:href="https://github.com/cloudfoundry-incubator/app-autoscaler/blob/develop/docs/Public_API.rst#list-scaling-history-of-an-application">List
      scaling history of an application</link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="https://github.com/cloudfoundry-incubator/app-autoscaler/blob/develop/docs/Public_API.rst#list-instance-metrics-of-an-application">List
      instance metrics of an application</link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="https://github.com/cloudfoundry-incubator/app-autoscaler/blob/develop/docs/Public_API.rst#list-aggregated-metrics-of-an-application">List
      aggregated metrics of an application</link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="https://github.com/cloudfoundry-incubator/app-autoscaler/blob/develop/docs/Public_API.rst#policy-api">Set
      a policy</link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="https://github.com/cloudfoundry-incubator/app-autoscaler/blob/develop/docs/Public_API.rst#delete-policy">Delete
      a policy</link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="https://github.com/cloudfoundry-incubator/app-autoscaler/blob/develop/docs/Public_API.rst#get-policy">Get
      a policy</link>
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.cap.app-autoscaler-policies">
  <title>Policies</title>

  <para>
   A policy identifies characteristics including minimum instance count,
   maximum instance count, and the rules used to determine when the number of
   application instances is scaled up or down. These rules are categorized into
   two types, scheduled scaling and dynamic scaling. (See
   <xref linkend="sec.cap.app-autoscaler-scaling-types"/>). Multiple scaling
   rules can be specified in a policy, but App-AutoScaler does not detect or
   handle conflicts that may occur. Ensure there are no conflicting rules to
   avoid unintended scaling behavior.
  </para>

  <para>
   Policies are defined using the JSON format and can be attached to an
   application either by passing the path to the policy file or directly as a
   parameter.
  </para>

  <para>
   The following is an example of a policy file, called
   <filename>my-policy.json</filename>.
  </para>

<screen>{
    "instance_min_count": 1,
    "instance_max_count": 4,
    "scaling_rules": [{
        "metric_type": "memoryused",
        "stat_window_secs": 60,
        "breach_duration_secs": 60,
        "threshold": 10,
        "operator": ">=",
        "cool_down_secs": 300,
        "adjustment": "+1"
    }]
}
</screen>

  <para>
   For an example that demonstrates defining multiple scaling rules in a single
   policy, refer to this
   <link xlink:href="https://github.com/cloudfoundry-incubator/app-autoscaler/blob/develop/src/integration/fakePolicyWithSchedule.json">sample
   policy</link> file. The complete list of configurable policy values can be
   found at
   <link xlink:href="https://github.com/cloudfoundry-incubator/app-autoscaler/blob/master/docs/Policy_definition.rst">App-AutoScaler
   Policy Definition</link>.
  </para>

  <sect2 xml:id="sec.cap.app-autoscaler-scaling-types">
   <title>Scaling Types</title>
   <variablelist>
    <varlistentry>
     <term>Scheduled Scaling</term>
     <listitem>
      <para>
       Modifies an application's instance count at a predetermined time. This
       option is suitable for workloads with predictable resource usage.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Dynamic Scaling</term>
     <listitem>
      <para>
       Modifies an application's instance count based on metrics criteria. This
       option is suitable for workloads with dynamic resource usage. The
       following metrics are available:
      </para>
      <itemizedlist>
       <listitem>
        <para>
         memoryused
        </para>
       </listitem>
       <listitem>
        <para>
         memoryutil
        </para>
       </listitem>
       <listitem>
        <para>
         responsetime
        </para>
       </listitem>
       <listitem>
        <para>
         throughput
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    See
    <link xlink:href="https://github.com/cloudfoundry-incubator/app-autoscaler/tree/develop/docs#scaling-type">Scaling
    type</link> for additional details.
   </para>
  </sect2>
 </sect1>
</chapter>
