<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha-cap-overview"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
  <title>About &productname;</title>
 </info>
<!--references-->
<!--https://www.slideshare.net/NETWAYS/osdc-2018-highly-available-cloud-foundry-on-kubernetes-by-cornelius-schumacher -->
<!-- https://github.com/SUSE/cloudfoundry/wiki/Documentation-for-Security-Review#service-architecture-diagram -->
 <sect1 xml:id="sec-cap-changes">
  <title>New in Version &productnumber;</title>

  <itemizedlist>
   <listitem>
    <para>
     &productname; 2.0 is based on &kubecf; (<link xlink:href="https://www.cloudfoundry.org/kubecf/"/>, which uses the Quarks operator (<link xlink:href="https://www.cloudfoundry.org/project-quarks/"/>, also referred to as &operator;, to deploy releases from cf-deployment into &kube; environments. With this release, &kubecf; replaces SCF as the Cloud Foundry Application Runtime (CFAR) component of &productname;. Each &kubecf; release must be paired with a corresponding release of the Quarks operator, a &kube; operator (<link xlink:href="https://kubernetes.io/docs/concepts/extend-kubernetes/operator/"/>) implementation. In the case of &productname; 2.0, &kubecf; 2.2.2 must be paired with &operator; 4.5.6.
    </para>
   </listitem>
   <listitem>
    <para>
     &kubecf; 2.2.2 replaces &suse; &cf;:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       cf-deployment has been updated to 12.36
      </para>
     </listitem>
     <listitem>
      <para>
       Support for external Blobstore configuration
      </para>
     </listitem>
     <listitem>
      <para>
       &kubecf; 2.2.2 is paired with &operator; 4.5.6
      </para>
     </listitem>
     <listitem>
      <para>
       For a full list of features and fixes see <link xlink:href="https://github.com/cloudfoundry-incubator/kubecf/releases/tag/v2.2.2"/>
      </para>
     </listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>
     &operator; 4.5.6 has been added:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       For a full list of features and fixes see <link xlink:href="https://github.com/cloudfoundry-incubator/quarks-operator/releases/tag/v4.5.6"/>
      </para>
     </listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>
     Stratos Console has been updated to version &stratos_chart;:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       Improved SSO whitelist checks
      </para>
     </listitem>
     <listitem>
      <para>
       For a full list of features and fixes see <link xlink:href="https://github.com/SUSE/stratos/blob/v2-master/CHANGELOG.md#321"/>
      </para>
     </listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>
     Stratos Metrics has been updated to version &metrics_chart;:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       For a full list of updates see <link xlink:href="https://github.com/SUSE/stratos-metrics/blob/master/CHANGELOG.md#121"/>
      </para>
     </listitem>
    </itemizedlist>
   </listitem>

  </itemizedlist>

  <para>
   See all product manuals for &productname; 2.x at
   <link xlink:href="https://documentation.suse.com/suse-cap/2/"/>.
  </para>

  <tip>
   <title>Read the Release Notes</title>
   <para>
    Make sure to review the release notes for &productname; published at
    <link xlink:href="https://www.suse.com/releasenotes/x86_64/SUSE-CAP/1/"/>.
   </para>
  </tip>
 </sect1>
 <sect1 xml:id="sec-cap-overview">
  <title>&productname; Overview</title>
   <para>
    &productname; is a software platform for cloud-native applications based on
    Cloud Foundry Application Runtime (&operator;, &kubecf;, and Stratos) with
    additional supporting components.
   </para>

  <para>
   &productname; describes the complete software stack, including the operating
   system, &kube;, and &kubecf;.
  </para>

  <para>
   &productname; is comprised of &operator; (<literal>&operator;</literal>),
   &kubecf; (<literal>kubecf</literal>), the Stratos Web user interface, and
   Stratos Metrics.
  </para>

  <para>
   The &cf; code base provides the basic functionality. &kubecf; differentiates
   itself from other &cf; distributions by running in Linux containers managed
   by &kube;, rather than virtual machines managed with &bosh;, for greater
   fault tolerance and lower memory use.
  </para>

  <para>
   All &docker; images for the &sle; builds are hosted on
   <literal>registry.suse.com</literal>. These are the commercially-supported
   images. (Community-supported images for &opensuse; are hosted on
   <link xlink:href="https://hub.docker.com">&docker; Hub</link>.) Product
   manuals on
   <link xlink:href="https://documentation.suse.com/suse-cap/2/"/>  refer to the
   commercially-supported &sle; version.
  </para>

  <para>
   &cap; is designed to run on any &kube; cluster as described in
   <xref linkend="sec-cap-platform-support"/>. This guide describes how
   to deploy it:
  </para>
  <!-- Platforms covered by guide -->
  &deployment-platforms;

  <para>
   &productname; serves different but complementary purposes for operators and
   application developers.
  </para>

  <para>
   For operators, the platform is:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Easy to install, manage, and maintain
    </para>
   </listitem>
   <listitem>
    <para>
     Secure by design
    </para>
   </listitem>
   <listitem>
    <para>
     Fault tolerant and self-healing
    </para>
   </listitem>
   <listitem>
    <para>
     Offers high availability for critical components
    </para>
   </listitem>
   <listitem>
    <para>
     Uses industry-standard components
    </para>
   </listitem>
   <listitem>
    <para>
     Avoids single vendor lock-in
    </para>
   </listitem>
  </itemizedlist>

  <para>
   For developers, the platform:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Allocates computing resources on demand via API or Web interface
    </para>
   </listitem>
   <listitem>
    <para>
     Offers users a choice of language and Web framework
    </para>
   </listitem>
   <listitem>
    <para>
     Gives access to databases and other data services
    </para>
   </listitem>
   <listitem>
    <para>
     Emits and aggregates application log streams
    </para>
   </listitem>
   <listitem>
    <para>
     Tracks resource usage for users and groups
    </para>
   </listitem>
   <listitem>
    <para>
     Makes the software development workflow more efficient
    </para>
   </listitem>
  </itemizedlist>

  <para>
   The principle interface and API for deploying applications to &productname;
   is &kubecf;. Most &cf; distributions run on virtual machines managed
   by &bosh;. &kubecf; runs in &sle; containers managed by &kube;.
   Containerizing the components of the platform itself has these advantages:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Improves fault tolerance. &kube; monitors the health of all containers,
     and automatically restarts faulty containers faster than virtual machines
     can be restarted or replaced.
    </para>
   </listitem>
   <listitem>
    <para>
     Reduces physical memory overhead. &kubecf; components deployed in containers
     consume substantially less memory, as host-level operations are shared
     between containers by &kube;.
    </para>
   </listitem>
  </itemizedlist>

  <para>
   &productname; uses &operator;, a &kube; Operator deployed via a &helm; chart, to
   install custom resource definitions that convert &bosh; releases into
   &kube; resources, such as <literal>Pod</literal>, <literal>Deployment</literal>,
   and <literal>StatefulSet</literal>. This is made possible
   by leveraging &kubecf;, a version of &cf; deployed as &helm; chart.
  </para>
 </sect1>
 <sect1 xml:id="sec-cap-architecture">
  <title>&productname; Architecture</title>

  <para>
   The following figures illustrate the main structural concepts of
   &productname;. <xref linkend="fig-cap-cloud-101"/> shows a comparison of the
   basic cloud platforms:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Infrastructure as a Service (IaaS)
    </para>
   </listitem>
   <listitem>
    <para>
     Container as a Service (CaaS)
    </para>
   </listitem>
   <listitem>
    <para>
     Platform as a Service (PaaS)
    </para>
   </listitem>
   <listitem>
    <para>
     Software as a Service (SaaS)
    </para>
   </listitem>
  </itemizedlist>

  <para>
   &caasp; is a Container as a Service platform, and &productname; is a
   PaaS.
  </para>

  <figure xml:id="fig-cap-cloud-101">
   <title>Cloud Platform Comparisons</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="cloud-101.svg" format="SVG" width="75%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="cloud-101.svg"/>
    </imageobject>
    <textobject role="description"><phrase>Comparison of cloud platforms.</phrase>
    </textobject>
   </mediaobject>
  </figure>

  <para>
   <xref linkend="fig-cap-containerized"/> illustrates how &productname; containerize the platform itself on top of a cloud provider.
  </para>

  <figure xml:id="fig-cap-containerized">
   <title>Containerized Platforms</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="cap-containerized.svg" format="SVG" width="75%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="cap-containerized.svg"/>
    </imageobject>
    <textobject role="description"><phrase>&suse; &caasp; and &productname; containerize the
      platform itself.</phrase>
    </textobject>
   </mediaobject>
  </figure>

  <para>
   <xref linkend="fig-cap-stack"/> shows the relationships of the major
   components of the software stack. &productname; runs on &kube;, which in
   turn runs on multiple platforms, from bare metal to various cloud stacks.
   Your applications run on &productname; and provide services.
  </para>

  <figure xml:id="fig-cap-stack">
   <title>&productname; Stack</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="cap-kube.svg" format="SVG" width="75%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="cap-kube.svg"/>
    </imageobject>
    <textobject role="description"><phrase>Relationships of the main &cap;
            components.</phrase>
    </textobject>
   </mediaobject>
  </figure>

  <sect2 xml:id="sec-cap-components">
   <title>&kubecf; Components</title>
   <para>
    &kubecf; is comprised of developer and administrator clients, trusted download
    sites, transient and long-running components, APIs, and authentication:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      Clients for developers and admins to interact with &kubecf;: the &cfcli;,
      which provides the <command>cf</command> command, Stratos Web interface,
      IDE plugins.
     </para>
    </listitem>
    <listitem>
     <para>
      &docker; Trusted Registry owned by &suse;.
     </para>
    </listitem>
    <listitem>
     <para>
      &suse; Helm chart repository.
     </para>
    </listitem>
    <listitem>
     <para>
      &helm;, the &kube; package manager, and the <command>helm</command>
      command line client.
     </para>
    </listitem>
    <listitem>
     <para>
      <command>kubectl</command>, the command line client for &kube;.
     </para>
    </listitem>
    <listitem>
     <para>
       <command>&operator;</command>, a &kube; Operator that converts BOSH
       releases to &kube; resources.
     </para>
     </listitem>
     <listitem>
     <para>
       <command>&kubecf;</command>, a version of &cf; deployed via &operator;.
     </para>
    </listitem>
    <listitem>
     <para>
      Long-running &kubecf; components.
     </para>
    </listitem>
    <listitem>
     <para>
      &kubecf; post-deployment components: Transient &kubecf; components that start
      after all &kubecf; components are started, perform their tasks, and then
      exit.
     </para>
    </listitem>
    <listitem>
     <para>
      &kubecf; Linux cell, an elastic runtime component that runs Linux
      applications.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>uaa</literal>, a &cap; service for authentication and
      authorization.
     </para>
    </listitem>
    <listitem>
     <para>
      The &kube; API.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec-cap-containers">
   <title>&kubecf; Containers</title>
   <para>
    <xref linkend="fig-cap-cap-containers"/> provides a look at &kubecf;'s
    containers.
   </para>
   <figure xml:id="fig-cap-cap-containers">
    <title>&kubecf; Containers, Grouped by Function</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="cap-containers.svg" format="SVG" width="75%"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="cap-containers.svg" format="SVG"/>
     </imageobject>
     <textobject role="description"><phrase>&kubecf;'s containers, grouped
            by functionality.</phrase>
     </textobject>
    </mediaobject>
   </figure>
   <variablelist>
    <title>List of &kubecf; Containers</title>
    <varlistentry>
     <term>adapter</term>
     <listitem>
      <para>
       Part of the logging system, manages connections to user application
       syslog drains.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>api</term>
     <listitem>
      <para>
       Contains the &kubecf; Cloud Controller, which implements the CF API. It is
       exposed via the router.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>cc-worker</term>
     <listitem>
      <para>
       Sidekick to the Cloud Controller, processes background tasks.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>database</term>
     <listitem>
      <para>
       A PXC database to store persistent data for various CAP components such as the cloud controller, UAA, etc.
      </para>
     </listitem>
    </varlistentry>
   <varlistentry>
     <term>diego-api</term>
     <listitem>
      <para>
       API for the Diego scheduler.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>diego-cell (privileged)</term>
     <listitem>
      <para>
       The elastic layer of &kubecf;, where applications live.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>eirini</term>
     <listitem>
      <para>
       An alternative to the Diego scheduler.
      </para>
     </listitem>
    </varlistentry>
        <varlistentry>
     <term>eirini-persi</term>
     <listitem>
      <para>
       Enables persistent storage for applications when using the Eirini scheduler.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>eirini-ssh</term>
     <listitem>
      <para>
       Provides SSH access to user applications when using the Eirini scheduler.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>doppler</term>
     <listitem>
      <para>
       Routes log messages from applications and components.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>log-api</term>
     <listitem>
      <para>
       Part of the logging system; exposes log streams to users using web
       sockets and proxies user application log messages to syslog drains.
       Exposed using the router.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>nats</term>
     <listitem>
      <para>
       A pub-sub messaging queue for the routing system.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>router</term>
     <listitem>
      <para>
       Routes application and API traffic. Exposed using a &kube; service.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>routing-api</term>
     <listitem>
      <para>
       API for the routing system.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>scheduler</term>
     <listitem>
      <para>
       Service used to create, schedule and interact with jobs that execute on
       &cf;
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>singleton-blobstore</term>
     <listitem>
      <para>
       A WebDAV blobstore for storing application bits, buildpacks, and stacks.
      </para>
     </listitem>
    </varlistentry>
   <varlistentry>
     <term>tcp-router</term>
     <listitem>
      <para>
       Routes TCP traffic for your applications.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>uaa</term>
     <listitem>
      <para>
       User account and authentication.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-cap-service-diagram">
   <title>&kubecf; Service Diagram</title>
   <para>
    This simple service diagram illustrates how &kubecf; components communicate
    with each other (<xref linkend="fig-cap-simple-services"/>). See
    <xref linkend="fig-cap-detailed-services"/> for a more detailed view.
   </para>
   <figure xml:id="fig-cap-simple-services">
    <title>Simple Services Diagram</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="cap-simple-services.svg" format="SVG" width="75%"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="cap-simple-services.svg" format="SVG"/>
     </imageobject>
     <textobject role="description"><phrase>Simple Services Diagram</phrase>
     </textobject>
    </mediaobject>
   </figure>
   <para>
    This table describes how these services operate.
   </para>
   <informaltable>
    <tgroup cols="5">
     <thead>
      <row>
       <entry>Interface, Network Name, Network Protocol</entry>
       <entry>Requestor &amp; Request</entry>
       <entry>Request Credentials &amp; Request Authorization</entry>
       <entry>Listener, Response &amp; Response Credentials</entry>
       <entry>Description of Operation</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para>
	 1
	</para>
	<para>
         External (HTTPS)
	</para>
       </entry>
       <entry>
        <para>
 	 <emphasis role="bold">Requestor</emphasis>: &helm; Client
	</para>
	<para>

	</para>
	<para>
         <emphasis role="bold">Request</emphasis>: Deploy &cap;
	</para>
       </entry>
       <entry>
        <para>
 	 <emphasis role="bold">Request Credentials</emphasis>: OAuth2 Bearer
	 token
        </para>
	<para>
	 <emphasis role="bold">Request Authorization</emphasis>: Deployment of
	 &cap; Services on &kube;
	</para>
       </entry>
       <entry>
	<para>
	 <emphasis role="bold">Listener</emphasis>: &helm;/&kube; API
	</para>	
	<para>
         <emphasis role="bold">Response</emphasis>: Operation ack and handle
	</para>
	<para>
         <emphasis role="bold">Response Credentials</emphasis>: TLS certificate
	 on external endpoint
	</para>
       </entry>
       <entry>
        <para>
	 Operator deploys &cap; on &kube;
	</para>
       </entry>
      </row>
      <row>
       <entry>
	<para>
	 2
        </para>
	<para>
         External (HTTPS)
	</para>	
       </entry>
       <entry>
        <para>
	 <emphasis role="bold">Requestor</emphasis>: Internal &kube; components
	</para>
	<para>
         <emphasis role="bold">Request</emphasis>: Download &docker; Images
	</para>
       </entry>
       <entry>
        <para>
 	 <emphasis role="bold">Request Credentials</emphasis>: Refer to
	 registry.suse.com
	</para>
	<para>
 	 <emphasis role="bold">Request Authorization</emphasis>: Refer to
	 registry.suse.com
	</para>
       </entry>
       <entry>
        <para>
 	 <emphasis role="bold">Listener</emphasis>: registry.suse.com
	</para>
	<para>
	 <emphasis role="bold">Response</emphasis>: &docker; images
	</para>
	<para>
	 <emphasis role="bold">Response Credentials</emphasis>: None
	</para>
       </entry>
       <entry>
	<para>
 	 &docker; images that make up &cap; are downloaded
	</para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         3
	</para>
	<para>
         Tenant (HTTPS)
	</para>
       </entry>
       <entry>
	<para>
	 <emphasis role="bold">Requestor</emphasis>: &cap; components
	</para>
	<para>
	 <emphasis role="bold">Request</emphasis>: Get tokens
	</para>
       </entry>
       <entry>
        <para>
 	 <emphasis role="bold">Request Credentials</emphasis>: OAuth2 client
	 secret
	</para>
        <para>
	 <emphasis role="bold">Request Authorization</emphasis>: Varies, based
	 on configured OAuth2 client scopes
	</para>
       </entry>
       <entry>
	<para>
         <emphasis role="bold">Listener</emphasis>: <literal>uaa</literal>
	</para>
        <para>
	 <emphasis role="bold">Response</emphasis>: An OAuth2 refresh token used
	 to interact with other service
	</para>
	<para>
         <emphasis role="bold">Response Credentials</emphasis>: TLS certificate
	</para>
       </entry>
       <entry>
	<para>
	 &kubecf; components ask <literal>uaa</literal> for tokens so they can talk
	 to each other
	</para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         4
	</para>
	<para>
         External (HTTPS)
	</para>
       </entry>
       <entry>
        <para>
         <emphasis role="bold">Requestor</emphasis>: &kubecf; clients
	</para>
        <para>
         <emphasis role="bold">Request</emphasis>: &kubecf; API Requests
	</para>
       </entry>
       <entry>
        <para>                                                                  
	 <emphasis role="bold">Request Credentials</emphasis>: OAuth2 Bearer
	 token
        </para>
        <para>                                                                  
	 <emphasis role="bold">Request Authorization</emphasis>: &kubecf;
	 application management             
        </para>
       </entry>
       <entry>
	<para>
         <emphasis role="bold">Listener</emphasis>: &cap; components
	</para>
        <para>
	 <emphasis role="bold">Response</emphasis>: JSON object and HTTP Status
	 code
	</para>
	<para>
	 <emphasis role="bold">Response Credentials</emphasis>: TLS certificate
	 on external endpoint
	</para>
       </entry>
       <entry>
        <para>
	 &cap; Clients interact with the &kubecf; API (for example users deploying
	 apps)
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         5
	</para>
	<para>
         External (WSS)
	</para>
       </entry>
       <entry>
        <para>
         <emphasis role="bold">Requestor</emphasis>: &kubecf; clients
	</para>
	<para>
         <emphasis role="bold">Request</emphasis>: Log streaming
	</para>
       </entry>
       <entry>
        <para>
 	 <emphasis role="bold">Request Credentials</emphasis>: OAuth2 Bearer
	 token
	</para>
	<para>
	 <emphasis role="bold">Request Authorization</emphasis>: &kubecf;
	 application management
	</para>
       </entry>
       <entry>
        <para>
         <emphasis role="bold">Listener</emphasis>: &cap; components
	</para>
	<para>
         <emphasis role="bold">Response</emphasis>: A stream of &kubecf; logs
	</para>
	<para>
	 <emphasis role="bold">Response Credentials</emphasis>: TLS certificate
	 on external endpoint
	</para>
       </entry>
       <entry>
	<para>
	 &kubecf; clients ask for logs (for example user looking at application
	 logs or administrator viewing system logs)
	</para>
       </entry> 
      </row>
      <row>
       <entry>
        <para>
         6
	</para>
	<para>
         External (SSH)
	</para>
       </entry>
       <entry>
        <para>
         <emphasis role="bold">Requestor</emphasis>: &kubecf; clients, SSH clients
	</para>
	<para>
         <emphasis role="bold">Request</emphasis>: SSH Access to Application
	</para>
       </entry>
       <entry>
        <para>
	 <emphasis role="bold">Request Credentials</emphasis>: OAuth2 bearer
	 token
	</para>
	<para>
	 <emphasis role="bold">Request Authorization</emphasis>: &kubecf;
	 application management
	</para>
       </entry>
       <entry>
        <para>
         <emphasis role="bold">Listener</emphasis>: &cap; components
	</para>
        <para>
	 <emphasis role="bold">Response</emphasis>: A duplex connection is
	 created allowing the user to interact with a shell
	</para>
	<para>
	 <emphasis role="bold">Response Credentials</emphasis>: RSA SSH Key on
	 external endpoint
	</para>
       </entry> 
       <entry>
	<para>
	 &kubecf; Clients open an SSH connection to an application's container (for
	 example users debugging their applications)
	</para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         7
	</para>
	<para>
         External (HTTPS)
	</para>
       </entry>
       <entry>
        <para>
         <emphasis role="bold">Requestor</emphasis>: &helm;
	</para>
	<para>
         <emphasis role="bold">Request</emphasis>: Download charts
	</para>
       </entry>
       <entry>
        <para>
         <emphasis role="bold">Request Credentials</emphasis>: Refer to
	 kubernetes-charts.suse.com
	</para>
	<para>
         <emphasis role="bold">Request Authorization</emphasis>: Refer to
	 kubernetes-charts.suse.com
	</para>
       </entry>
       <entry>
        <para>
	 <emphasis role="bold">Listener</emphasis>: kubernetes-charts.suse.com
	</para>
        <para>
         <emphasis role="bold">Response</emphasis>: &helm; charts
	</para>
	<para>
	 <emphasis role="bold">Response Credentials</emphasis>: &helm; charts
	 for &cap; are downloaded
	</para>
       </entry>
       <entry>
        <para>
         &helm; charts for &cap; are downloaded
	</para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </sect2>

  <sect2 xml:id="sec-cap-services-detailed">
   <title>Detailed Services Diagram</title>
   <para>
    <xref linkend="fig-cap-detailed-services"/> presents a more detailed view
    of &kubecf; services and how they interact with each other. Services labeled
    in red are unencrypted, while services labeled in green run over HTTPS.
   </para>
   <figure xml:id="fig-cap-detailed-services">
    <title>Detailed Services Diagram</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="cap-detailed-services.svg" format="SVG" width="100%"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="cap-detailed-services.svg" format="SVG"/>
     </imageobject>
     <textobject role="description"><phrase>Detailed Services Diagram</phrase>
     </textobject>
    </mediaobject>
   </figure>
  </sect2>
 </sect1>
</chapter>
